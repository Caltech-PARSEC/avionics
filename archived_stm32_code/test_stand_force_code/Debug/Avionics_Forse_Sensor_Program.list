
Avionics_Forse_Sensor_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800352c  0800352c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08003530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a8  20000004  08003534  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001ac  08003534  000201ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e395  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003658  00000000  00000000  0003e3c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010f0  00000000  00000000  00041a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f68  00000000  00000000  00042b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008dcb  00000000  00000000  00043a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000050fa  00000000  00000000  0004c84b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00051945  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000459c  00000000  00000000  000519c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003480 	.word	0x08003480

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08003480 	.word	0x08003480

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fdff 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f002 fdfc 	bl	8003144 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <HAL_InitTick+0x30>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a09      	ldr	r2, [pc, #36]	; (800058c <HAL_InitTick+0x34>)
 8000566:	fba2 2303 	umull	r2, r3, r2, r3
 800056a:	099b      	lsrs	r3, r3, #6
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fe0e 	bl	800118e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000572:	2200      	movs	r2, #0
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	f04f 30ff 	mov.w	r0, #4294967295
 800057a:	f000 fdec 	bl	8001156 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000000 	.word	0x20000000
 800058c:	10624dd3 	.word	0x10624dd3

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick++;
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <HAL_IncTick+0x18>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <HAL_IncTick+0x18>)
 800059c:	6013      	str	r3, [r2, #0]
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000020 	.word	0x20000020

080005ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_GetTick+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000020 	.word	0x20000020

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff ffee 	bl	80005ac <HAL_GetTick>
 80005d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005dc:	d002      	beq.n	80005e4 <HAL_Delay+0x20>
  {
     wait++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005e4:	bf00      	nop
 80005e6:	f7ff ffe1 	bl	80005ac <HAL_GetTick>
 80005ea:	4602      	mov	r2, r0
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1ad2      	subs	r2, r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d3f7      	bcc.n	80005e6 <HAL_Delay+0x22>
  {
  }
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d101      	bne.n	8000614 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000610:	2301      	movs	r3, #1
 8000612:	e033      	b.n	800067c <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	2b00      	cmp	r3, #0
 800061a:	d109      	bne.n	8000630 <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f002 fa7c 	bl	8002b28 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 0310 	and.w	r3, r3, #16
 8000638:	2b00      	cmp	r3, #0
 800063a:	d118      	bne.n	800066e <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000644:	f023 0302 	bic.w	r3, r3, #2
 8000648:	f043 0202 	orr.w	r2, r3, #2
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 faa7 	bl	8000ba4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f023 0303 	bic.w	r3, r3, #3
 8000664:	f043 0201 	orr.w	r2, r3, #1
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	641a      	str	r2, [r3, #64]	; 0x40
 800066c:	e001      	b.n	8000672 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800066e:	2301      	movs	r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800067a:	7bfb      	ldrb	r3, [r7, #15]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000696:	2b01      	cmp	r3, #1
 8000698:	d101      	bne.n	800069e <HAL_ADC_Start+0x1a>
 800069a:	2302      	movs	r3, #2
 800069c:	e089      	b.n	80007b2 <HAL_ADC_Start+0x12e>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2201      	movs	r2, #1
 80006a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d018      	beq.n	80006e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	6892      	ldr	r2, [r2, #8]
 80006be:	f042 0201 	orr.w	r2, r2, #1
 80006c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006c4:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <HAL_ADC_Start+0x13c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a3e      	ldr	r2, [pc, #248]	; (80007c4 <HAL_ADC_Start+0x140>)
 80006ca:	fba2 2303 	umull	r2, r3, r2, r3
 80006ce:	0c9a      	lsrs	r2, r3, #18
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006d8:	e002      	b.n	80006e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	3b01      	subs	r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1f9      	bne.n	80006da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d05d      	beq.n	80007b0 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006fc:	f023 0301 	bic.w	r3, r3, #1
 8000700:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000712:	2b00      	cmp	r3, #0
 8000714:	d007      	beq.n	8000726 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800071e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800072e:	2b00      	cmp	r3, #0
 8000730:	d006      	beq.n	8000740 <HAL_ADC_Start+0xbc>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f023 0206 	bic.w	r2, r3, #6
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	645a      	str	r2, [r3, #68]	; 0x44
 800073e:	e002      	b.n	8000746 <HAL_ADC_Start+0xc2>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <HAL_ADC_Start+0x144>)
 8000750:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800075a:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	f003 031f 	and.w	r3, r3, #31
 8000764:	2b00      	cmp	r3, #0
 8000766:	d10f      	bne.n	8000788 <HAL_ADC_Start+0x104>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d11c      	bne.n	80007b0 <HAL_ADC_Start+0x12c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	6812      	ldr	r2, [r2, #0]
 800077e:	6892      	ldr	r2, [r2, #8]
 8000780:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	e013      	b.n	80007b0 <HAL_ADC_Start+0x12c>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <HAL_ADC_Start+0x148>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d10e      	bne.n	80007b0 <HAL_ADC_Start+0x12c>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d107      	bne.n	80007b0 <HAL_ADC_Start+0x12c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	6812      	ldr	r2, [r2, #0]
 80007a8:	6892      	ldr	r2, [r2, #8]
 80007aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007ae:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000000 	.word	0x20000000
 80007c4:	431bde83 	.word	0x431bde83
 80007c8:	40012300 	.word	0x40012300
 80007cc:	40012000 	.word	0x40012000

080007d0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d101      	bne.n	80007e6 <HAL_ADC_Stop+0x16>
 80007e2:	2302      	movs	r3, #2
 80007e4:	e021      	b.n	800082a <HAL_ADC_Stop+0x5a>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2201      	movs	r2, #1
 80007ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	6812      	ldr	r2, [r2, #0]
 80007f6:	6892      	ldr	r2, [r2, #8]
 80007f8:	f022 0201 	bic.w	r2, r2, #1
 80007fc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	2b00      	cmp	r3, #0
 800080a:	d109      	bne.n	8000820 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000814:	f023 0301 	bic.w	r3, r3, #1
 8000818:	f043 0201 	orr.w	r2, r3, #1
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b084      	sub	sp, #16
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800084e:	2b00      	cmp	r3, #0
 8000850:	d012      	beq.n	8000878 <HAL_ADC_PollForConversion+0x42>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00b      	beq.n	8000878 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f043 0220 	orr.w	r2, r3, #32
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e05c      	b.n	8000932 <HAL_ADC_PollForConversion+0xfc>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000878:	f7ff fe98 	bl	80005ac <HAL_GetTick>
 800087c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800087e:	e01a      	b.n	80008b6 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000886:	d016      	beq.n	80008b6 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d007      	beq.n	800089e <HAL_ADC_PollForConversion+0x68>
 800088e:	f7ff fe8d 	bl	80005ac <HAL_GetTick>
 8000892:	4602      	mov	r2, r0
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	1ad2      	subs	r2, r2, r3
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	429a      	cmp	r2, r3
 800089c:	d90b      	bls.n	80008b6 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f043 0204 	orr.w	r2, r3, #4
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80008b2:	2303      	movs	r3, #3
 80008b4:	e03d      	b.n	8000932 <HAL_ADC_PollForConversion+0xfc>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f003 0302 	and.w	r3, r3, #2
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d1dd      	bne.n	8000880 <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f06f 0212 	mvn.w	r2, #18
 80008cc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d123      	bne.n	8000930 <HAL_ADC_PollForConversion+0xfa>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d11f      	bne.n	8000930 <HAL_ADC_PollForConversion+0xfa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d006      	beq.n	800090c <HAL_ADC_PollForConversion+0xd6>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000908:	2b00      	cmp	r3, #0
 800090a:	d111      	bne.n	8000930 <HAL_ADC_PollForConversion+0xfa>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d105      	bne.n	8000930 <HAL_ADC_PollForConversion+0xfa>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f043 0201 	orr.w	r2, r3, #1
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000954:	b490      	push	{r4, r7}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000968:	2b01      	cmp	r3, #1
 800096a:	d101      	bne.n	8000970 <HAL_ADC_ConfigChannel+0x1c>
 800096c:	2302      	movs	r3, #2
 800096e:	e109      	b.n	8000b84 <HAL_ADC_ConfigChannel+0x230>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2201      	movs	r2, #1
 8000974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b09      	cmp	r3, #9
 800097e:	d926      	bls.n	80009ce <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68d9      	ldr	r1, [r3, #12]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	b29b      	uxth	r3, r3
 8000990:	4618      	mov	r0, r3
 8000992:	4603      	mov	r3, r0
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4403      	add	r3, r0
 8000998:	3b1e      	subs	r3, #30
 800099a:	2007      	movs	r0, #7
 800099c:	fa00 f303 	lsl.w	r3, r0, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	400b      	ands	r3, r1
 80009a4:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68d9      	ldr	r1, [r3, #12]
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	6898      	ldr	r0, [r3, #8]
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	461c      	mov	r4, r3
 80009bc:	4623      	mov	r3, r4
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4423      	add	r3, r4
 80009c2:	3b1e      	subs	r3, #30
 80009c4:	fa00 f303 	lsl.w	r3, r0, r3
 80009c8:	430b      	orrs	r3, r1
 80009ca:	60d3      	str	r3, [r2, #12]
 80009cc:	e023      	b.n	8000a16 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6919      	ldr	r1, [r3, #16]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	4603      	mov	r3, r0
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4403      	add	r3, r0
 80009e6:	2007      	movs	r0, #7
 80009e8:	fa00 f303 	lsl.w	r3, r0, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	400b      	ands	r3, r1
 80009f0:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6919      	ldr	r1, [r3, #16]
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	6898      	ldr	r0, [r3, #8]
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	461c      	mov	r4, r3
 8000a08:	4623      	mov	r3, r4
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4423      	add	r3, r4
 8000a0e:	fa00 f303 	lsl.w	r3, r0, r3
 8000a12:	430b      	orrs	r3, r1
 8000a14:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d824      	bhi.n	8000a68 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6819      	ldr	r1, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	3b05      	subs	r3, #5
 8000a34:	221f      	movs	r2, #31
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	4003      	ands	r3, r0
 8000a3e:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6819      	ldr	r1, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	461c      	mov	r4, r3
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	3b05      	subs	r3, #5
 8000a5e:	fa04 f303 	lsl.w	r3, r4, r3
 8000a62:	4303      	orrs	r3, r0
 8000a64:	634b      	str	r3, [r1, #52]	; 0x34
 8000a66:	e04c      	b.n	8000b02 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	2b0c      	cmp	r3, #12
 8000a6e:	d824      	bhi.n	8000aba <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6819      	ldr	r1, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	3b23      	subs	r3, #35	; 0x23
 8000a86:	221f      	movs	r2, #31
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4003      	ands	r3, r0
 8000a90:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6819      	ldr	r1, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	461c      	mov	r4, r3
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	3b23      	subs	r3, #35	; 0x23
 8000ab0:	fa04 f303 	lsl.w	r3, r4, r3
 8000ab4:	4303      	orrs	r3, r0
 8000ab6:	630b      	str	r3, [r1, #48]	; 0x30
 8000ab8:	e023      	b.n	8000b02 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6819      	ldr	r1, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	3b41      	subs	r3, #65	; 0x41
 8000ad0:	221f      	movs	r2, #31
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	4003      	ands	r3, r0
 8000ada:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6819      	ldr	r1, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	461c      	mov	r4, r3
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	3b41      	subs	r3, #65	; 0x41
 8000afa:	fa04 f303 	lsl.w	r3, r4, r3
 8000afe:	4303      	orrs	r3, r0
 8000b00:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <HAL_ADC_ConfigChannel+0x23c>)
 8000b04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <HAL_ADC_ConfigChannel+0x240>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d109      	bne.n	8000b24 <HAL_ADC_ConfigChannel+0x1d0>
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b12      	cmp	r3, #18
 8000b16:	d105      	bne.n	8000b24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <HAL_ADC_ConfigChannel+0x240>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d125      	bne.n	8000b7a <HAL_ADC_ConfigChannel+0x226>
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_ADC_ConfigChannel+0x244>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d003      	beq.n	8000b40 <HAL_ADC_ConfigChannel+0x1ec>
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b11      	cmp	r3, #17
 8000b3e:	d11c      	bne.n	8000b7a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <HAL_ADC_ConfigChannel+0x244>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d111      	bne.n	8000b7a <HAL_ADC_ConfigChannel+0x226>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_ADC_ConfigChannel+0x248>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_ADC_ConfigChannel+0x24c>)
 8000b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b60:	0c9a      	lsrs	r2, r3, #18
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b6c:	e002      	b.n	8000b74 <HAL_ADC_ConfigChannel+0x220>
      {
        counter--;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1f9      	bne.n	8000b6e <HAL_ADC_ConfigChannel+0x21a>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc90      	pop	{r4, r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40012300 	.word	0x40012300
 8000b94:	40012000 	.word	0x40012000
 8000b98:	10000012 	.word	0x10000012
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	431bde83 	.word	0x431bde83

08000ba4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bac:	4b78      	ldr	r3, [pc, #480]	; (8000d90 <ADC_Init+0x1ec>)
 8000bae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	6852      	ldr	r2, [r2, #4]
 8000bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	6851      	ldr	r1, [r2, #4]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	6912      	ldr	r2, [r2, #16]
 8000be8:	0212      	lsls	r2, r2, #8
 8000bea:	430a      	orrs	r2, r1
 8000bec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	6852      	ldr	r2, [r2, #4]
 8000bf8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	6851      	ldr	r1, [r2, #4]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	6892      	ldr	r2, [r2, #8]
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	6812      	ldr	r2, [r2, #0]
 8000c18:	6892      	ldr	r2, [r2, #8]
 8000c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	6812      	ldr	r2, [r2, #0]
 8000c28:	6891      	ldr	r1, [r2, #8]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68d2      	ldr	r2, [r2, #12]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c36:	4a57      	ldr	r2, [pc, #348]	; (8000d94 <ADC_Init+0x1f0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d022      	beq.n	8000c82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	6812      	ldr	r2, [r2, #0]
 8000c44:	6892      	ldr	r2, [r2, #8]
 8000c46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	6891      	ldr	r1, [r2, #8]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	6892      	ldr	r2, [r2, #8]
 8000c68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	6812      	ldr	r2, [r2, #0]
 8000c76:	6891      	ldr	r1, [r2, #8]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	e00f      	b.n	8000ca2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	6892      	ldr	r2, [r2, #8]
 8000c8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	6892      	ldr	r2, [r2, #8]
 8000c9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ca0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	6892      	ldr	r2, [r2, #8]
 8000cac:	f022 0202 	bic.w	r2, r2, #2
 8000cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	6812      	ldr	r2, [r2, #0]
 8000cba:	6891      	ldr	r1, [r2, #8]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	6992      	ldr	r2, [r2, #24]
 8000cc0:	0052      	lsls	r2, r2, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a1b      	ldr	r3, [r3, #32]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d01b      	beq.n	8000d06 <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	6812      	ldr	r2, [r2, #0]
 8000cd6:	6852      	ldr	r2, [r2, #4]
 8000cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cdc:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	6812      	ldr	r2, [r2, #0]
 8000ce6:	6852      	ldr	r2, [r2, #4]
 8000ce8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000cec:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	6812      	ldr	r2, [r2, #0]
 8000cf6:	6851      	ldr	r1, [r2, #4]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000cfc:	3a01      	subs	r2, #1
 8000cfe:	0352      	lsls	r2, r2, #13
 8000d00:	430a      	orrs	r2, r1
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	e007      	b.n	8000d16 <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	6812      	ldr	r2, [r2, #0]
 8000d0e:	6852      	ldr	r2, [r2, #4]
 8000d10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d14:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	6812      	ldr	r2, [r2, #0]
 8000d1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d20:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	69d2      	ldr	r2, [r2, #28]
 8000d34:	3a01      	subs	r2, #1
 8000d36:	0512      	lsls	r2, r2, #20
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	6812      	ldr	r2, [r2, #0]
 8000d44:	6892      	ldr	r2, [r2, #8]
 8000d46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	6891      	ldr	r1, [r2, #8]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d5a:	0252      	lsls	r2, r2, #9
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	6892      	ldr	r2, [r2, #8]
 8000d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	6891      	ldr	r1, [r2, #8]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	6952      	ldr	r2, [r2, #20]
 8000d7e:	0292      	lsls	r2, r2, #10
 8000d80:	430a      	orrs	r2, r1
 8000d82:	609a      	str	r2, [r3, #8]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40012300 	.word	0x40012300
 8000d94:	0f000001 	.word	0x0f000001

08000d98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t InitStatus = CAN_INITSTATUS_FAILED;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_CAN_Init+0x1a>
  {
     return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e112      	b.n	8000fd8 <HAL_CAN_Init+0x240>
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  

  if(hcan->State == HAL_CAN_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d106      	bne.n	8000dcc <HAL_CAN_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f001 ff24 	bl	8002c14 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2202      	movs	r2, #2
 8000dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	6812      	ldr	r2, [r2, #0]
 8000dde:	f022 0202 	bic.w	r2, r2, #2
 8000de2:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	f042 0201 	orr.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000df4:	f7ff fbda 	bl	80005ac <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]

  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000dfa:	e010      	b.n	8000e1e <HAL_CAN_Init+0x86>
  {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000dfc:	f7ff fbd6 	bl	80005ac <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b0a      	cmp	r3, #10
 8000e08:	d909      	bls.n	8000e1e <HAL_CAN_Init+0x86>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e0dc      	b.n	8000fd8 <HAL_CAN_Init+0x240>
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d1e7      	bne.n	8000dfc <HAL_CAN_Init+0x64>
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	f040 80bd 	bne.w	8000fb6 <HAL_CAN_Init+0x21e>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d108      	bne.n	8000e56 <HAL_CAN_Init+0xbe>
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	e007      	b.n	8000e66 <HAL_CAN_Init+0xce>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	6812      	ldr	r2, [r2, #0]
 8000e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e64:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d108      	bne.n	8000e80 <HAL_CAN_Init+0xe8>
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6812      	ldr	r2, [r2, #0]
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e007      	b.n	8000e90 <HAL_CAN_Init+0xf8>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e8e:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d108      	bne.n	8000eaa <HAL_CAN_Init+0x112>
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	f042 0220 	orr.w	r2, r2, #32
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e007      	b.n	8000eba <HAL_CAN_Init+0x122>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	6812      	ldr	r2, [r2, #0]
 8000eb4:	f022 0220 	bic.w	r2, r2, #32
 8000eb8:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d108      	bne.n	8000ed4 <HAL_CAN_Init+0x13c>
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	6812      	ldr	r2, [r2, #0]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	f042 0210 	orr.w	r2, r2, #16
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e007      	b.n	8000ee4 <HAL_CAN_Init+0x14c>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	6812      	ldr	r2, [r2, #0]
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	f022 0210 	bic.w	r2, r2, #16
 8000ee2:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d108      	bne.n	8000efe <HAL_CAN_Init+0x166>
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6812      	ldr	r2, [r2, #0]
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	f042 0208 	orr.w	r2, r2, #8
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e007      	b.n	8000f0e <HAL_CAN_Init+0x176>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	6812      	ldr	r2, [r2, #0]
 8000f08:	f022 0208 	bic.w	r2, r2, #8
 8000f0c:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d108      	bne.n	8000f28 <HAL_CAN_Init+0x190>
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	f042 0204 	orr.w	r2, r2, #4
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e007      	b.n	8000f38 <HAL_CAN_Init+0x1a0>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	f022 0204 	bic.w	r2, r2, #4
 8000f36:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6891      	ldr	r1, [r2, #8]
                ((uint32_t)hcan->Init.SJW) | \
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68d2      	ldr	r2, [r2, #12]
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000f44:	4311      	orrs	r1, r2
                ((uint32_t)hcan->Init.BS1) | \
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6912      	ldr	r2, [r2, #16]
                ((uint32_t)hcan->Init.SJW) | \
 8000f4a:	4311      	orrs	r1, r2
                ((uint32_t)hcan->Init.BS2) | \
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6952      	ldr	r2, [r2, #20]
                ((uint32_t)hcan->Init.BS1) | \
 8000f50:	4311      	orrs	r1, r2
               ((uint32_t)hcan->Init.Prescaler - 1U);
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6852      	ldr	r2, [r2, #4]
 8000f56:	3a01      	subs	r2, #1
                ((uint32_t)hcan->Init.BS2) | \
 8000f58:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000f5a:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6812      	ldr	r2, [r2, #0]
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	f022 0201 	bic.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f6c:	f7ff fb1e 	bl	80005ac <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]

   /* Wait the acknowledge */
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000f72:	e010      	b.n	8000f96 <HAL_CAN_Init+0x1fe>
   {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000f74:	f7ff fb1a 	bl	80005ac <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b0a      	cmp	r3, #10
 8000f80:	d909      	bls.n	8000f96 <HAL_CAN_Init+0x1fe>
     {
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2203      	movs	r2, #3
 8000f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
       return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e020      	b.n	8000fd8 <HAL_CAN_Init+0x240>
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d0e7      	beq.n	8000f74 <HAL_CAN_Init+0x1dc>
     }
   }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d001      	beq.n	8000fb6 <HAL_CAN_Init+0x21e>
    {
      InitStatus = CAN_INITSTATUS_SUCCESS;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
    }
  }
 
  if(InitStatus == CAN_INITSTATUS_SUCCESS)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d108      	bne.n	8000fce <HAL_CAN_Init+0x236>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
    /* Return function status */
    return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e004      	b.n	8000fd8 <HAL_CAN_Init+0x240>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Return function status */
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
  }
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	da0b      	bge.n	8001070 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	490d      	ldr	r1, [pc, #52]	; (8001090 <NVIC_SetPriority+0x4c>)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 030f 	and.w	r3, r3, #15
 8001060:	3b04      	subs	r3, #4
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106e:	e009      	b.n	8001084 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	4908      	ldr	r1, [pc, #32]	; (8001094 <NVIC_SetPriority+0x50>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00
 8001094:	e000e100 	.word	0xe000e100

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	2201      	movs	r2, #1
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	1e5a      	subs	r2, r3, #1
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	401a      	ands	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010de:	2101      	movs	r1, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	1e59      	subs	r1, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f7ff ff90 	bl	8001044 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff49 	bl	8000fe0 <NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff5e 	bl	8001028 <NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff90 	bl	8001098 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5f 	bl	8001044 <NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ffb0 	bl	80010fc <SysTick_Config>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d106      	bne.n	80011c4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80011c2:	e005      	b.n	80011d0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80011c4:	4a05      	ldr	r2, [pc, #20]	; (80011dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80011e4:	f000 f802 	bl	80011ec <HAL_SYSTICK_Callback>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e014      	b.n	8001236 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	791b      	ldrb	r3, [r3, #4]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d105      	bne.n	8001222 <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	715a      	strb	r2, [r3, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f001 fd63 	bl	8002ce8 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2202      	movs	r2, #2
 8001226:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800123e:	b480      	push	{r7}
 8001240:	b087      	sub	sp, #28
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	795b      	ldrb	r3, [r3, #5]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d101      	bne.n	800125e <HAL_DAC_ConfigChannel+0x20>
 800125a:	2302      	movs	r3, #2
 800125c:	e036      	b.n	80012cc <HAL_DAC_ConfigChannel+0x8e>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2201      	movs	r2, #1
 8001262:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2202      	movs	r2, #2
 8001268:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001272:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4013      	ands	r3, r2
 8001282:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	4313      	orrs	r3, r2
 800129c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	6811      	ldr	r1, [r2, #0]
 80012b0:	20c0      	movs	r0, #192	; 0xc0
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	fa00 f202 	lsl.w	r2, r0, r2
 80012b8:	43d2      	mvns	r2, r2
 80012ba:	400a      	ands	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2201      	movs	r2, #1
 80012c2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e165      	b.n	80015c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8154 	bne.w	80015ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x4a>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b12      	cmp	r3, #18
 8001320:	d123      	bne.n	800136a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	69b9      	ldr	r1, [r7, #24]
 8001366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0203 	and.w	r2, r3, #3
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d00b      	beq.n	80013be <HAL_GPIO_Init+0xe6>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b2:	2b11      	cmp	r3, #17
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d130      	bne.n	8001420 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f4:	2201      	movs	r2, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 0201 	and.w	r2, r3, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80ae 	beq.w	80015ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4a5c      	ldr	r2, [pc, #368]	; (80015d4 <HAL_GPIO_Init+0x2fc>)
 8001464:	4b5b      	ldr	r3, [pc, #364]	; (80015d4 <HAL_GPIO_Init+0x2fc>)
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b59      	ldr	r3, [pc, #356]	; (80015d4 <HAL_GPIO_Init+0x2fc>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147a:	4a57      	ldr	r2, [pc, #348]	; (80015d8 <HAL_GPIO_Init+0x300>)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4e      	ldr	r2, [pc, #312]	; (80015dc <HAL_GPIO_Init+0x304>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d025      	beq.n	80014f2 <HAL_GPIO_Init+0x21a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4d      	ldr	r2, [pc, #308]	; (80015e0 <HAL_GPIO_Init+0x308>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d01f      	beq.n	80014ee <HAL_GPIO_Init+0x216>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4c      	ldr	r2, [pc, #304]	; (80015e4 <HAL_GPIO_Init+0x30c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d019      	beq.n	80014ea <HAL_GPIO_Init+0x212>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4b      	ldr	r2, [pc, #300]	; (80015e8 <HAL_GPIO_Init+0x310>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0x20e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4a      	ldr	r2, [pc, #296]	; (80015ec <HAL_GPIO_Init+0x314>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00d      	beq.n	80014e2 <HAL_GPIO_Init+0x20a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a49      	ldr	r2, [pc, #292]	; (80015f0 <HAL_GPIO_Init+0x318>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_GPIO_Init+0x206>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a48      	ldr	r2, [pc, #288]	; (80015f4 <HAL_GPIO_Init+0x31c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_GPIO_Init+0x202>
 80014d6:	2306      	movs	r3, #6
 80014d8:	e00c      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014da:	2307      	movs	r3, #7
 80014dc:	e00a      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014de:	2305      	movs	r3, #5
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x21c>
 80014f2:	2300      	movs	r3, #0
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001504:	4934      	ldr	r1, [pc, #208]	; (80015d8 <HAL_GPIO_Init+0x300>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001512:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <HAL_GPIO_Init+0x320>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001536:	4a30      	ldr	r2, [pc, #192]	; (80015f8 <HAL_GPIO_Init+0x320>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_GPIO_Init+0x320>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001560:	4a25      	ldr	r2, [pc, #148]	; (80015f8 <HAL_GPIO_Init+0x320>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_GPIO_Init+0x320>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158a:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <HAL_GPIO_Init+0x320>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_GPIO_Init+0x320>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b4:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <HAL_GPIO_Init+0x320>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	f67f ae96 	bls.w	80012f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	3724      	adds	r7, #36	; 0x24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020c00 	.word	0x40020c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40021800 	.word	0x40021800
 80015f8:	40013c00 	.word	0x40013c00

080015fc <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0c8      	b.n	80017a8 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f001 fc0e 	bl	8002e4c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2224      	movs	r2, #36	; 0x24
 8001634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001648:	f000 f9f6 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 800164c:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	4a57      	ldr	r2, [pc, #348]	; (80017b0 <HAL_I2C_Init+0x1b4>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4952      	ldr	r1, [pc, #328]	; (80017b4 <HAL_I2C_Init+0x1b8>)
 800166c:	428b      	cmp	r3, r1
 800166e:	d802      	bhi.n	8001676 <HAL_I2C_Init+0x7a>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3301      	adds	r3, #1
 8001674:	e009      	b.n	800168a <HAL_I2C_Init+0x8e>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800167c:	fb01 f303 	mul.w	r3, r1, r3
 8001680:	494d      	ldr	r1, [pc, #308]	; (80017b8 <HAL_I2C_Init+0x1bc>)
 8001682:	fba1 1303 	umull	r1, r3, r1, r3
 8001686:	099b      	lsrs	r3, r3, #6
 8001688:	3301      	adds	r3, #1
 800168a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a47      	ldr	r2, [pc, #284]	; (80017b4 <HAL_I2C_Init+0x1b8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d812      	bhi.n	80016c0 <HAL_I2C_Init+0xc4>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d906      	bls.n	80016bc <HAL_I2C_Init+0xc0>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	e045      	b.n	8001748 <HAL_I2C_Init+0x14c>
 80016bc:	2304      	movs	r3, #4
 80016be:	e043      	b.n	8001748 <HAL_I2C_Init+0x14c>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10f      	bne.n	80016e8 <HAL_I2C_Init+0xec>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	e010      	b.n	800170a <HAL_I2C_Init+0x10e>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	009a      	lsls	r2, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Init+0x116>
 800170e:	2301      	movs	r3, #1
 8001710:	e01a      	b.n	8001748 <HAL_I2C_Init+0x14c>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <HAL_I2C_Init+0x134>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172e:	e00b      	b.n	8001748 <HAL_I2C_Init+0x14c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	009a      	lsls	r2, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	fbb2 f3f3 	udiv	r3, r2, r3
 8001744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001748:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	69d1      	ldr	r1, [r2, #28]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6a12      	ldr	r2, [r2, #32]
 8001756:	430a      	orrs	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6911      	ldr	r1, [r2, #16]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68d2      	ldr	r2, [r2, #12]
 8001766:	430a      	orrs	r2, r1
 8001768:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6951      	ldr	r1, [r2, #20]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6992      	ldr	r2, [r2, #24]
 8001776:	430a      	orrs	r2, r1
 8001778:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2220      	movs	r2, #32
 8001794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	431bde83 	.word	0x431bde83
 80017b4:	000186a0 	.word	0x000186a0
 80017b8:	10624dd3 	.word	0x10624dd3

080017bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4a20      	ldr	r2, [pc, #128]	; (800184c <HAL_PWREx_EnableOverDrive+0x90>)
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_PWREx_EnableOverDrive+0x90>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_PWREx_EnableOverDrive+0x90>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_PWREx_EnableOverDrive+0x94>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e8:	f7fe fee0 	bl	80005ac <HAL_GetTick>
 80017ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017ee:	e009      	b.n	8001804 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017f0:	f7fe fedc 	bl	80005ac <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017fe:	d901      	bls.n	8001804 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e01f      	b.n	8001844 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_PWREx_EnableOverDrive+0x98>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001810:	d1ee      	bne.n	80017f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001818:	f7fe fec8 	bl	80005ac <HAL_GetTick>
 800181c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800181e:	e009      	b.n	8001834 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001820:	f7fe fec4 	bl	80005ac <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800182e:	d901      	bls.n	8001834 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e007      	b.n	8001844 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <HAL_PWREx_EnableOverDrive+0x98>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001840:	d1ee      	bne.n	8001820 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	420e0040 	.word	0x420e0040
 8001854:	40007000 	.word	0x40007000
 8001858:	420e0044 	.word	0x420e0044

0800185c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0ca      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001870:	4b67      	ldr	r3, [pc, #412]	; (8001a10 <HAL_RCC_ClockConfig+0x1b4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 020f 	and.w	r2, r3, #15
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d20c      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b64      	ldr	r3, [pc, #400]	; (8001a10 <HAL_RCC_ClockConfig+0x1b4>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b62      	ldr	r3, [pc, #392]	; (8001a10 <HAL_RCC_ClockConfig+0x1b4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 020f 	and.w	r2, r3, #15
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b6      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 80018b2:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 80018ca:	4b52      	ldr	r3, [pc, #328]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	494f      	ldr	r1, [pc, #316]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	4b4f      	ldr	r3, [pc, #316]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d044      	beq.n	800197c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b46      	ldr	r3, [pc, #280]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d119      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e07d      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d003      	beq.n	800191a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001916:	2b03      	cmp	r3, #3
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e06d      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	4b3a      	ldr	r3, [pc, #232]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e065      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193a:	4936      	ldr	r1, [pc, #216]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	4b35      	ldr	r3, [pc, #212]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 0203 	bic.w	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4313      	orrs	r3, r2
 800194a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800194c:	f7fe fe2e 	bl	80005ac <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	e00a      	b.n	800196a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f7fe fe2a 	bl	80005ac <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e04d      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 020c 	and.w	r2, r3, #12
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	429a      	cmp	r2, r3
 800197a:	d1eb      	bne.n	8001954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_ClockConfig+0x1b4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 020f 	and.w	r2, r3, #15
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d90c      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_RCC_ClockConfig+0x1b4>)
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <HAL_RCC_ClockConfig+0x1b4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 020f 	and.w	r2, r3, #15
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e030      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	4918      	ldr	r1, [pc, #96]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ce:	4911      	ldr	r1, [pc, #68]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019e2:	f000 f83d 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 80019e6:	4601      	mov	r1, r0
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	fa21 f303 	lsr.w	r3, r1, r3
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f7fe fdaa 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00
 8001a14:	40023800 	.word	0x40023800
 8001a18:	08003508 	.word	0x08003508
 8001a1c:	20000000 	.word	0x20000000

08001a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a3c:	f7ff fff0 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a40:	4601      	mov	r1, r0
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	0a9b      	lsrs	r3, r3, #10
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	08003518 	.word	0x08003518

08001a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a64:	b0a1      	sub	sp, #132	; 0x84
 8001a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a7c:	4ba0      	ldr	r3, [pc, #640]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	f200 8193 	bhi.w	8001db0 <HAL_RCC_GetSysClockFreq+0x350>
 8001a8a:	a201      	add	r2, pc, #4	; (adr r2, 8001a90 <HAL_RCC_GetSysClockFreq+0x30>)
 8001a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a90:	08001ac5 	.word	0x08001ac5
 8001a94:	08001db1 	.word	0x08001db1
 8001a98:	08001db1 	.word	0x08001db1
 8001a9c:	08001db1 	.word	0x08001db1
 8001aa0:	08001acb 	.word	0x08001acb
 8001aa4:	08001db1 	.word	0x08001db1
 8001aa8:	08001db1 	.word	0x08001db1
 8001aac:	08001db1 	.word	0x08001db1
 8001ab0:	08001ad1 	.word	0x08001ad1
 8001ab4:	08001db1 	.word	0x08001db1
 8001ab8:	08001db1 	.word	0x08001db1
 8001abc:	08001db1 	.word	0x08001db1
 8001ac0:	08001c4d 	.word	0x08001c4d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac4:	4b8f      	ldr	r3, [pc, #572]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8001ac6:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8001ac8:	e175      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aca:	4b8f      	ldr	r3, [pc, #572]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8001acc:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001ace:	e172      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad0:	4b8b      	ldr	r3, [pc, #556]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad8:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ada:	4b89      	ldr	r3, [pc, #548]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d056      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae6:	4b86      	ldr	r3, [pc, #536]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	099b      	lsrs	r3, r3, #6
 8001aec:	f04f 0400 	mov.w	r4, #0
 8001af0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	ea01 0103 	and.w	r1, r1, r3
 8001afc:	ea02 0204 	and.w	r2, r2, r4
 8001b00:	460b      	mov	r3, r1
 8001b02:	4614      	mov	r4, r2
 8001b04:	0160      	lsls	r0, r4, #5
 8001b06:	6678      	str	r0, [r7, #100]	; 0x64
 8001b08:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001b0a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001b0e:	6678      	str	r0, [r7, #100]	; 0x64
 8001b10:	015b      	lsls	r3, r3, #5
 8001b12:	663b      	str	r3, [r7, #96]	; 0x60
 8001b14:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001b18:	1a5b      	subs	r3, r3, r1
 8001b1a:	eb64 0402 	sbc.w	r4, r4, r2
 8001b1e:	01a0      	lsls	r0, r4, #6
 8001b20:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001b22:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001b24:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8001b28:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001b2a:	0198      	lsls	r0, r3, #6
 8001b2c:	65b8      	str	r0, [r7, #88]	; 0x58
 8001b2e:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8001b32:	1aed      	subs	r5, r5, r3
 8001b34:	eb66 0604 	sbc.w	r6, r6, r4
 8001b38:	4633      	mov	r3, r6
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	657b      	str	r3, [r7, #84]	; 0x54
 8001b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b40:	4628      	mov	r0, r5
 8001b42:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b46:	657b      	str	r3, [r7, #84]	; 0x54
 8001b48:	462b      	mov	r3, r5
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b4e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001b52:	461d      	mov	r5, r3
 8001b54:	4626      	mov	r6, r4
 8001b56:	186b      	adds	r3, r5, r1
 8001b58:	eb46 0402 	adc.w	r4, r6, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	4621      	mov	r1, r4
 8001b60:	460b      	mov	r3, r1
 8001b62:	025b      	lsls	r3, r3, #9
 8001b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b68:	4602      	mov	r2, r0
 8001b6a:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b70:	4603      	mov	r3, r0
 8001b72:	025b      	lsls	r3, r3, #9
 8001b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b76:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b80:	f04f 0400 	mov.w	r4, #0
 8001b84:	461a      	mov	r2, r3
 8001b86:	4623      	mov	r3, r4
 8001b88:	f7fe fb3c 	bl	8000204 <__aeabi_uldivmod>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	460c      	mov	r4, r1
 8001b90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b92:	e04d      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b94:	4b5a      	ldr	r3, [pc, #360]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	099b      	lsrs	r3, r3, #6
 8001b9a:	f04f 0400 	mov.w	r4, #0
 8001b9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	ea01 0103 	and.w	r1, r1, r3
 8001baa:	ea02 0204 	and.w	r2, r2, r4
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	0160      	lsls	r0, r4, #5
 8001bb4:	6478      	str	r0, [r7, #68]	; 0x44
 8001bb6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001bb8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001bbc:	6478      	str	r0, [r7, #68]	; 0x44
 8001bbe:	015b      	lsls	r3, r3, #5
 8001bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8001bc2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001bc6:	1a5b      	subs	r3, r3, r1
 8001bc8:	eb64 0402 	sbc.w	r4, r4, r2
 8001bcc:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8001bd0:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8001bd4:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8001bd8:	ebba 0a03 	subs.w	sl, sl, r3
 8001bdc:	eb6b 0b04 	sbc.w	fp, fp, r4
 8001be0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bee:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bf4:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001bf8:	eb1a 0a01 	adds.w	sl, sl, r1
 8001bfc:	eb4b 0b02 	adc.w	fp, fp, r2
 8001c00:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
 8001c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c08:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c0e:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
 8001c14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001c18:	4650      	mov	r0, sl
 8001c1a:	4659      	mov	r1, fp
 8001c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c1e:	f04f 0400 	mov.w	r4, #0
 8001c22:	461a      	mov	r2, r3
 8001c24:	4623      	mov	r3, r4
 8001c26:	f7fe faed 	bl	8000204 <__aeabi_uldivmod>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460c      	mov	r4, r1
 8001c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c30:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8001c40:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001c4a:	e0b4      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c4c:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c54:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d054      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	099b      	lsrs	r3, r3, #6
 8001c68:	f04f 0400 	mov.w	r4, #0
 8001c6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	ea01 0103 	and.w	r1, r1, r3
 8001c78:	ea02 0204 	and.w	r2, r2, r4
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4614      	mov	r4, r2
 8001c80:	0160      	lsls	r0, r4, #5
 8001c82:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c86:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001c8a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c8c:	015b      	lsls	r3, r3, #5
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c90:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001c94:	1a5b      	subs	r3, r3, r1
 8001c96:	eb64 0402 	sbc.w	r4, r4, r2
 8001c9a:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001c9e:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001ca2:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001ca6:	ebb8 0803 	subs.w	r8, r8, r3
 8001caa:	eb69 0904 	sbc.w	r9, r9, r4
 8001cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cc6:	eb18 0801 	adds.w	r8, r8, r1
 8001cca:	eb49 0902 	adc.w	r9, r9, r2
 8001cce:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001ce6:	4640      	mov	r0, r8
 8001ce8:	4649      	mov	r1, r9
 8001cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cec:	f04f 0400 	mov.w	r4, #0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4623      	mov	r3, r4
 8001cf4:	f7fe fa86 	bl	8000204 <__aeabi_uldivmod>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	460c      	mov	r4, r1
 8001cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cfe:	e04b      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x338>
 8001d00:	40023800 	.word	0x40023800
 8001d04:	00f42400 	.word	0x00f42400
 8001d08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x364>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	f04f 0400 	mov.w	r4, #0
 8001d16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	ea01 0103 	and.w	r1, r1, r3
 8001d22:	ea02 0204 	and.w	r2, r2, r4
 8001d26:	460b      	mov	r3, r1
 8001d28:	4614      	mov	r4, r2
 8001d2a:	0160      	lsls	r0, r4, #5
 8001d2c:	6178      	str	r0, [r7, #20]
 8001d2e:	6978      	ldr	r0, [r7, #20]
 8001d30:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001d34:	6178      	str	r0, [r7, #20]
 8001d36:	015b      	lsls	r3, r3, #5
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d3e:	1a5b      	subs	r3, r3, r1
 8001d40:	eb64 0402 	sbc.w	r4, r4, r2
 8001d44:	01a6      	lsls	r6, r4, #6
 8001d46:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001d4a:	019d      	lsls	r5, r3, #6
 8001d4c:	1aed      	subs	r5, r5, r3
 8001d4e:	eb66 0604 	sbc.w	r6, r6, r4
 8001d52:	00f3      	lsls	r3, r6, #3
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	00eb      	lsls	r3, r5, #3
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001d66:	186d      	adds	r5, r5, r1
 8001d68:	eb46 0602 	adc.w	r6, r6, r2
 8001d6c:	02b3      	lsls	r3, r6, #10
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	02ab      	lsls	r3, r5, #10
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001d80:	4628      	mov	r0, r5
 8001d82:	4631      	mov	r1, r6
 8001d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d86:	f04f 0400 	mov.w	r4, #0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4623      	mov	r3, r4
 8001d8e:	f7fe fa39 	bl	8000204 <__aeabi_uldivmod>
 8001d92:	4603      	mov	r3, r0
 8001d94:	460c      	mov	r4, r1
 8001d96:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x364>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	0f1b      	lsrs	r3, r3, #28
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001da4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001dae:	e002      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x368>)
 8001db2:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3784      	adds	r7, #132	; 0x84
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	00f42400 	.word	0x00f42400

08001dcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 8083 	beq.w	8001eec <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001de6:	4b95      	ldr	r3, [pc, #596]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d019      	beq.n	8001e26 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001df2:	4b92      	ldr	r3, [pc, #584]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d106      	bne.n	8001e0c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dfe:	4b8f      	ldr	r3, [pc, #572]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e0a:	d00c      	beq.n	8001e26 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0c:	4b8b      	ldr	r3, [pc, #556]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e14:	2b0c      	cmp	r3, #12
 8001e16:	d112      	bne.n	8001e3e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e18:	4b88      	ldr	r3, [pc, #544]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e24:	d10b      	bne.n	8001e3e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e26:	4b85      	ldr	r3, [pc, #532]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d05b      	beq.n	8001eea <HAL_RCC_OscConfig+0x11e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d157      	bne.n	8001eea <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1fc      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x8a>
 8001e48:	4a7c      	ldr	r2, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e4a:	4b7c      	ldr	r3, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e01d      	b.n	8001e92 <HAL_RCC_OscConfig+0xc6>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_OscConfig+0xae>
 8001e60:	4a76      	ldr	r2, [pc, #472]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e62:	4b76      	ldr	r3, [pc, #472]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4a73      	ldr	r2, [pc, #460]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e6e:	4b73      	ldr	r3, [pc, #460]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e00b      	b.n	8001e92 <HAL_RCC_OscConfig+0xc6>
 8001e7a:	4a70      	ldr	r2, [pc, #448]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e7c:	4b6f      	ldr	r3, [pc, #444]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4a6d      	ldr	r2, [pc, #436]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e88:	4b6c      	ldr	r3, [pc, #432]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d013      	beq.n	8001ec2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7fe fb87 	bl	80005ac <HAL_GetTick>
 8001e9e:	60f8      	str	r0, [r7, #12]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea2:	f7fe fb83 	bl	80005ac <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b64      	cmp	r3, #100	; 0x64
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e1c1      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb4:	4b61      	ldr	r3, [pc, #388]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0xd6>
 8001ec0:	e014      	b.n	8001eec <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7fe fb73 	bl	80005ac <HAL_GetTick>
 8001ec6:	60f8      	str	r0, [r7, #12]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eca:	f7fe fb6f 	bl	80005ac <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b64      	cmp	r3, #100	; 0x64
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e1ad      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001edc:	4b57      	ldr	r3, [pc, #348]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0xfe>
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d06f      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ef8:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d017      	beq.n	8001f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f04:	4b4d      	ldr	r3, [pc, #308]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d105      	bne.n	8001f1c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f10:	4b4a      	ldr	r3, [pc, #296]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00b      	beq.n	8001f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1c:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	d11c      	bne.n	8001f62 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f28:	4b44      	ldr	r3, [pc, #272]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d116      	bne.n	8001f62 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f34:	4b41      	ldr	r3, [pc, #260]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_OscConfig+0x180>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e175      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	493b      	ldr	r1, [pc, #236]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f60:	e03a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d020      	beq.n	8001fac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6a:	4b35      	ldr	r3, [pc, #212]	; (8002040 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7fe fb1c 	bl	80005ac <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f78:	f7fe fb18 	bl	80005ac <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e156      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4929      	ldr	r1, [pc, #164]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
 8001faa:	e015      	b.n	8001fd8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_RCC_OscConfig+0x274>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7fe fafb 	bl	80005ac <HAL_GetTick>
 8001fb6:	60f8      	str	r0, [r7, #12]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fba:	f7fe faf7 	bl	80005ac <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e135      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d037      	beq.n	8002054 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d016      	beq.n	800201a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_RCC_OscConfig+0x278>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff2:	f7fe fadb 	bl	80005ac <HAL_GetTick>
 8001ff6:	60f8      	str	r0, [r7, #12]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7fe fad7 	bl	80005ac <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e115      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_OscConfig+0x270>)
 800200e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x22e>
 8002018:	e01c      	b.n	8002054 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_RCC_OscConfig+0x278>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7fe fac4 	bl	80005ac <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002026:	e00f      	b.n	8002048 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002028:	f7fe fac0 	bl	80005ac <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d908      	bls.n	8002048 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e0fe      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	42470000 	.word	0x42470000
 8002044:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	4b7d      	ldr	r3, [pc, #500]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 800204a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1e9      	bne.n	8002028 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d07d      	beq.n	800215c <HAL_RCC_OscConfig+0x390>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	4a76      	ldr	r2, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206e:	6413      	str	r3, [r2, #64]	; 0x40
 8002070:	4b73      	ldr	r3, [pc, #460]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800207c:	4a71      	ldr	r2, [pc, #452]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 800207e:	4b71      	ldr	r3, [pc, #452]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002086:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002088:	f7fe fa90 	bl	80005ac <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x2d6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002090:	f7fe fa8c 	bl	80005ac <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x2d6>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0ca      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020a2:	4b68      	ldr	r3, [pc, #416]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x2c4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2f8>
 80020b6:	4a62      	ldr	r2, [pc, #392]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 80020b8:	4b61      	ldr	r3, [pc, #388]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6713      	str	r3, [r2, #112]	; 0x70
 80020c2:	e01c      	b.n	80020fe <HAL_RCC_OscConfig+0x332>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d10c      	bne.n	80020e6 <HAL_RCC_OscConfig+0x31a>
 80020cc:	4a5c      	ldr	r2, [pc, #368]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 80020ce:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	6713      	str	r3, [r2, #112]	; 0x70
 80020d8:	4a59      	ldr	r2, [pc, #356]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 80020da:	4b59      	ldr	r3, [pc, #356]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	; 0x70
 80020e4:	e00b      	b.n	80020fe <HAL_RCC_OscConfig+0x332>
 80020e6:	4a56      	ldr	r2, [pc, #344]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 80020e8:	4b55      	ldr	r3, [pc, #340]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	6713      	str	r3, [r2, #112]	; 0x70
 80020f2:	4a53      	ldr	r2, [pc, #332]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 80020f4:	4b52      	ldr	r3, [pc, #328]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	f023 0304 	bic.w	r3, r3, #4
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d015      	beq.n	8002132 <HAL_RCC_OscConfig+0x366>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7fe fa51 	bl	80005ac <HAL_GetTick>
 800210a:	60f8      	str	r0, [r7, #12]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x358>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7fe fa4d 	bl	80005ac <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x358>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e089      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002124:	4b46      	ldr	r3, [pc, #280]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ee      	beq.n	800210e <HAL_RCC_OscConfig+0x342>
 8002130:	e014      	b.n	800215c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7fe fa3b 	bl	80005ac <HAL_GetTick>
 8002136:	60f8      	str	r0, [r7, #12]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x384>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fa37 	bl	80005ac <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x384>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e073      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002150:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ee      	bne.n	800213a <HAL_RCC_OscConfig+0x36e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d068      	beq.n	8002236 <HAL_RCC_OscConfig+0x46a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002164:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d060      	beq.n	8002232 <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d145      	bne.n	8002204 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b33      	ldr	r3, [pc, #204]	; (8002248 <HAL_RCC_OscConfig+0x47c>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7fe fa15 	bl	80005ac <HAL_GetTick>
 8002182:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002186:	f7fe fa11 	bl	80005ac <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e04f      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a4:	4926      	ldr	r1, [pc, #152]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	019b      	lsls	r3, r3, #6
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	085b      	lsrs	r3, r3, #1
 80021be:	3b01      	subs	r3, #1
 80021c0:	041b      	lsls	r3, r3, #16
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	071b      	lsls	r3, r3, #28
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d6:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <HAL_RCC_OscConfig+0x47c>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe f9e6 	bl	80005ac <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe f9e2 	bl	80005ac <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e020      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x418>
 8002202:	e018      	b.n	8002236 <HAL_RCC_OscConfig+0x46a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b10      	ldr	r3, [pc, #64]	; (8002248 <HAL_RCC_OscConfig+0x47c>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7fe f9cf 	bl	80005ac <HAL_GetTick>
 800220e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe f9cb 	bl	80005ac <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e009      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x446>
 8002230:	e001      	b.n	8002236 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_RCC_OscConfig+0x46c>
    }
  }
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	40007000 	.word	0x40007000
 8002248:	42470060 	.word	0x42470060

0800224c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e055      	b.n	800230a <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d106      	bne.n	800227e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 ff1f 	bl	80030bc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002294:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6851      	ldr	r1, [r2, #4]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6892      	ldr	r2, [r2, #8]
 80022a2:	4311      	orrs	r1, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68d2      	ldr	r2, [r2, #12]
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6912      	ldr	r2, [r2, #16]
 80022ae:	4311      	orrs	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6952      	ldr	r2, [r2, #20]
 80022b4:	4311      	orrs	r1, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6992      	ldr	r2, [r2, #24]
 80022ba:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80022be:	4311      	orrs	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	69d2      	ldr	r2, [r2, #28]
 80022c4:	4311      	orrs	r1, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6a12      	ldr	r2, [r2, #32]
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6992      	ldr	r2, [r2, #24]
 80022dc:	0c12      	lsrs	r2, r2, #16
 80022de:	f002 0104 	and.w	r1, r2, #4
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	69d2      	ldr	r2, [r2, #28]
 80022f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f8:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_TIM_OC_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e01d      	b.n	8002360 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <HAL_TIM_OC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f001 f80f 	bl	800335c <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2202      	movs	r2, #2
 8002342:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3304      	adds	r3, #4
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f000 f869 	bl	8002428 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_TIM_OC_ConfigChannel+0x1a>
 800237e:	2302      	movs	r3, #2
 8002380:	e04e      	b.n	8002420 <HAL_TIM_OC_ConfigChannel+0xb8>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  switch (Channel)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	d839      	bhi.n	800240c <HAL_TIM_OC_ConfigChannel+0xa4>
 8002398:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <HAL_TIM_OC_ConfigChannel+0x38>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080023d5 	.word	0x080023d5
 80023a4:	0800240d 	.word	0x0800240d
 80023a8:	0800240d 	.word	0x0800240d
 80023ac:	0800240d 	.word	0x0800240d
 80023b0:	080023e3 	.word	0x080023e3
 80023b4:	0800240d 	.word	0x0800240d
 80023b8:	0800240d 	.word	0x0800240d
 80023bc:	0800240d 	.word	0x0800240d
 80023c0:	080023f1 	.word	0x080023f1
 80023c4:	0800240d 	.word	0x0800240d
 80023c8:	0800240d 	.word	0x0800240d
 80023cc:	0800240d 	.word	0x0800240d
 80023d0:	080023ff 	.word	0x080023ff
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f946 	bl	800266c <TIM_OC1_SetConfig>
    }
    break;
 80023e0:	e015      	b.n	800240e <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f8c7 	bl	800257c <TIM_OC2_SetConfig>
    }
    break;
 80023ee:	e00e      	b.n	800240e <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f9ac 	bl	8002754 <TIM_OC3_SetConfig>
    }
    break;
 80023fc:	e007      	b.n	800240e <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fa1d 	bl	8002844 <TIM_OC4_SetConfig>
    }
    break;
 800240a:	e000      	b.n	800240e <HAL_TIM_OC_ConfigChannel+0xa6>
    
    default:
    break;    
 800240c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim); 
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a44      	ldr	r2, [pc, #272]	; (8002550 <TIM_Base_SetConfig+0x128>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <TIM_Base_SetConfig+0x44>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244a:	d00f      	beq.n	800246c <TIM_Base_SetConfig+0x44>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a41      	ldr	r2, [pc, #260]	; (8002554 <TIM_Base_SetConfig+0x12c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00b      	beq.n	800246c <TIM_Base_SetConfig+0x44>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a40      	ldr	r2, [pc, #256]	; (8002558 <TIM_Base_SetConfig+0x130>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d007      	beq.n	800246c <TIM_Base_SetConfig+0x44>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a3f      	ldr	r2, [pc, #252]	; (800255c <TIM_Base_SetConfig+0x134>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d003      	beq.n	800246c <TIM_Base_SetConfig+0x44>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a3e      	ldr	r2, [pc, #248]	; (8002560 <TIM_Base_SetConfig+0x138>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <TIM_Base_SetConfig+0x48>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <TIM_Base_SetConfig+0x4a>
 8002470:	2300      	movs	r3, #0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a31      	ldr	r2, [pc, #196]	; (8002550 <TIM_Base_SetConfig+0x128>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d02b      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002496:	d027      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a2e      	ldr	r2, [pc, #184]	; (8002554 <TIM_Base_SetConfig+0x12c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d023      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a2d      	ldr	r2, [pc, #180]	; (8002558 <TIM_Base_SetConfig+0x130>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d01f      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a2c      	ldr	r2, [pc, #176]	; (800255c <TIM_Base_SetConfig+0x134>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d01b      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a2b      	ldr	r2, [pc, #172]	; (8002560 <TIM_Base_SetConfig+0x138>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d017      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a2a      	ldr	r2, [pc, #168]	; (8002564 <TIM_Base_SetConfig+0x13c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d013      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a29      	ldr	r2, [pc, #164]	; (8002568 <TIM_Base_SetConfig+0x140>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00f      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a28      	ldr	r2, [pc, #160]	; (800256c <TIM_Base_SetConfig+0x144>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00b      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a27      	ldr	r2, [pc, #156]	; (8002570 <TIM_Base_SetConfig+0x148>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a26      	ldr	r2, [pc, #152]	; (8002574 <TIM_Base_SetConfig+0x14c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a25      	ldr	r2, [pc, #148]	; (8002578 <TIM_Base_SetConfig+0x150>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d101      	bne.n	80024ec <TIM_Base_SetConfig+0xc4>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <TIM_Base_SetConfig+0xc6>
 80024ec:	2300      	movs	r3, #0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <TIM_Base_SetConfig+0x128>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d003      	beq.n	800252a <TIM_Base_SetConfig+0x102>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <TIM_Base_SetConfig+0x138>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d101      	bne.n	800252e <TIM_Base_SetConfig+0x106>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <TIM_Base_SetConfig+0x108>
 800252e:	2300      	movs	r3, #0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	615a      	str	r2, [r3, #20]
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40010000 	.word	0x40010000
 8002554:	40000400 	.word	0x40000400
 8002558:	40000800 	.word	0x40000800
 800255c:	40000c00 	.word	0x40000c00
 8002560:	40010400 	.word	0x40010400
 8002564:	40014000 	.word	0x40014000
 8002568:	40014400 	.word	0x40014400
 800256c:	40014800 	.word	0x40014800
 8002570:	40001800 	.word	0x40001800
 8002574:	40001c00 	.word	0x40001c00
 8002578:	40002000 	.word	0x40002000

0800257c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	f023 0210 	bic.w	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025be:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f023 0320 	bic.w	r3, r3, #32
 80025d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a20      	ldr	r2, [pc, #128]	; (8002664 <TIM_OC2_SetConfig+0xe8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d003      	beq.n	80025f0 <TIM_OC2_SetConfig+0x74>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <TIM_OC2_SetConfig+0xec>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <TIM_OC2_SetConfig+0x78>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <TIM_OC2_SetConfig+0x7a>
 80025f4:	2300      	movs	r3, #0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d021      	beq.n	800263e <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002614:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800261c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	621a      	str	r2, [r3, #32]
}
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40010000 	.word	0x40010000
 8002668:	40010400 	.word	0x40010400

0800266c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	f023 0201 	bic.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0303 	bic.w	r3, r3, #3
 80026ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f023 0302 	bic.w	r3, r3, #2
 80026c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a1f      	ldr	r2, [pc, #124]	; (800274c <TIM_OC1_SetConfig+0xe0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d003      	beq.n	80026dc <TIM_OC1_SetConfig+0x70>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a1e      	ldr	r2, [pc, #120]	; (8002750 <TIM_OC1_SetConfig+0xe4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d101      	bne.n	80026e0 <TIM_OC1_SetConfig+0x74>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <TIM_OC1_SetConfig+0x76>
 80026e0:	2300      	movs	r3, #0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01e      	beq.n	8002724 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f023 0308 	bic.w	r3, r3, #8
 80026ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0304 	bic.w	r3, r3, #4
 80026fe:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800270e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	621a      	str	r2, [r3, #32]
} 
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40010000 	.word	0x40010000
 8002750:	40010400 	.word	0x40010400

08002754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a20      	ldr	r2, [pc, #128]	; (800283c <TIM_OC3_SetConfig+0xe8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d003      	beq.n	80027c6 <TIM_OC3_SetConfig+0x72>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a1f      	ldr	r2, [pc, #124]	; (8002840 <TIM_OC3_SetConfig+0xec>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <TIM_OC3_SetConfig+0x76>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <TIM_OC3_SetConfig+0x78>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d021      	beq.n	8002814 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027ea:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40010000 	.word	0x40010000
 8002840:	40010400 	.word	0x40010400

08002844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800287e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002886:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800289a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	031b      	lsls	r3, r3, #12
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a14      	ldr	r2, [pc, #80]	; (80028fc <TIM_OC4_SetConfig+0xb8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <TIM_OC4_SetConfig+0x74>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a13      	ldr	r2, [pc, #76]	; (8002900 <TIM_OC4_SetConfig+0xbc>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <TIM_OC4_SetConfig+0x78>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <TIM_OC4_SetConfig+0x7a>
 80028bc:	2300      	movs	r3, #0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	019b      	lsls	r3, r3, #6
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	621a      	str	r2, [r3, #32]
}
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40010000 	.word	0x40010000
 8002900:	40010400 	.word	0x40010400

08002904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002918:	2302      	movs	r3, #2
 800291a:	e032      	b.n	8002982 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	6852      	ldr	r2, [r2, #4]
 8002936:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800293a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	6851      	ldr	r1, [r2, #4]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	6892      	ldr	r2, [r2, #8]
 8002958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800295c:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	6891      	ldr	r1, [r2, #8]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	6852      	ldr	r2, [r2, #4]
 800296c:	430a      	orrs	r2, r1
 800296e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
} 
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e044      	b.n	8002a34 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8002a46:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a48:	4a34      	ldr	r2, [pc, #208]	; (8002b1c <MX_ADC1_Init+0xdc>)
 8002a4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a54:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002a5a:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a60:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8002a66:	4b2c      	ldr	r3, [pc, #176]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	621a      	str	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 3;
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a6e:	2203      	movs	r2, #3
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a72:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a7a:	4a29      	ldr	r2, [pc, #164]	; (8002b20 <MX_ADC1_Init+0xe0>)
 8002a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a86:	2203      	movs	r2, #3
 8002a88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a8a:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a90:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a96:	4820      	ldr	r0, [pc, #128]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002a98:	f7fd fdb1 	bl	80005fe <HAL_ADC_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <MX_ADC1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002aa2:	2149      	movs	r1, #73	; 0x49
 8002aa4:	481f      	ldr	r0, [pc, #124]	; (8002b24 <MX_ADC1_Init+0xe4>)
 8002aa6:	f000 fac9 	bl	800303c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ab6:	463b      	mov	r3, r7
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4817      	ldr	r0, [pc, #92]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002abc:	f7fd ff4a 	bl	8000954 <HAL_ADC_ConfigChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <MX_ADC1_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ac6:	2153      	movs	r1, #83	; 0x53
 8002ac8:	4816      	ldr	r0, [pc, #88]	; (8002b24 <MX_ADC1_Init+0xe4>)
 8002aca:	f000 fab7 	bl	800303c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ad6:	463b      	mov	r3, r7
 8002ad8:	4619      	mov	r1, r3
 8002ada:	480f      	ldr	r0, [pc, #60]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002adc:	f7fd ff3a 	bl	8000954 <HAL_ADC_ConfigChannel>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <MX_ADC1_Init+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ae6:	215c      	movs	r1, #92	; 0x5c
 8002ae8:	480e      	ldr	r0, [pc, #56]	; (8002b24 <MX_ADC1_Init+0xe4>)
 8002aea:	f000 faa7 	bl	800303c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8002aee:	230a      	movs	r3, #10
 8002af0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002af2:	2303      	movs	r3, #3
 8002af4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002af6:	463b      	mov	r3, r7
 8002af8:	4619      	mov	r1, r3
 8002afa:	4807      	ldr	r0, [pc, #28]	; (8002b18 <MX_ADC1_Init+0xd8>)
 8002afc:	f7fd ff2a 	bl	8000954 <HAL_ADC_ConfigChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <MX_ADC1_Init+0xce>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b06:	2165      	movs	r1, #101	; 0x65
 8002b08:	4806      	ldr	r0, [pc, #24]	; (8002b24 <MX_ADC1_Init+0xe4>)
 8002b0a:	f000 fa97 	bl	800303c <_Error_Handler>
  }

}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000024 	.word	0x20000024
 8002b1c:	40012000 	.word	0x40012000
 8002b20:	0f000001 	.word	0x0f000001
 8002b24:	08003498 	.word	0x08003498

08002b28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a16      	ldr	r2, [pc, #88]	; (8002b90 <HAL_ADC_MspInit+0x68>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d125      	bne.n	8002b86 <HAL_ADC_MspInit+0x5e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <HAL_ADC_MspInit+0x6c>)
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <HAL_ADC_MspInit+0x6c>)
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <HAL_ADC_MspInit+0x6c>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b56:	2301      	movs	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	4619      	mov	r1, r3
 8002b68:	480b      	ldr	r0, [pc, #44]	; (8002b98 <HAL_ADC_MspInit+0x70>)
 8002b6a:	f7fe fbb5 	bl	80012d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8002b6e:	2305      	movs	r3, #5
 8002b70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b72:	2303      	movs	r3, #3
 8002b74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7a:	f107 030c 	add.w	r3, r7, #12
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4806      	ldr	r0, [pc, #24]	; (8002b9c <HAL_ADC_MspInit+0x74>)
 8002b82:	f7fe fba9 	bl	80012d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002b86:	bf00      	nop
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40012000 	.word	0x40012000
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020000 	.word	0x40020000

08002ba0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002ba6:	4a19      	ldr	r2, [pc, #100]	; (8002c0c <MX_CAN1_Init+0x6c>)
 8002ba8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002bac:	2215      	movs	r2, #21
 8002bae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SJW = CAN_SJW_1TQ;
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	60da      	str	r2, [r3, #12]
  hcan1.Init.BS1 = CAN_BS1_2TQ;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002bbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bc2:	611a      	str	r2, [r3, #16]
  hcan1.Init.BS2 = CAN_BS2_2TQ;
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002bc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TTCM = DISABLE;
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	619a      	str	r2, [r3, #24]
  hcan1.Init.ABOM = DISABLE;
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	61da      	str	r2, [r3, #28]
  hcan1.Init.AWUM = DISABLE;
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	621a      	str	r2, [r3, #32]
  hcan1.Init.NART = DISABLE;
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002bf0:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_CAN1_Init+0x68>)
 8002bf2:	f7fe f8d1 	bl	8000d98 <HAL_CAN_Init>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <MX_CAN1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002bfc:	2145      	movs	r1, #69	; 0x45
 8002bfe:	4804      	ldr	r0, [pc, #16]	; (8002c10 <MX_CAN1_Init+0x70>)
 8002c00:	f000 fa1c 	bl	800303c <_Error_Handler>
  }

}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	2000006c 	.word	0x2000006c
 8002c0c:	40006400 	.word	0x40006400
 8002c10:	080034a8 	.word	0x080034a8

08002c14 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <HAL_CAN_MspInit+0x58>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d11e      	bne.n	8002c64 <HAL_CAN_MspInit+0x50>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <HAL_CAN_MspInit+0x5c>)
 8002c2c:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_CAN_MspInit+0x5c>)
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_CAN_MspInit+0x5c>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
  
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c50:	2303      	movs	r3, #3
 8002c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002c54:	2309      	movs	r3, #9
 8002c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4805      	ldr	r0, [pc, #20]	; (8002c74 <HAL_CAN_MspInit+0x60>)
 8002c60:	f7fe fb3a 	bl	80012d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002c64:	bf00      	nop
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40006400 	.word	0x40006400
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40020000 	.word	0x40020000

08002c78 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <MX_DAC_Init+0x64>)
 8002c80:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <MX_DAC_Init+0x68>)
 8002c82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002c84:	4815      	ldr	r0, [pc, #84]	; (8002cdc <MX_DAC_Init+0x64>)
 8002c86:	f7fe fab8 	bl	80011fa <HAL_DAC_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <MX_DAC_Init+0x20>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c90:	213d      	movs	r1, #61	; 0x3d
 8002c92:	4814      	ldr	r0, [pc, #80]	; (8002ce4 <MX_DAC_Init+0x6c>)
 8002c94:	f000 f9d2 	bl	800303c <_Error_Handler>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	480d      	ldr	r0, [pc, #52]	; (8002cdc <MX_DAC_Init+0x64>)
 8002ca8:	f7fe fac9 	bl	800123e <HAL_DAC_ConfigChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <MX_DAC_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002cb2:	2146      	movs	r1, #70	; 0x46
 8002cb4:	480b      	ldr	r0, [pc, #44]	; (8002ce4 <MX_DAC_Init+0x6c>)
 8002cb6:	f000 f9c1 	bl	800303c <_Error_Handler>
  }

    /**DAC channel OUT2 config 
    */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002cba:	463b      	mov	r3, r7
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4806      	ldr	r0, [pc, #24]	; (8002cdc <MX_DAC_Init+0x64>)
 8002cc2:	f7fe fabc 	bl	800123e <HAL_DAC_ConfigChannel>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <MX_DAC_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ccc:	214d      	movs	r1, #77	; 0x4d
 8002cce:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <MX_DAC_Init+0x6c>)
 8002cd0:	f000 f9b4 	bl	800303c <_Error_Handler>
  }

}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	200000b0 	.word	0x200000b0
 8002ce0:	40007400 	.word	0x40007400
 8002ce4:	080034b8 	.word	0x080034b8

08002ce8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(dacHandle->Instance==DAC)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <HAL_DAC_MspInit+0x50>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d119      	bne.n	8002d2e <HAL_DAC_MspInit+0x46>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	4a0f      	ldr	r2, [pc, #60]	; (8002d3c <HAL_DAC_MspInit+0x54>)
 8002d00:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <HAL_DAC_MspInit+0x54>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_DAC_MspInit+0x54>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d16:	2330      	movs	r3, #48	; 0x30
 8002d18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d22:	f107 030c 	add.w	r3, r7, #12
 8002d26:	4619      	mov	r1, r3
 8002d28:	4805      	ldr	r0, [pc, #20]	; (8002d40 <HAL_DAC_MspInit+0x58>)
 8002d2a:	f7fe fad5 	bl	80012d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8002d2e:	bf00      	nop
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40007400 	.word	0x40007400
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020000 	.word	0x40020000

08002d44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	4a25      	ldr	r2, [pc, #148]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002d50:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4a10      	ldr	r2, [pc, #64]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f043 0310 	orr.w	r3, r3, #16
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <MX_GPIO_Init+0xa0>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]

}
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800

08002de8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002dec:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <MX_I2C1_Init+0x54>)
 8002dee:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <MX_I2C1_Init+0x58>)
 8002df0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002df2:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <MX_I2C1_Init+0x54>)
 8002df4:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <MX_I2C1_Init+0x5c>)
 8002df6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002df8:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <MX_I2C1_Init+0x54>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <MX_I2C1_Init+0x54>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e04:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <MX_I2C1_Init+0x54>)
 8002e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <MX_I2C1_Init+0x54>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <MX_I2C1_Init+0x54>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <MX_I2C1_Init+0x54>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <MX_I2C1_Init+0x54>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e24:	4805      	ldr	r0, [pc, #20]	; (8002e3c <MX_I2C1_Init+0x54>)
 8002e26:	f7fe fbe9 	bl	80015fc <HAL_I2C_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e30:	2142      	movs	r1, #66	; 0x42
 8002e32:	4805      	ldr	r0, [pc, #20]	; (8002e48 <MX_I2C1_Init+0x60>)
 8002e34:	f000 f902 	bl	800303c <_Error_Handler>
  }

}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	200000c4 	.word	0x200000c4
 8002e40:	40005400 	.word	0x40005400
 8002e44:	000186a0 	.word	0x000186a0
 8002e48:	080034c8 	.word	0x080034c8

08002e4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a12      	ldr	r2, [pc, #72]	; (8002ea4 <HAL_I2C_MspInit+0x58>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d11d      	bne.n	8002e9a <HAL_I2C_MspInit+0x4e>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e5e:	23c0      	movs	r3, #192	; 0xc0
 8002e60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e62:	2312      	movs	r3, #18
 8002e64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e66:	2301      	movs	r3, #1
 8002e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e6e:	2304      	movs	r3, #4
 8002e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e72:	f107 030c 	add.w	r3, r7, #12
 8002e76:	4619      	mov	r1, r3
 8002e78:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <HAL_I2C_MspInit+0x5c>)
 8002e7a:	f7fe fa2d 	bl	80012d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_I2C_MspInit+0x60>)
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_I2C_MspInit+0x60>)
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <HAL_I2C_MspInit+0x60>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40005400 	.word	0x40005400
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	40023800 	.word	0x40023800

08002eb0 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eb6:	f7fd fb2d 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eba:	f000 f83f 	bl	8002f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ebe:	f7ff ff41 	bl	8002d44 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002ec2:	f7ff fdbd 	bl	8002a40 <MX_ADC1_Init>
  MX_CAN1_Init();
 8002ec6:	f7ff fe6b 	bl	8002ba0 <MX_CAN1_Init>
  MX_DAC_Init();
 8002eca:	f7ff fed5 	bl	8002c78 <MX_DAC_Init>
  MX_I2C1_Init();
 8002ece:	f7ff ff8b 	bl	8002de8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002ed2:	f000 f8b9 	bl	8003048 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002ed6:	f000 f9cd 	bl	8003274 <MX_TIM1_Init>


  while (1)
  {

	HAL_ADC_Start(&hadc1);
 8002eda:	4817      	ldr	r0, [pc, #92]	; (8002f38 <main+0x88>)
 8002edc:	f7fd fbd2 	bl	8000684 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	4814      	ldr	r0, [pc, #80]	; (8002f38 <main+0x88>)
 8002ee6:	f7fd fca6 	bl	8000836 <HAL_ADC_PollForConversion>
	int CONV_1_MON = HAL_ADC_GetValue(&hadc1);
 8002eea:	4813      	ldr	r0, [pc, #76]	; (8002f38 <main+0x88>)
 8002eec:	f7fd fd25 	bl	800093a <HAL_ADC_GetValue>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Start(&hadc1);
 8002ef4:	4810      	ldr	r0, [pc, #64]	; (8002f38 <main+0x88>)
 8002ef6:	f7fd fbc5 	bl	8000684 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002efa:	f04f 31ff 	mov.w	r1, #4294967295
 8002efe:	480e      	ldr	r0, [pc, #56]	; (8002f38 <main+0x88>)
 8002f00:	f7fd fc99 	bl	8000836 <HAL_ADC_PollForConversion>
	int CONV_2_MON = HAL_ADC_GetValue(&hadc1);
 8002f04:	480c      	ldr	r0, [pc, #48]	; (8002f38 <main+0x88>)
 8002f06:	f7fd fd18 	bl	800093a <HAL_ADC_GetValue>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	60bb      	str	r3, [r7, #8]
	HAL_ADC_Start(&hadc1);
 8002f0e:	480a      	ldr	r0, [pc, #40]	; (8002f38 <main+0x88>)
 8002f10:	f7fd fbb8 	bl	8000684 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295
 8002f18:	4807      	ldr	r0, [pc, #28]	; (8002f38 <main+0x88>)
 8002f1a:	f7fd fc8c 	bl	8000836 <HAL_ADC_PollForConversion>
	int CONV_3_MON = HAL_ADC_GetValue(&hadc1);
 8002f1e:	4806      	ldr	r0, [pc, #24]	; (8002f38 <main+0x88>)
 8002f20:	f7fd fd0b 	bl	800093a <HAL_ADC_GetValue>
 8002f24:	4603      	mov	r3, r0
 8002f26:	607b      	str	r3, [r7, #4]

	HAL_ADC_Stop(&hadc1);
 8002f28:	4803      	ldr	r0, [pc, #12]	; (8002f38 <main+0x88>)
 8002f2a:	f7fd fc51 	bl	80007d0 <HAL_ADC_Stop>

	HAL_Delay(10);
 8002f2e:	200a      	movs	r0, #10
 8002f30:	f7fd fb48 	bl	80005c4 <HAL_Delay>
  {
 8002f34:	e7d1      	b.n	8002eda <main+0x2a>
 8002f36:	bf00      	nop
 8002f38:	20000024 	.word	0x20000024

08002f3c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b094      	sub	sp, #80	; 0x50
 8002f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	4a39      	ldr	r2, [pc, #228]	; (800302c <SystemClock_Config+0xf0>)
 8002f48:	4b38      	ldr	r3, [pc, #224]	; (800302c <SystemClock_Config+0xf0>)
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b36      	ldr	r3, [pc, #216]	; (800302c <SystemClock_Config+0xf0>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4a33      	ldr	r2, [pc, #204]	; (8003030 <SystemClock_Config+0xf4>)
 8002f64:	4b32      	ldr	r3, [pc, #200]	; (8003030 <SystemClock_Config+0xf4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b30      	ldr	r3, [pc, #192]	; (8003030 <SystemClock_Config+0xf4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f84:	2302      	movs	r3, #2
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002f92:	23b4      	movs	r3, #180	; 0xb4
 8002f94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f96:	2302      	movs	r3, #2
 8002f98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fa2:	f107 031c 	add.w	r3, r7, #28
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe ff10 	bl	8001dcc <HAL_RCC_OscConfig>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002fb2:	21a7      	movs	r1, #167	; 0xa7
 8002fb4:	481f      	ldr	r0, [pc, #124]	; (8003034 <SystemClock_Config+0xf8>)
 8002fb6:	f000 f841 	bl	800303c <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002fba:	f7fe fbff 	bl	80017bc <HAL_PWREx_EnableOverDrive>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <SystemClock_Config+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002fc4:	21ae      	movs	r1, #174	; 0xae
 8002fc6:	481b      	ldr	r0, [pc, #108]	; (8003034 <SystemClock_Config+0xf8>)
 8002fc8:	f000 f838 	bl	800303c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fcc:	230f      	movs	r3, #15
 8002fce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	2105      	movs	r1, #5
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fc36 	bl	800185c <HAL_RCC_ClockConfig>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <SystemClock_Config+0xc2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ff6:	21bc      	movs	r1, #188	; 0xbc
 8002ff8:	480e      	ldr	r0, [pc, #56]	; (8003034 <SystemClock_Config+0xf8>)
 8002ffa:	f000 f81f 	bl	800303c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ffe:	f7fe fd0f 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8003002:	4602      	mov	r2, r0
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <SystemClock_Config+0xfc>)
 8003006:	fba3 2302 	umull	r2, r3, r3, r2
 800300a:	099b      	lsrs	r3, r3, #6
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe f8be 	bl	800118e <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003012:	2004      	movs	r0, #4
 8003014:	f7fe f8c8 	bl	80011a8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003018:	2200      	movs	r2, #0
 800301a:	2100      	movs	r1, #0
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	f7fe f899 	bl	8001156 <HAL_NVIC_SetPriority>
}
 8003024:	bf00      	nop
 8003026:	3750      	adds	r7, #80	; 0x50
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40023800 	.word	0x40023800
 8003030:	40007000 	.word	0x40007000
 8003034:	080034d8 	.word	0x080034d8
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8003046:	e7fe      	b.n	8003046 <_Error_Handler+0xa>

08003048 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800304c:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <MX_SPI1_Init+0x68>)
 800304e:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <MX_SPI1_Init+0x6c>)
 8003050:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003052:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <MX_SPI1_Init+0x68>)
 8003054:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003058:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <MX_SPI1_Init+0x68>)
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <MX_SPI1_Init+0x68>)
 8003062:	2200      	movs	r2, #0
 8003064:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <MX_SPI1_Init+0x68>)
 8003068:	2200      	movs	r2, #0
 800306a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800306c:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <MX_SPI1_Init+0x68>)
 800306e:	2200      	movs	r2, #0
 8003070:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <MX_SPI1_Init+0x68>)
 8003074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003078:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800307a:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <MX_SPI1_Init+0x68>)
 800307c:	2200      	movs	r2, #0
 800307e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <MX_SPI1_Init+0x68>)
 8003082:	2200      	movs	r2, #0
 8003084:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <MX_SPI1_Init+0x68>)
 8003088:	2200      	movs	r2, #0
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <MX_SPI1_Init+0x68>)
 800308e:	2200      	movs	r2, #0
 8003090:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <MX_SPI1_Init+0x68>)
 8003094:	220a      	movs	r2, #10
 8003096:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003098:	4805      	ldr	r0, [pc, #20]	; (80030b0 <MX_SPI1_Init+0x68>)
 800309a:	f7ff f8d7 	bl	800224c <HAL_SPI_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <MX_SPI1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030a4:	2145      	movs	r1, #69	; 0x45
 80030a6:	4804      	ldr	r0, [pc, #16]	; (80030b8 <MX_SPI1_Init+0x70>)
 80030a8:	f7ff ffc8 	bl	800303c <_Error_Handler>
  }

}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000118 	.word	0x20000118
 80030b4:	40013000 	.word	0x40013000
 80030b8:	080034e8 	.word	0x080034e8

080030bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1a      	ldr	r2, [pc, #104]	; (8003134 <HAL_SPI_MspInit+0x78>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d12d      	bne.n	800312a <HAL_SPI_MspInit+0x6e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	4a19      	ldr	r2, [pc, #100]	; (8003138 <HAL_SPI_MspInit+0x7c>)
 80030d4:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_SPI_MspInit+0x7c>)
 80030d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HAL_SPI_MspInit+0x7c>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030ea:	23c0      	movs	r3, #192	; 0xc0
 80030ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030fa:	2305      	movs	r3, #5
 80030fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fe:	f107 030c 	add.w	r3, r7, #12
 8003102:	4619      	mov	r1, r3
 8003104:	480d      	ldr	r0, [pc, #52]	; (800313c <HAL_SPI_MspInit+0x80>)
 8003106:	f7fe f8e7 	bl	80012d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800310a:	2308      	movs	r3, #8
 800310c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003116:	2303      	movs	r3, #3
 8003118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800311a:	2305      	movs	r3, #5
 800311c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800311e:	f107 030c 	add.w	r3, r7, #12
 8003122:	4619      	mov	r1, r3
 8003124:	4806      	ldr	r0, [pc, #24]	; (8003140 <HAL_SPI_MspInit+0x84>)
 8003126:	f7fe f8d7 	bl	80012d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800312a:	bf00      	nop
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40013000 	.word	0x40013000
 8003138:	40023800 	.word	0x40023800
 800313c:	40020000 	.word	0x40020000
 8003140:	40020400 	.word	0x40020400

08003144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003148:	2003      	movs	r0, #3
 800314a:	f7fd fff9 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2100      	movs	r1, #0
 8003152:	f06f 000b 	mvn.w	r0, #11
 8003156:	f7fd fffe 	bl	8001156 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	2100      	movs	r1, #0
 800315e:	f06f 000a 	mvn.w	r0, #10
 8003162:	f7fd fff8 	bl	8001156 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	f06f 0009 	mvn.w	r0, #9
 800316e:	f7fd fff2 	bl	8001156 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	f06f 0004 	mvn.w	r0, #4
 800317a:	f7fd ffec 	bl	8001156 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2100      	movs	r1, #0
 8003182:	f06f 0003 	mvn.w	r0, #3
 8003186:	f7fd ffe6 	bl	8001156 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2100      	movs	r1, #0
 800318e:	f06f 0001 	mvn.w	r0, #1
 8003192:	f7fd ffe0 	bl	8001156 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003196:	2200      	movs	r2, #0
 8003198:	2100      	movs	r1, #0
 800319a:	f04f 30ff 	mov.w	r0, #4294967295
 800319e:	f7fd ffda 	bl	8001156 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <HardFault_Handler+0x4>

080031ba <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031be:	e7fe      	b.n	80031be <MemManage_Handler+0x4>

080031c0 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c4:	e7fe      	b.n	80031c4 <BusFault_Handler+0x4>

080031c6 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ca:	e7fe      	b.n	80031ca <UsageFault_Handler+0x4>

080031cc <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fa:	f7fd f9c9 	bl	8000590 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80031fe:	f7fd ffef 	bl	80011e0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800320c:	4a16      	ldr	r2, [pc, #88]	; (8003268 <SystemInit+0x60>)
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <SystemInit+0x60>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800321c:	4a13      	ldr	r2, [pc, #76]	; (800326c <SystemInit+0x64>)
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <SystemInit+0x64>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003228:	4b10      	ldr	r3, [pc, #64]	; (800326c <SystemInit+0x64>)
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800322e:	4a0f      	ldr	r2, [pc, #60]	; (800326c <SystemInit+0x64>)
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <SystemInit+0x64>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <SystemInit+0x64>)
 8003240:	4a0b      	ldr	r2, [pc, #44]	; (8003270 <SystemInit+0x68>)
 8003242:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003244:	4a09      	ldr	r2, [pc, #36]	; (800326c <SystemInit+0x64>)
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <SystemInit+0x64>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <SystemInit+0x64>)
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <SystemInit+0x60>)
 8003258:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800325c:	609a      	str	r2, [r3, #8]
#endif
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000ed00 	.word	0xe000ed00
 800326c:	40023800 	.word	0x40023800
 8003270:	24003010 	.word	0x24003010

08003274 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b090      	sub	sp, #64	; 0x40
 8003278:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 800327a:	4b35      	ldr	r3, [pc, #212]	; (8003350 <MX_TIM1_Init+0xdc>)
 800327c:	4a35      	ldr	r2, [pc, #212]	; (8003354 <MX_TIM1_Init+0xe0>)
 800327e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003280:	4b33      	ldr	r3, [pc, #204]	; (8003350 <MX_TIM1_Init+0xdc>)
 8003282:	2200      	movs	r2, #0
 8003284:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003286:	4b32      	ldr	r3, [pc, #200]	; (8003350 <MX_TIM1_Init+0xdc>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800328c:	4b30      	ldr	r3, [pc, #192]	; (8003350 <MX_TIM1_Init+0xdc>)
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003292:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <MX_TIM1_Init+0xdc>)
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <MX_TIM1_Init+0xdc>)
 800329a:	2200      	movs	r2, #0
 800329c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800329e:	482c      	ldr	r0, [pc, #176]	; (8003350 <MX_TIM1_Init+0xdc>)
 80032a0:	f7ff f837 	bl	8002312 <HAL_TIM_OC_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <MX_TIM1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80032aa:	2140      	movs	r1, #64	; 0x40
 80032ac:	482a      	ldr	r0, [pc, #168]	; (8003358 <MX_TIM1_Init+0xe4>)
 80032ae:	f7ff fec5 	bl	800303c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b2:	2300      	movs	r3, #0
 80032b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032be:	4619      	mov	r1, r3
 80032c0:	4823      	ldr	r0, [pc, #140]	; (8003350 <MX_TIM1_Init+0xdc>)
 80032c2:	f7ff fb1f 	bl	8002904 <HAL_TIMEx_MasterConfigSynchronization>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <MX_TIM1_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 80032cc:	2147      	movs	r1, #71	; 0x47
 80032ce:	4822      	ldr	r0, [pc, #136]	; (8003358 <MX_TIM1_Init+0xe4>)
 80032d0:	f7ff feb4 	bl	800303c <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032dc:	2300      	movs	r3, #0
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032e8:	2300      	movs	r3, #0
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032ec:	2300      	movs	r3, #0
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	2200      	movs	r2, #0
 80032f6:	4619      	mov	r1, r3
 80032f8:	4815      	ldr	r0, [pc, #84]	; (8003350 <MX_TIM1_Init+0xdc>)
 80032fa:	f7ff f835 	bl	8002368 <HAL_TIM_OC_ConfigChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <MX_TIM1_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003304:	2153      	movs	r1, #83	; 0x53
 8003306:	4814      	ldr	r0, [pc, #80]	; (8003358 <MX_TIM1_Init+0xe4>)
 8003308:	f7ff fe98 	bl	800303c <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800330c:	2300      	movs	r3, #0
 800330e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003310:	2300      	movs	r3, #0
 8003312:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003324:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800332a:	463b      	mov	r3, r7
 800332c:	4619      	mov	r1, r3
 800332e:	4808      	ldr	r0, [pc, #32]	; (8003350 <MX_TIM1_Init+0xdc>)
 8003330:	f7ff fb2d 	bl	800298e <HAL_TIMEx_ConfigBreakDeadTime>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <MX_TIM1_Init+0xce>
  {
    _Error_Handler(__FILE__, __LINE__);
 800333a:	215f      	movs	r1, #95	; 0x5f
 800333c:	4806      	ldr	r0, [pc, #24]	; (8003358 <MX_TIM1_Init+0xe4>)
 800333e:	f7ff fe7d 	bl	800303c <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8003342:	4803      	ldr	r0, [pc, #12]	; (8003350 <MX_TIM1_Init+0xdc>)
 8003344:	f000 f82c 	bl	80033a0 <HAL_TIM_MspPostInit>

}
 8003348:	bf00      	nop
 800334a:	3740      	adds	r7, #64	; 0x40
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000170 	.word	0x20000170
 8003354:	40010000 	.word	0x40010000
 8003358:	080034f8 	.word	0x080034f8

0800335c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0b      	ldr	r2, [pc, #44]	; (8003398 <HAL_TIM_OC_MspInit+0x3c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10d      	bne.n	800338a <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <HAL_TIM_OC_MspInit+0x40>)
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_TIM_OC_MspInit+0x40>)
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	6453      	str	r3, [r2, #68]	; 0x44
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <HAL_TIM_OC_MspInit+0x40>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010000 	.word	0x40010000
 800339c:	40023800 	.word	0x40023800

080033a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0b      	ldr	r2, [pc, #44]	; (80033dc <HAL_TIM_MspPostInit+0x3c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d110      	bne.n	80033d4 <HAL_TIM_MspPostInit+0x34>
  
    /**TIM1 GPIO Configuration    
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033c4:	2301      	movs	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	4619      	mov	r1, r3
 80033ce:	4804      	ldr	r0, [pc, #16]	; (80033e0 <HAL_TIM_MspPostInit+0x40>)
 80033d0:	f7fd ff82 	bl	80012d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80033d4:	bf00      	nop
 80033d6:	3720      	adds	r7, #32
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40010000 	.word	0x40010000
 80033e0:	40021000 	.word	0x40021000

080033e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800341c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80033e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80033ea:	e003      	b.n	80033f4 <LoopCopyDataInit>

080033ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80033ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80033f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80033f2:	3104      	adds	r1, #4

080033f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80033f4:	480b      	ldr	r0, [pc, #44]	; (8003424 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80033f6:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80033f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80033fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80033fc:	d3f6      	bcc.n	80033ec <CopyDataInit>
  ldr  r2, =_sbss
 80033fe:	4a0b      	ldr	r2, [pc, #44]	; (800342c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003400:	e002      	b.n	8003408 <LoopFillZerobss>

08003402 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003402:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003404:	f842 3b04 	str.w	r3, [r2], #4

08003408 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800340a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800340c:	d3f9      	bcc.n	8003402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800340e:	f7ff fefb 	bl	8003208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003412:	f000 f811 	bl	8003438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003416:	f7ff fd4b 	bl	8002eb0 <main>
  bx  lr    
 800341a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800341c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003420:	08003530 	.word	0x08003530
  ldr  r0, =_sdata
 8003424:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003428:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800342c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8003430:	200001ac 	.word	0x200001ac

08003434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003434:	e7fe      	b.n	8003434 <ADC_IRQHandler>
	...

08003438 <__libc_init_array>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	4e0d      	ldr	r6, [pc, #52]	; (8003470 <__libc_init_array+0x38>)
 800343c:	4c0d      	ldr	r4, [pc, #52]	; (8003474 <__libc_init_array+0x3c>)
 800343e:	1ba4      	subs	r4, r4, r6
 8003440:	10a4      	asrs	r4, r4, #2
 8003442:	2500      	movs	r5, #0
 8003444:	42a5      	cmp	r5, r4
 8003446:	d109      	bne.n	800345c <__libc_init_array+0x24>
 8003448:	4e0b      	ldr	r6, [pc, #44]	; (8003478 <__libc_init_array+0x40>)
 800344a:	4c0c      	ldr	r4, [pc, #48]	; (800347c <__libc_init_array+0x44>)
 800344c:	f000 f818 	bl	8003480 <_init>
 8003450:	1ba4      	subs	r4, r4, r6
 8003452:	10a4      	asrs	r4, r4, #2
 8003454:	2500      	movs	r5, #0
 8003456:	42a5      	cmp	r5, r4
 8003458:	d105      	bne.n	8003466 <__libc_init_array+0x2e>
 800345a:	bd70      	pop	{r4, r5, r6, pc}
 800345c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003460:	4798      	blx	r3
 8003462:	3501      	adds	r5, #1
 8003464:	e7ee      	b.n	8003444 <__libc_init_array+0xc>
 8003466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800346a:	4798      	blx	r3
 800346c:	3501      	adds	r5, #1
 800346e:	e7f2      	b.n	8003456 <__libc_init_array+0x1e>
 8003470:	08003528 	.word	0x08003528
 8003474:	08003528 	.word	0x08003528
 8003478:	08003528 	.word	0x08003528
 800347c:	0800352c 	.word	0x0800352c

08003480 <_init>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr

0800348c <_fini>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	bf00      	nop
 8003490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003492:	bc08      	pop	{r3}
 8003494:	469e      	mov	lr, r3
 8003496:	4770      	bx	lr
