
PARSEC_Pressure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003054  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003218  08003218  00013218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080032b4  080032b4  000132b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080032bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000194  20000004  080032c0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000198  080032c0  00020198  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001dfd8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003664  00000000  00000000  0003e00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001088  00000000  00000000  00041670  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f10  00000000  00000000  000426f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008e14  00000000  00000000  00043608  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004f72  00000000  00000000  0004c41c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0005138e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000043cc  00000000  00000000  0005140c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003200 	.word	0x08003200

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08003200 	.word	0x08003200

08000204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000208:	4a0e      	ldr	r2, [pc, #56]	; (8000244 <HAL_Init+0x40>)
 800020a:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <HAL_Init+0x40>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000214:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <HAL_Init+0x40>)
 8000216:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <HAL_Init+0x40>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	4a08      	ldr	r2, [pc, #32]	; (8000244 <HAL_Init+0x40>)
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <HAL_Init+0x40>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800022a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800022c:	2003      	movs	r0, #3
 800022e:	f000 fe09 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f808 	bl	8000248 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000238:	f002 fe44 	bl	8002ec4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800023c:	2300      	movs	r3, #0
}
 800023e:	4618      	mov	r0, r3
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40023c00 	.word	0x40023c00

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <HAL_InitTick+0x30>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a09      	ldr	r2, [pc, #36]	; (800027c <HAL_InitTick+0x34>)
 8000256:	fba2 2303 	umull	r2, r3, r2, r3
 800025a:	099b      	lsrs	r3, r3, #6
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fe18 	bl	8000e92 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000262:	2200      	movs	r2, #0
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	f04f 30ff 	mov.w	r0, #4294967295
 800026a:	f000 fdf6 	bl	8000e5a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800026e:	2300      	movs	r3, #0
}
 8000270:	4618      	mov	r0, r3
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000000 	.word	0x20000000
 800027c:	10624dd3 	.word	0x10624dd3

08000280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <HAL_IncTick+0x18>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	4a03      	ldr	r2, [pc, #12]	; (8000298 <HAL_IncTick+0x18>)
 800028c:	6013      	str	r3, [r2, #0]
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	20000020 	.word	0x20000020

0800029c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return uwTick;
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <HAL_GetTick+0x14>)
 80002a2:	681b      	ldr	r3, [r3, #0]
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000020 	.word	0x20000020

080002b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002bc:	f7ff ffee 	bl	800029c <HAL_GetTick>
 80002c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002cc:	d002      	beq.n	80002d4 <HAL_Delay+0x20>
  {
     wait++;
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	3301      	adds	r3, #1
 80002d2:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002d4:	bf00      	nop
 80002d6:	f7ff ffe1 	bl	800029c <HAL_GetTick>
 80002da:	4602      	mov	r2, r0
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	1ad2      	subs	r2, r2, r3
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d3f7      	bcc.n	80002d6 <HAL_Delay+0x22>
  {
  }
}
 80002e6:	bf00      	nop
 80002e8:	3710      	adds	r7, #16
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	b084      	sub	sp, #16
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002f6:	2300      	movs	r3, #0
 80002f8:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d101      	bne.n	8000304 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000300:	2301      	movs	r3, #1
 8000302:	e033      	b.n	800036c <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000308:	2b00      	cmp	r3, #0
 800030a:	d109      	bne.n	8000320 <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2200      	movs	r2, #0
 8000310:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f002 f9c8 	bl	80026b0 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	2b00      	cmp	r3, #0
 800032a:	d118      	bne.n	800035e <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000330:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000334:	f023 0302 	bic.w	r3, r3, #2
 8000338:	f043 0202 	orr.w	r2, r3, #2
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f000 faa7 	bl	8000894 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000350:	f023 0303 	bic.w	r3, r3, #3
 8000354:	f043 0201 	orr.w	r2, r3, #1
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	641a      	str	r2, [r3, #64]	; 0x40
 800035c:	e001      	b.n	8000362 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800035e:	2301      	movs	r3, #1
 8000360:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2200      	movs	r2, #0
 8000366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800036a:	7bfb      	ldrb	r3, [r7, #15]
}
 800036c:	4618      	mov	r0, r3
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000386:	2b01      	cmp	r3, #1
 8000388:	d101      	bne.n	800038e <HAL_ADC_Start+0x1a>
 800038a:	2302      	movs	r3, #2
 800038c:	e089      	b.n	80004a2 <HAL_ADC_Start+0x12e>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2201      	movs	r2, #1
 8000392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d018      	beq.n	80003d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	6812      	ldr	r2, [r2, #0]
 80003ac:	6892      	ldr	r2, [r2, #8]
 80003ae:	f042 0201 	orr.w	r2, r2, #1
 80003b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003b4:	4b3e      	ldr	r3, [pc, #248]	; (80004b0 <HAL_ADC_Start+0x13c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a3e      	ldr	r2, [pc, #248]	; (80004b4 <HAL_ADC_Start+0x140>)
 80003ba:	fba2 2303 	umull	r2, r3, r2, r3
 80003be:	0c9a      	lsrs	r2, r3, #18
 80003c0:	4613      	mov	r3, r2
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	4413      	add	r3, r2
 80003c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80003c8:	e002      	b.n	80003d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	3b01      	subs	r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d1f9      	bne.n	80003ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d05d      	beq.n	80004a0 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80003ec:	f023 0301 	bic.w	r3, r3, #1
 80003f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000402:	2b00      	cmp	r3, #0
 8000404:	d007      	beq.n	8000416 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800040a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800040e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800041a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800041e:	2b00      	cmp	r3, #0
 8000420:	d006      	beq.n	8000430 <HAL_ADC_Start+0xbc>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000426:	f023 0206 	bic.w	r2, r3, #6
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	645a      	str	r2, [r3, #68]	; 0x44
 800042e:	e002      	b.n	8000436 <HAL_ADC_Start+0xc2>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2200      	movs	r2, #0
 8000434:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2200      	movs	r2, #0
 800043a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <HAL_ADC_Start+0x144>)
 8000440:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800044a:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	f003 031f 	and.w	r3, r3, #31
 8000454:	2b00      	cmp	r3, #0
 8000456:	d10f      	bne.n	8000478 <HAL_ADC_Start+0x104>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000462:	2b00      	cmp	r3, #0
 8000464:	d11c      	bne.n	80004a0 <HAL_ADC_Start+0x12c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	6812      	ldr	r2, [r2, #0]
 800046e:	6892      	ldr	r2, [r2, #8]
 8000470:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	e013      	b.n	80004a0 <HAL_ADC_Start+0x12c>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <HAL_ADC_Start+0x148>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d10e      	bne.n	80004a0 <HAL_ADC_Start+0x12c>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d107      	bne.n	80004a0 <HAL_ADC_Start+0x12c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	6812      	ldr	r2, [r2, #0]
 8000498:	6892      	ldr	r2, [r2, #8]
 800049a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800049e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	20000000 	.word	0x20000000
 80004b4:	431bde83 	.word	0x431bde83
 80004b8:	40012300 	.word	0x40012300
 80004bc:	40012000 	.word	0x40012000

080004c0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d101      	bne.n	80004d6 <HAL_ADC_Stop+0x16>
 80004d2:	2302      	movs	r3, #2
 80004d4:	e021      	b.n	800051a <HAL_ADC_Stop+0x5a>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2201      	movs	r2, #1
 80004da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	6812      	ldr	r2, [r2, #0]
 80004e6:	6892      	ldr	r2, [r2, #8]
 80004e8:	f022 0201 	bic.w	r2, r2, #1
 80004ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d109      	bne.n	8000510 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000500:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000504:	f023 0301 	bic.w	r3, r3, #1
 8000508:	f043 0201 	orr.w	r2, r3, #1
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2200      	movs	r2, #0
 8000514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b084      	sub	sp, #16
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800053e:	2b00      	cmp	r3, #0
 8000540:	d012      	beq.n	8000568 <HAL_ADC_PollForConversion+0x42>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00b      	beq.n	8000568 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f043 0220 	orr.w	r2, r3, #32
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2200      	movs	r2, #0
 8000560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000564:	2301      	movs	r3, #1
 8000566:	e05c      	b.n	8000622 <HAL_ADC_PollForConversion+0xfc>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000568:	f7ff fe98 	bl	800029c <HAL_GetTick>
 800056c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800056e:	e01a      	b.n	80005a6 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000576:	d016      	beq.n	80005a6 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d007      	beq.n	800058e <HAL_ADC_PollForConversion+0x68>
 800057e:	f7ff fe8d 	bl	800029c <HAL_GetTick>
 8000582:	4602      	mov	r2, r0
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	1ad2      	subs	r2, r2, r3
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	429a      	cmp	r2, r3
 800058c:	d90b      	bls.n	80005a6 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	f043 0204 	orr.w	r2, r3, #4
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80005a2:	2303      	movs	r3, #3
 80005a4:	e03d      	b.n	8000622 <HAL_ADC_PollForConversion+0xfc>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f003 0302 	and.w	r3, r3, #2
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d1dd      	bne.n	8000570 <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f06f 0212 	mvn.w	r2, #18
 80005bc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d123      	bne.n	8000620 <HAL_ADC_PollForConversion+0xfa>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d11f      	bne.n	8000620 <HAL_ADC_PollForConversion+0xfa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d006      	beq.n	80005fc <HAL_ADC_PollForConversion+0xd6>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d111      	bne.n	8000620 <HAL_ADC_PollForConversion+0xfa>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000610:	2b00      	cmp	r3, #0
 8000612:	d105      	bne.n	8000620 <HAL_ADC_PollForConversion+0xfa>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f043 0201 	orr.w	r2, r3, #1
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000644:	b490      	push	{r4, r7}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000658:	2b01      	cmp	r3, #1
 800065a:	d101      	bne.n	8000660 <HAL_ADC_ConfigChannel+0x1c>
 800065c:	2302      	movs	r3, #2
 800065e:	e109      	b.n	8000874 <HAL_ADC_ConfigChannel+0x230>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2201      	movs	r2, #1
 8000664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b09      	cmp	r3, #9
 800066e:	d926      	bls.n	80006be <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68d9      	ldr	r1, [r3, #12]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	b29b      	uxth	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	4603      	mov	r3, r0
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4403      	add	r3, r0
 8000688:	3b1e      	subs	r3, #30
 800068a:	2007      	movs	r0, #7
 800068c:	fa00 f303 	lsl.w	r3, r0, r3
 8000690:	43db      	mvns	r3, r3
 8000692:	400b      	ands	r3, r1
 8000694:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68d9      	ldr	r1, [r3, #12]
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	6898      	ldr	r0, [r3, #8]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	461c      	mov	r4, r3
 80006ac:	4623      	mov	r3, r4
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4423      	add	r3, r4
 80006b2:	3b1e      	subs	r3, #30
 80006b4:	fa00 f303 	lsl.w	r3, r0, r3
 80006b8:	430b      	orrs	r3, r1
 80006ba:	60d3      	str	r3, [r2, #12]
 80006bc:	e023      	b.n	8000706 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6919      	ldr	r1, [r3, #16]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	4603      	mov	r3, r0
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4403      	add	r3, r0
 80006d6:	2007      	movs	r0, #7
 80006d8:	fa00 f303 	lsl.w	r3, r0, r3
 80006dc:	43db      	mvns	r3, r3
 80006de:	400b      	ands	r3, r1
 80006e0:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6919      	ldr	r1, [r3, #16]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	6898      	ldr	r0, [r3, #8]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	461c      	mov	r4, r3
 80006f8:	4623      	mov	r3, r4
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4423      	add	r3, r4
 80006fe:	fa00 f303 	lsl.w	r3, r0, r3
 8000702:	430b      	orrs	r3, r1
 8000704:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	2b06      	cmp	r3, #6
 800070c:	d824      	bhi.n	8000758 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6819      	ldr	r1, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	685a      	ldr	r2, [r3, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	3b05      	subs	r3, #5
 8000724:	221f      	movs	r2, #31
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43db      	mvns	r3, r3
 800072c:	4003      	ands	r3, r0
 800072e:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6819      	ldr	r1, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	461c      	mov	r4, r3
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	4613      	mov	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	3b05      	subs	r3, #5
 800074e:	fa04 f303 	lsl.w	r3, r4, r3
 8000752:	4303      	orrs	r3, r0
 8000754:	634b      	str	r3, [r1, #52]	; 0x34
 8000756:	e04c      	b.n	80007f2 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	2b0c      	cmp	r3, #12
 800075e:	d824      	bhi.n	80007aa <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6819      	ldr	r1, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685a      	ldr	r2, [r3, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	3b23      	subs	r3, #35	; 0x23
 8000776:	221f      	movs	r2, #31
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	43db      	mvns	r3, r3
 800077e:	4003      	ands	r3, r0
 8000780:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6819      	ldr	r1, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	b29b      	uxth	r3, r3
 8000792:	461c      	mov	r4, r3
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685a      	ldr	r2, [r3, #4]
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	3b23      	subs	r3, #35	; 0x23
 80007a0:	fa04 f303 	lsl.w	r3, r4, r3
 80007a4:	4303      	orrs	r3, r0
 80007a6:	630b      	str	r3, [r1, #48]	; 0x30
 80007a8:	e023      	b.n	80007f2 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6819      	ldr	r1, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685a      	ldr	r2, [r3, #4]
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	3b41      	subs	r3, #65	; 0x41
 80007c0:	221f      	movs	r2, #31
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	4003      	ands	r3, r0
 80007ca:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6819      	ldr	r1, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	461c      	mov	r4, r3
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	3b41      	subs	r3, #65	; 0x41
 80007ea:	fa04 f303 	lsl.w	r3, r4, r3
 80007ee:	4303      	orrs	r3, r0
 80007f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <HAL_ADC_ConfigChannel+0x23c>)
 80007f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a22      	ldr	r2, [pc, #136]	; (8000884 <HAL_ADC_ConfigChannel+0x240>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d109      	bne.n	8000814 <HAL_ADC_ConfigChannel+0x1d0>
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b12      	cmp	r3, #18
 8000806:	d105      	bne.n	8000814 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <HAL_ADC_ConfigChannel+0x240>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d125      	bne.n	800086a <HAL_ADC_ConfigChannel+0x226>
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a19      	ldr	r2, [pc, #100]	; (8000888 <HAL_ADC_ConfigChannel+0x244>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d003      	beq.n	8000830 <HAL_ADC_ConfigChannel+0x1ec>
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b11      	cmp	r3, #17
 800082e:	d11c      	bne.n	800086a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a11      	ldr	r2, [pc, #68]	; (8000888 <HAL_ADC_ConfigChannel+0x244>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d111      	bne.n	800086a <HAL_ADC_ConfigChannel+0x226>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <HAL_ADC_ConfigChannel+0x248>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a11      	ldr	r2, [pc, #68]	; (8000890 <HAL_ADC_ConfigChannel+0x24c>)
 800084c:	fba2 2303 	umull	r2, r3, r2, r3
 8000850:	0c9a      	lsrs	r2, r3, #18
 8000852:	4613      	mov	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800085c:	e002      	b.n	8000864 <HAL_ADC_ConfigChannel+0x220>
      {
        counter--;
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	3b01      	subs	r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1f9      	bne.n	800085e <HAL_ADC_ConfigChannel+0x21a>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
}
 8000874:	4618      	mov	r0, r3
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bc90      	pop	{r4, r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40012300 	.word	0x40012300
 8000884:	40012000 	.word	0x40012000
 8000888:	10000012 	.word	0x10000012
 800088c:	20000000 	.word	0x20000000
 8000890:	431bde83 	.word	0x431bde83

08000894 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800089c:	4b7d      	ldr	r3, [pc, #500]	; (8000a94 <ADC_Init+0x200>)
 800089e:	617b      	str	r3, [r7, #20]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	685a      	ldr	r2, [r3, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	431a      	orrs	r2, r3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	6852      	ldr	r2, [r2, #4]
 80008c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	6812      	ldr	r2, [r2, #0]
 80008d2:	6851      	ldr	r1, [r2, #4]
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	6912      	ldr	r2, [r2, #16]
 80008d8:	0212      	lsls	r2, r2, #8
 80008da:	430a      	orrs	r2, r1
 80008dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	6852      	ldr	r2, [r2, #4]
 80008e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80008ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6812      	ldr	r2, [r2, #0]
 80008f6:	6851      	ldr	r1, [r2, #4]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	6892      	ldr	r2, [r2, #8]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	6812      	ldr	r2, [r2, #0]
 8000908:	6892      	ldr	r2, [r2, #8]
 800090a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800090e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	6812      	ldr	r2, [r2, #0]
 8000918:	6891      	ldr	r1, [r2, #8]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68d2      	ldr	r2, [r2, #12]
 800091e:	430a      	orrs	r2, r1
 8000920:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000926:	4a5c      	ldr	r2, [pc, #368]	; (8000a98 <ADC_Init+0x204>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d022      	beq.n	8000972 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	6812      	ldr	r2, [r2, #0]
 8000934:	6892      	ldr	r2, [r2, #8]
 8000936:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800093a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	6812      	ldr	r2, [r2, #0]
 8000944:	6891      	ldr	r1, [r2, #8]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800094a:	430a      	orrs	r2, r1
 800094c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	6892      	ldr	r2, [r2, #8]
 8000958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800095c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	6812      	ldr	r2, [r2, #0]
 8000966:	6891      	ldr	r1, [r2, #8]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800096c:	430a      	orrs	r2, r1
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	e00f      	b.n	8000992 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	6812      	ldr	r2, [r2, #0]
 800097a:	6892      	ldr	r2, [r2, #8]
 800097c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	6892      	ldr	r2, [r2, #8]
 800098c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000990:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	6892      	ldr	r2, [r2, #8]
 800099c:	f022 0202 	bic.w	r2, r2, #2
 80009a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	6891      	ldr	r1, [r2, #8]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	6992      	ldr	r2, [r2, #24]
 80009b0:	0052      	lsls	r2, r2, #1
 80009b2:	430a      	orrs	r2, r1
 80009b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a1b      	ldr	r3, [r3, #32]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d025      	beq.n	8000a0a <ADC_Init+0x176>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	6852      	ldr	r2, [r2, #4]
 80009c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009cc:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	6812      	ldr	r2, [r2, #0]
 80009d6:	6852      	ldr	r2, [r2, #4]
 80009d8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80009dc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009e8:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	fa93 f3a3 	rbit	r3, r3
 80009f0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	fab3 f383 	clz	r3, r3
 80009f8:	409a      	lsls	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	6809      	ldr	r1, [r1, #0]
 8000a02:	6849      	ldr	r1, [r1, #4]
 8000a04:	430a      	orrs	r2, r1
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	e007      	b.n	8000a1a <ADC_Init+0x186>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	6812      	ldr	r2, [r2, #0]
 8000a12:	6852      	ldr	r2, [r2, #4]
 8000a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a18:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	6812      	ldr	r2, [r2, #0]
 8000a22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000a24:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	6812      	ldr	r2, [r2, #0]
 8000a32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	69d2      	ldr	r2, [r2, #28]
 8000a38:	3a01      	subs	r2, #1
 8000a3a:	0512      	lsls	r2, r2, #20
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	6812      	ldr	r2, [r2, #0]
 8000a48:	6892      	ldr	r2, [r2, #8]
 8000a4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	6812      	ldr	r2, [r2, #0]
 8000a58:	6891      	ldr	r1, [r2, #8]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000a5e:	0252      	lsls	r2, r2, #9
 8000a60:	430a      	orrs	r2, r1
 8000a62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	6892      	ldr	r2, [r2, #8]
 8000a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	6891      	ldr	r1, [r2, #8]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	6952      	ldr	r2, [r2, #20]
 8000a82:	0292      	lsls	r2, r2, #10
 8000a84:	430a      	orrs	r2, r1
 8000a86:	609a      	str	r2, [r3, #8]
}
 8000a88:	bf00      	nop
 8000a8a:	371c      	adds	r7, #28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40012300 	.word	0x40012300
 8000a98:	0f000001 	.word	0x0f000001

08000a9c <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t InitStatus = CAN_INITSTATUS_FAILED;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d101      	bne.n	8000ab6 <HAL_CAN_Init+0x1a>
  {
     return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e112      	b.n	8000cdc <HAL_CAN_Init+0x240>
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  

  if(hcan->State == HAL_CAN_STATE_RESET)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d106      	bne.n	8000ad0 <HAL_CAN_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f001 fe68 	bl	80027a0 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	f022 0202 	bic.w	r2, r2, #2
 8000ae6:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	6812      	ldr	r2, [r2, #0]
 8000af2:	f042 0201 	orr.w	r2, r2, #1
 8000af6:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000af8:	f7ff fbd0 	bl	800029c <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]

  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000afe:	e010      	b.n	8000b22 <HAL_CAN_Init+0x86>
  {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000b00:	f7ff fbcc 	bl	800029c <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b0a      	cmp	r3, #10
 8000b0c:	d909      	bls.n	8000b22 <HAL_CAN_Init+0x86>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2203      	movs	r2, #3
 8000b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      return HAL_TIMEOUT;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	e0dc      	b.n	8000cdc <HAL_CAN_Init+0x240>
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d1e7      	bne.n	8000b00 <HAL_CAN_Init+0x64>
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	f040 80bd 	bne.w	8000cba <HAL_CAN_Init+0x21e>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d108      	bne.n	8000b5a <HAL_CAN_Init+0xbe>
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	6812      	ldr	r2, [r2, #0]
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	e007      	b.n	8000b6a <HAL_CAN_Init+0xce>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b68:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d108      	bne.n	8000b84 <HAL_CAN_Init+0xe8>
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	e007      	b.n	8000b94 <HAL_CAN_Init+0xf8>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b92:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d108      	bne.n	8000bae <HAL_CAN_Init+0x112>
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	6812      	ldr	r2, [r2, #0]
 8000ba4:	6812      	ldr	r2, [r2, #0]
 8000ba6:	f042 0220 	orr.w	r2, r2, #32
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e007      	b.n	8000bbe <HAL_CAN_Init+0x122>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	f022 0220 	bic.w	r2, r2, #32
 8000bbc:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d108      	bne.n	8000bd8 <HAL_CAN_Init+0x13c>
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	f042 0210 	orr.w	r2, r2, #16
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e007      	b.n	8000be8 <HAL_CAN_Init+0x14c>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	6812      	ldr	r2, [r2, #0]
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	f022 0210 	bic.w	r2, r2, #16
 8000be6:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d108      	bne.n	8000c02 <HAL_CAN_Init+0x166>
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	6812      	ldr	r2, [r2, #0]
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	f042 0208 	orr.w	r2, r2, #8
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	e007      	b.n	8000c12 <HAL_CAN_Init+0x176>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	f022 0208 	bic.w	r2, r2, #8
 8000c10:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d108      	bne.n	8000c2c <HAL_CAN_Init+0x190>
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	f042 0204 	orr.w	r2, r2, #4
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	e007      	b.n	8000c3c <HAL_CAN_Init+0x1a0>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	f022 0204 	bic.w	r2, r2, #4
 8000c3a:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	6891      	ldr	r1, [r2, #8]
                ((uint32_t)hcan->Init.SJW) | \
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	68d2      	ldr	r2, [r2, #12]
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000c48:	4311      	orrs	r1, r2
                ((uint32_t)hcan->Init.BS1) | \
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6912      	ldr	r2, [r2, #16]
                ((uint32_t)hcan->Init.SJW) | \
 8000c4e:	4311      	orrs	r1, r2
                ((uint32_t)hcan->Init.BS2) | \
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	6952      	ldr	r2, [r2, #20]
                ((uint32_t)hcan->Init.BS1) | \
 8000c54:	4311      	orrs	r1, r2
               ((uint32_t)hcan->Init.Prescaler - 1U);
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	6852      	ldr	r2, [r2, #4]
 8000c5a:	3a01      	subs	r2, #1
                ((uint32_t)hcan->Init.BS2) | \
 8000c5c:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000c5e:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	6812      	ldr	r2, [r2, #0]
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	f022 0201 	bic.w	r2, r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c70:	f7ff fb14 	bl	800029c <HAL_GetTick>
 8000c74:	60b8      	str	r0, [r7, #8]

   /* Wait the acknowledge */
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000c76:	e010      	b.n	8000c9a <HAL_CAN_Init+0x1fe>
   {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000c78:	f7ff fb10 	bl	800029c <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b0a      	cmp	r3, #10
 8000c84:	d909      	bls.n	8000c9a <HAL_CAN_Init+0x1fe>
     {
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2203      	movs	r2, #3
 8000c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
       return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e020      	b.n	8000cdc <HAL_CAN_Init+0x240>
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d0e7      	beq.n	8000c78 <HAL_CAN_Init+0x1dc>
     }
   }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d001      	beq.n	8000cba <HAL_CAN_Init+0x21e>
    {
      InitStatus = CAN_INITSTATUS_SUCCESS;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
    }
  }
 
  if(InitStatus == CAN_INITSTATUS_SUCCESS)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d108      	bne.n	8000cd2 <HAL_CAN_Init+0x236>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
    /* Return function status */
    return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e004      	b.n	8000cdc <HAL_CAN_Init+0x240>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Return function status */
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
  }
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	da0b      	bge.n	8000d74 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	490d      	ldr	r1, [pc, #52]	; (8000d94 <NVIC_SetPriority+0x4c>)
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 030f 	and.w	r3, r3, #15
 8000d64:	3b04      	subs	r3, #4
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d72:	e009      	b.n	8000d88 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	4908      	ldr	r1, [pc, #32]	; (8000d98 <NVIC_SetPriority+0x50>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	401a      	ands	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de2:	2101      	movs	r1, #1
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	1e59      	subs	r1, r3, #1
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f7ff ff90 	bl	8000d48 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff49 	bl	8000ce4 <NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff5e 	bl	8000d2c <NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff90 	bl	8000d9c <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5f 	bl	8000d48 <NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffb0 	bl	8000e00 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	d106      	bne.n	8000ec8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000ec6:	e005      	b.n	8000ed4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ec8:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f023 0304 	bic.w	r3, r3, #4
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ee8:	f000 f802 	bl	8000ef0 <HAL_SYSTICK_Callback>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e165      	b.n	80011e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 8154 	bne.w	80011e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x4a>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d123      	bne.n	8000f92 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	69b9      	ldr	r1, [r7, #24]
 8000f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0203 	and.w	r2, r3, #3
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_GPIO_Init+0xe6>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fda:	2b11      	cmp	r3, #17
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d130      	bne.n	8001048 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80ae 	beq.w	80011e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4a5c      	ldr	r2, [pc, #368]	; (80011fc <HAL_GPIO_Init+0x2fc>)
 800108c:	4b5b      	ldr	r3, [pc, #364]	; (80011fc <HAL_GPIO_Init+0x2fc>)
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b59      	ldr	r3, [pc, #356]	; (80011fc <HAL_GPIO_Init+0x2fc>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a2:	4a57      	ldr	r2, [pc, #348]	; (8001200 <HAL_GPIO_Init+0x300>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <HAL_GPIO_Init+0x304>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d025      	beq.n	800111a <HAL_GPIO_Init+0x21a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <HAL_GPIO_Init+0x308>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d01f      	beq.n	8001116 <HAL_GPIO_Init+0x216>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x30c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x212>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <HAL_GPIO_Init+0x310>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x20e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4a      	ldr	r2, [pc, #296]	; (8001214 <HAL_GPIO_Init+0x314>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x20a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a49      	ldr	r2, [pc, #292]	; (8001218 <HAL_GPIO_Init+0x318>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x206>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a48      	ldr	r2, [pc, #288]	; (800121c <HAL_GPIO_Init+0x31c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x202>
 80010fe:	2306      	movs	r3, #6
 8001100:	e00c      	b.n	800111c <HAL_GPIO_Init+0x21c>
 8001102:	2307      	movs	r3, #7
 8001104:	e00a      	b.n	800111c <HAL_GPIO_Init+0x21c>
 8001106:	2305      	movs	r3, #5
 8001108:	e008      	b.n	800111c <HAL_GPIO_Init+0x21c>
 800110a:	2304      	movs	r3, #4
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x21c>
 800110e:	2303      	movs	r3, #3
 8001110:	e004      	b.n	800111c <HAL_GPIO_Init+0x21c>
 8001112:	2302      	movs	r3, #2
 8001114:	e002      	b.n	800111c <HAL_GPIO_Init+0x21c>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <HAL_GPIO_Init+0x21c>
 800111a:	2300      	movs	r3, #0
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	f002 0203 	and.w	r2, r2, #3
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	4093      	lsls	r3, r2
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800112c:	4934      	ldr	r1, [pc, #208]	; (8001200 <HAL_GPIO_Init+0x300>)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800113a:	4b39      	ldr	r3, [pc, #228]	; (8001220 <HAL_GPIO_Init+0x320>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115e:	4a30      	ldr	r2, [pc, #192]	; (8001220 <HAL_GPIO_Init+0x320>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <HAL_GPIO_Init+0x320>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001188:	4a25      	ldr	r2, [pc, #148]	; (8001220 <HAL_GPIO_Init+0x320>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <HAL_GPIO_Init+0x320>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b2:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <HAL_GPIO_Init+0x320>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_GPIO_Init+0x320>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011dc:	4a10      	ldr	r2, [pc, #64]	; (8001220 <HAL_GPIO_Init+0x320>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	f67f ae96 	bls.w	8000f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f0:	bf00      	nop
 80011f2:	3724      	adds	r7, #36	; 0x24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40023800 	.word	0x40023800
 8001200:	40013800 	.word	0x40013800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40020800 	.word	0x40020800
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40021400 	.word	0x40021400
 800121c:	40021800 	.word	0x40021800
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e0c8      	b.n	80013d0 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d106      	bne.n	8001258 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f001 fb5a 	bl	800290c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2224      	movs	r2, #36	; 0x24
 800125c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001270:	f000 fa40 	bl	80016f4 <HAL_RCC_GetPCLK1Freq>
 8001274:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	4a57      	ldr	r2, [pc, #348]	; (80013d8 <HAL_I2C_Init+0x1b4>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9b      	lsrs	r3, r3, #18
 8001280:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4952      	ldr	r1, [pc, #328]	; (80013dc <HAL_I2C_Init+0x1b8>)
 8001294:	428b      	cmp	r3, r1
 8001296:	d802      	bhi.n	800129e <HAL_I2C_Init+0x7a>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3301      	adds	r3, #1
 800129c:	e009      	b.n	80012b2 <HAL_I2C_Init+0x8e>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80012a4:	fb01 f303 	mul.w	r3, r1, r3
 80012a8:	494d      	ldr	r1, [pc, #308]	; (80013e0 <HAL_I2C_Init+0x1bc>)
 80012aa:	fba1 1303 	umull	r1, r3, r1, r3
 80012ae:	099b      	lsrs	r3, r3, #6
 80012b0:	3301      	adds	r3, #1
 80012b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a47      	ldr	r2, [pc, #284]	; (80013dc <HAL_I2C_Init+0x1b8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d812      	bhi.n	80012e8 <HAL_I2C_Init+0xc4>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d906      	bls.n	80012e4 <HAL_I2C_Init+0xc0>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	e045      	b.n	8001370 <HAL_I2C_Init+0x14c>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e043      	b.n	8001370 <HAL_I2C_Init+0x14c>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10f      	bne.n	8001310 <HAL_I2C_Init+0xec>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf0c      	ite	eq
 8001308:	2301      	moveq	r3, #1
 800130a:	2300      	movne	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	e010      	b.n	8001332 <HAL_I2C_Init+0x10e>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	009a      	lsls	r2, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	fbb2 f3f3 	udiv	r3, r2, r3
 8001324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf0c      	ite	eq
 800132c:	2301      	moveq	r3, #1
 800132e:	2300      	movne	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_I2C_Init+0x116>
 8001336:	2301      	movs	r3, #1
 8001338:	e01a      	b.n	8001370 <HAL_I2C_Init+0x14c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10a      	bne.n	8001358 <HAL_I2C_Init+0x134>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001356:	e00b      	b.n	8001370 <HAL_I2C_Init+0x14c>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	009a      	lsls	r2, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	fbb2 f3f3 	udiv	r3, r2, r3
 800136c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001370:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	69d1      	ldr	r1, [r2, #28]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6a12      	ldr	r2, [r2, #32]
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6911      	ldr	r1, [r2, #16]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68d2      	ldr	r2, [r2, #12]
 800138e:	430a      	orrs	r2, r1
 8001390:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6951      	ldr	r1, [r2, #20]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6992      	ldr	r2, [r2, #24]
 800139e:	430a      	orrs	r2, r1
 80013a0:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	f042 0201 	orr.w	r2, r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2220      	movs	r2, #32
 80013bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	431bde83 	.word	0x431bde83
 80013dc:	000186a0 	.word	0x000186a0
 80013e0:	10624dd3 	.word	0x10624dd3

080013e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4a2f      	ldr	r2, [pc, #188]	; (80014b0 <HAL_PWREx_EnableOverDrive+0xcc>)
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <HAL_PWREx_EnableOverDrive+0xcc>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <HAL_PWREx_EnableOverDrive+0xcc>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	60fb      	str	r3, [r7, #12]
  return(result);
 8001418:	68fb      	ldr	r3, [r7, #12]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001422:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	461a      	mov	r2, r3
 800142a:	2301      	movs	r3, #1
 800142c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800142e:	f7fe ff35 	bl	800029c <HAL_GetTick>
 8001432:	6178      	str	r0, [r7, #20]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001434:	e009      	b.n	800144a <HAL_PWREx_EnableOverDrive+0x66>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001436:	f7fe ff31 	bl	800029c <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001444:	d901      	bls.n	800144a <HAL_PWREx_EnableOverDrive+0x66>
    {
      return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e02e      	b.n	80014a8 <HAL_PWREx_EnableOverDrive+0xc4>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_PWREx_EnableOverDrive+0xd0>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001456:	d1ee      	bne.n	8001436 <HAL_PWREx_EnableOverDrive+0x52>
 8001458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800145c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	fa93 f3a3 	rbit	r3, r3
 8001464:	607b      	str	r3, [r7, #4]
  return(result);
 8001466:	687b      	ldr	r3, [r7, #4]
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001470:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	461a      	mov	r2, r3
 8001478:	2301      	movs	r3, #1
 800147a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800147c:	f7fe ff0e 	bl	800029c <HAL_GetTick>
 8001480:	6178      	str	r0, [r7, #20]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001482:	e009      	b.n	8001498 <HAL_PWREx_EnableOverDrive+0xb4>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001484:	f7fe ff0a 	bl	800029c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001492:	d901      	bls.n	8001498 <HAL_PWREx_EnableOverDrive+0xb4>
    {
      return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e007      	b.n	80014a8 <HAL_PWREx_EnableOverDrive+0xc4>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_PWREx_EnableOverDrive+0xd0>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014a4:	d1ee      	bne.n	8001484 <HAL_PWREx_EnableOverDrive+0xa0>
    }
  } 
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000

080014b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014c6:	4b81      	ldr	r3, [pc, #516]	; (80016cc <HAL_RCC_ClockConfig+0x214>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 020f 	and.w	r2, r3, #15
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d20c      	bcs.n	80014ee <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d4:	4b7d      	ldr	r3, [pc, #500]	; (80016cc <HAL_RCC_ClockConfig+0x214>)
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014dc:	4b7b      	ldr	r3, [pc, #492]	; (80016cc <HAL_RCC_ClockConfig+0x214>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 020f 	and.w	r2, r3, #15
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0ea      	b.n	80016c4 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fa:	4975      	ldr	r1, [pc, #468]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 80014fc:	4b74      	ldr	r3, [pc, #464]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	4313      	orrs	r3, r2
 800150a:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 8086 	beq.w	8001626 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d119      	bne.n	8001562 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0c8      	b.n	80016c4 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d003      	beq.n	8001542 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800153e:	2b03      	cmp	r3, #3
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001542:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0b8      	b.n	80016c4 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0b0      	b.n	80016c4 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001562:	495b      	ldr	r1, [pc, #364]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 8001564:	4b5a      	ldr	r3, [pc, #360]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f023 0203 	bic.w	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001574:	f7fe fe92 	bl	800029c <HAL_GetTick>
 8001578:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d112      	bne.n	80015a8 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001582:	e00a      	b.n	800159a <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001584:	f7fe fe8a 	bl	800029c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e094      	b.n	80016c4 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800159a:	4b4d      	ldr	r3, [pc, #308]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d1ee      	bne.n	8001584 <HAL_RCC_ClockConfig+0xcc>
 80015a6:	e03e      	b.n	8001626 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d112      	bne.n	80015d6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b2:	f7fe fe73 	bl	800029c <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e07d      	b.n	80016c4 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c8:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d1ee      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xfa>
 80015d4:	e027      	b.n	8001626 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d11d      	bne.n	800161a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7fe fe5c 	bl	800029c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e066      	b.n	80016c4 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80015f6:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d1ee      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x128>
 8001602:	e010      	b.n	8001626 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001604:	f7fe fe4a 	bl	800029c <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e054      	b.n	80016c4 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1ee      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_RCC_ClockConfig+0x214>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 020f 	and.w	r2, r3, #15
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d90c      	bls.n	800164e <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <HAL_RCC_ClockConfig+0x214>)
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <HAL_RCC_ClockConfig+0x214>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 020f 	and.w	r2, r3, #15
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d001      	beq.n	800164e <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e03a      	b.n	80016c4 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	d008      	beq.n	800166c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800165a:	491d      	ldr	r1, [pc, #116]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001678:	4915      	ldr	r1, [pc, #84]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4313      	orrs	r3, r2
 800168a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800168c:	f000 f854 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 8001690:	4601      	mov	r1, r0
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_RCC_ClockConfig+0x218>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800169a:	23f0      	movs	r3, #240	; 0xf0
 800169c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	fab3 f383 	clz	r3, r3
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
 80016b0:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_RCC_ClockConfig+0x21c>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	fa21 f303 	lsr.w	r3, r1, r3
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_RCC_ClockConfig+0x220>)
 80016ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016bc:	2000      	movs	r0, #0
 80016be:	f7fe fdc3 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023c00 	.word	0x40023c00
 80016d0:	40023800 	.word	0x40023800
 80016d4:	0800329c 	.word	0x0800329c
 80016d8:	20000000 	.word	0x20000000

080016dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000000 	.word	0x20000000

080016f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80016fa:	f7ff ffef 	bl	80016dc <HAL_RCC_GetHCLKFreq>
 80016fe:	4601      	mov	r1, r0
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001708:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800170c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	603b      	str	r3, [r7, #0]
  return(result);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	080032ac 	.word	0x080032ac

08001738 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b093      	sub	sp, #76	; 0x4c
 800173c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllvco = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllp = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pllr = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	643b      	str	r3, [r7, #64]	; 0x40

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001752:	4b6c      	ldr	r3, [pc, #432]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b0c      	cmp	r3, #12
 800175c:	f200 80c8 	bhi.w	80018f0 <HAL_RCC_GetSysClockFreq+0x1b8>
 8001760:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <HAL_RCC_GetSysClockFreq+0x30>)
 8001762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001766:	bf00      	nop
 8001768:	0800179d 	.word	0x0800179d
 800176c:	080018f1 	.word	0x080018f1
 8001770:	080018f1 	.word	0x080018f1
 8001774:	080018f1 	.word	0x080018f1
 8001778:	080017a3 	.word	0x080017a3
 800177c:	080018f1 	.word	0x080018f1
 8001780:	080018f1 	.word	0x080018f1
 8001784:	080018f1 	.word	0x080018f1
 8001788:	080017a9 	.word	0x080017a9
 800178c:	080018f1 	.word	0x080018f1
 8001790:	080018f1 	.word	0x080018f1
 8001794:	080018f1 	.word	0x080018f1
 8001798:	0800184f 	.word	0x0800184f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800179c:	4b5a      	ldr	r3, [pc, #360]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1d0>)
 800179e:	643b      	str	r3, [r7, #64]	; 0x40
       break;
 80017a0:	e0a9      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x1be>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017a2:	4b5a      	ldr	r3, [pc, #360]	; (800190c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80017a4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80017a6:	e0a6      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x1be>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a8:	4b56      	ldr	r3, [pc, #344]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017b2:	4b54      	ldr	r3, [pc, #336]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d017      	beq.n	80017ee <HAL_RCC_GetSysClockFreq+0xb6>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80017be:	4a53      	ldr	r2, [pc, #332]	; (800190c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80017c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80017c6:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80017c8:	6859      	ldr	r1, [r3, #4]
 80017ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017ce:	400b      	ands	r3, r1
 80017d0:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80017d4:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017d8:	fa91 f1a1 	rbit	r1, r1
 80017dc:	62f9      	str	r1, [r7, #44]	; 0x2c
  return(result);
 80017de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017e0:	fab1 f181 	clz	r1, r1
 80017e4:	40cb      	lsrs	r3, r1
 80017e6:	fb03 f302 	mul.w	r3, r3, r2
 80017ea:	647b      	str	r3, [r7, #68]	; 0x44
 80017ec:	e016      	b.n	800181c <HAL_RCC_GetSysClockFreq+0xe4>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80017ee:	4a46      	ldr	r2, [pc, #280]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80017f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80017f6:	4b43      	ldr	r3, [pc, #268]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80017f8:	6859      	ldr	r1, [r3, #4]
 80017fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017fe:	400b      	ands	r3, r1
 8001800:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001804:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001808:	fa91 f1a1 	rbit	r1, r1
 800180c:	6279      	str	r1, [r7, #36]	; 0x24
  return(result);
 800180e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001810:	fab1 f181 	clz	r1, r1
 8001814:	40cb      	lsrs	r3, r1
 8001816:	fb03 f302 	mul.w	r3, r3, r2
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800181c:	4b39      	ldr	r3, [pc, #228]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001824:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	fa93 f3a3 	rbit	r3, r3
 8001830:	61fb      	str	r3, [r7, #28]
  return(result);
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
 800183c:	3301      	adds	r3, #1
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	63bb      	str	r3, [r7, #56]	; 0x38
      
      sysclockfreq = pllvco/pllp;
 8001842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800184c:	e053      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x1be>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001858:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d017      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0x15c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001864:	4a29      	ldr	r2, [pc, #164]	; (800190c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001868:	fbb2 f2f3 	udiv	r2, r2, r3
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800186e:	6859      	ldr	r1, [r3, #4]
 8001870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001874:	400b      	ands	r3, r1
 8001876:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800187a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	69b9      	ldr	r1, [r7, #24]
 800187e:	fa91 f1a1 	rbit	r1, r1
 8001882:	6179      	str	r1, [r7, #20]
  return(result);
 8001884:	6979      	ldr	r1, [r7, #20]
 8001886:	fab1 f181 	clz	r1, r1
 800188a:	40cb      	lsrs	r3, r1
 800188c:	fb03 f302 	mul.w	r3, r3, r2
 8001890:	647b      	str	r3, [r7, #68]	; 0x44
 8001892:	e016      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x18a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001894:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001898:	fbb2 f2f3 	udiv	r2, r2, r3
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018a4:	400b      	ands	r3, r1
 80018a6:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80018aa:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	6939      	ldr	r1, [r7, #16]
 80018ae:	fa91 f1a1 	rbit	r1, r1
 80018b2:	60f9      	str	r1, [r7, #12]
  return(result);
 80018b4:	68f9      	ldr	r1, [r7, #12]
 80018b6:	fab1 f181 	clz	r1, r1
 80018ba:	40cb      	lsrs	r3, r1
 80018bc:	fb03 f302 	mul.w	r3, r3, r2
 80018c0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80018ca:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80018ce:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	607b      	str	r3, [r7, #4]
  return(result);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
      
      sysclockfreq = pllvco/pllr;
 80018e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80018ee:	e002      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x1be>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80018f2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80018f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	374c      	adds	r7, #76	; 0x4c
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40023800 	.word	0x40023800
 8001908:	00f42400 	.word	0x00f42400
 800190c:	007a1200 	.word	0x007a1200

08001910 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b090      	sub	sp, #64	; 0x40
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8001918:	2300      	movs	r3, #0
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8083 	beq.w	8001a30 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800192a:	4b9f      	ldr	r3, [pc, #636]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b04      	cmp	r3, #4
 8001934:	d019      	beq.n	800196a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001936:	4b9c      	ldr	r3, [pc, #624]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800193e:	2b08      	cmp	r3, #8
 8001940:	d106      	bne.n	8001950 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001942:	4b99      	ldr	r3, [pc, #612]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800194e:	d00c      	beq.n	800196a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001950:	4b95      	ldr	r3, [pc, #596]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001958:	2b0c      	cmp	r3, #12
 800195a:	d112      	bne.n	8001982 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800195c:	4b92      	ldr	r3, [pc, #584]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001964:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001968:	d10b      	bne.n	8001982 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196a:	4b8f      	ldr	r3, [pc, #572]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d05b      	beq.n	8001a2e <HAL_RCC_OscConfig+0x11e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d157      	bne.n	8001a2e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e23e      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x8a>
 800198c:	4a86      	ldr	r2, [pc, #536]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 800198e:	4b86      	ldr	r3, [pc, #536]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	e01d      	b.n	80019d6 <HAL_RCC_OscConfig+0xc6>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a2:	d10c      	bne.n	80019be <HAL_RCC_OscConfig+0xae>
 80019a4:	4a80      	ldr	r2, [pc, #512]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019a6:	4b80      	ldr	r3, [pc, #512]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4a7d      	ldr	r2, [pc, #500]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019b2:	4b7d      	ldr	r3, [pc, #500]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	e00b      	b.n	80019d6 <HAL_RCC_OscConfig+0xc6>
 80019be:	4a7a      	ldr	r2, [pc, #488]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019c0:	4b79      	ldr	r3, [pc, #484]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	4a77      	ldr	r2, [pc, #476]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019cc:	4b76      	ldr	r3, [pc, #472]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d013      	beq.n	8001a06 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7fe fc5d 	bl	800029c <HAL_GetTick>
 80019e2:	63f8      	str	r0, [r7, #60]	; 0x3c
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e6:	f7fe fc59 	bl	800029c <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b64      	cmp	r3, #100	; 0x64
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e203      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f8:	4b6b      	ldr	r3, [pc, #428]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0xd6>
 8001a04:	e014      	b.n	8001a30 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7fe fc49 	bl	800029c <HAL_GetTick>
 8001a0a:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0e:	f7fe fc45 	bl	800029c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b64      	cmp	r3, #100	; 0x64
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e1ef      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a20:	4b61      	ldr	r3, [pc, #388]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f0      	bne.n	8001a0e <HAL_RCC_OscConfig+0xfe>
 8001a2c:	e000      	b.n	8001a30 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 8084 	beq.w	8001b46 <HAL_RCC_OscConfig+0x236>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a3e:	4b5a      	ldr	r3, [pc, #360]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d017      	beq.n	8001a7a <HAL_RCC_OscConfig+0x16a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a4a:	4b57      	ldr	r3, [pc, #348]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d105      	bne.n	8001a62 <HAL_RCC_OscConfig+0x152>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a56:	4b54      	ldr	r3, [pc, #336]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00b      	beq.n	8001a7a <HAL_RCC_OscConfig+0x16a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a62:	4b51      	ldr	r3, [pc, #324]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d126      	bne.n	8001abc <HAL_RCC_OscConfig+0x1ac>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d120      	bne.n	8001abc <HAL_RCC_OscConfig+0x1ac>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <HAL_RCC_OscConfig+0x182>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d001      	beq.n	8001a92 <HAL_RCC_OscConfig+0x182>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e1b6      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a92:	4845      	ldr	r0, [pc, #276]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a94:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6919      	ldr	r1, [r3, #16]
 8001aa0:	23f8      	movs	r3, #248	; 0xf8
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	e044      	b.n	8001b46 <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d02a      	beq.n	8001b1a <HAL_RCC_OscConfig+0x20a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac4:	4b39      	ldr	r3, [pc, #228]	; (8001bac <HAL_RCC_OscConfig+0x29c>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7fe fbe7 	bl	800029c <HAL_GetTick>
 8001ace:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1d4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7fe fbe3 	bl	800029c <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x1d4>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e18d      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x1c2>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	482d      	ldr	r0, [pc, #180]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6919      	ldr	r1, [r3, #16]
 8001afe:	23f8      	movs	r3, #248	; 0xf8
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	fab3 f383 	clz	r3, r3
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	6003      	str	r3, [r0, #0]
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x236>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_RCC_OscConfig+0x29c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7fe fbbc 	bl	800029c <HAL_GetTick>
 8001b24:	63f8      	str	r0, [r7, #60]	; 0x3c
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b28:	f7fe fbb8 	bl	800029c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e162      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x218>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d036      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d016      	beq.n	8001b88 <HAL_RCC_OscConfig+0x278>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_RCC_OscConfig+0x2a0>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7fe fb9c 	bl	800029c <HAL_GetTick>
 8001b64:	63f8      	str	r0, [r7, #60]	; 0x3c
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x26a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b68:	f7fe fb98 	bl	800029c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x26a>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e142      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x258>
 8001b86:	e01b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_OscConfig+0x2a0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7fe fb85 	bl	800029c <HAL_GetTick>
 8001b92:	63f8      	str	r0, [r7, #60]	; 0x3c
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	e00e      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b96:	f7fe fb81 	bl	800029c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d907      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x2a4>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e12b      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	42470000 	.word	0x42470000
 8001bb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	4b94      	ldr	r3, [pc, #592]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ea      	bne.n	8001b96 <HAL_RCC_OscConfig+0x286>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d07d      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	4a8d      	ldr	r2, [pc, #564]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001bd2:	4b8d      	ldr	r3, [pc, #564]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001be8:	4a88      	ldr	r2, [pc, #544]	; (8001e0c <HAL_RCC_OscConfig+0x4fc>)
 8001bea:	4b88      	ldr	r3, [pc, #544]	; (8001e0c <HAL_RCC_OscConfig+0x4fc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf2:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bf4:	f7fe fb52 	bl	800029c <HAL_GetTick>
 8001bf8:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x2fe>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bfc:	f7fe fb4e 	bl	800029c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x2fe>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0f8      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c0e:	4b7f      	ldr	r3, [pc, #508]	; (8001e0c <HAL_RCC_OscConfig+0x4fc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x2ec>
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d106      	bne.n	8001c30 <HAL_RCC_OscConfig+0x320>
 8001c22:	4a79      	ldr	r2, [pc, #484]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001c24:	4b78      	ldr	r3, [pc, #480]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2e:	e01c      	b.n	8001c6a <HAL_RCC_OscConfig+0x35a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d10c      	bne.n	8001c52 <HAL_RCC_OscConfig+0x342>
 8001c38:	4a73      	ldr	r2, [pc, #460]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3e:	f043 0304 	orr.w	r3, r3, #4
 8001c42:	6713      	str	r3, [r2, #112]	; 0x70
 8001c44:	4a70      	ldr	r2, [pc, #448]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001c46:	4b70      	ldr	r3, [pc, #448]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c50:	e00b      	b.n	8001c6a <HAL_RCC_OscConfig+0x35a>
 8001c52:	4a6d      	ldr	r2, [pc, #436]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	4b6c      	ldr	r3, [pc, #432]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5e:	4a6a      	ldr	r2, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	4b69      	ldr	r3, [pc, #420]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d015      	beq.n	8001c9e <HAL_RCC_OscConfig+0x38e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c72:	f7fe fb13 	bl	800029c <HAL_GetTick>
 8001c76:	63f8      	str	r0, [r7, #60]	; 0x3c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_OscConfig+0x380>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7fe fb0f 	bl	800029c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e0b7      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c90:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0ee      	beq.n	8001c7a <HAL_RCC_OscConfig+0x36a>
 8001c9c:	e014      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7fe fafd 	bl	800029c <HAL_GetTick>
 8001ca2:	63f8      	str	r0, [r7, #60]	; 0x3c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x3ac>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7fe faf9 	bl	800029c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x3ac>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0a1      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbc:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ee      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x396>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 8096 	beq.w	8001dfe <HAL_RCC_OscConfig+0x4ee>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cd2:	4b4d      	ldr	r3, [pc, #308]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	f000 808d 	beq.w	8001dfa <HAL_RCC_OscConfig+0x4ea>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d171      	bne.n	8001dcc <HAL_RCC_OscConfig+0x4bc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce8:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <HAL_RCC_OscConfig+0x500>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7fe fad5 	bl	800029c <HAL_GetTick>
 8001cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x3f8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7fe fad1 	bl	800029c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x3f8>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e07b      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d08:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e6>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d14:	483c      	ldr	r0, [pc, #240]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	1e59      	subs	r1, r3, #1
 8001d46:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001d4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	617b      	str	r3, [r7, #20]
  return(result);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d64:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	61fb      	str	r3, [r7, #28]
  return(result);
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fab3 f383 	clz	r3, r3
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d82:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <HAL_RCC_OscConfig+0x500>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7fe fa7a 	bl	800029c <HAL_GetTick>
 8001da8:	63f8      	str	r0, [r7, #60]	; 0x3c
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x4ae>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dac:	f7fe fa76 	bl	800029c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x4ae>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e020      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x49c>
 8001dca:	e018      	b.n	8001dfe <HAL_RCC_OscConfig+0x4ee>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dcc:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_RCC_OscConfig+0x500>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7fe fa63 	bl	800029c <HAL_GetTick>
 8001dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x4dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dda:	f7fe fa5f 	bl	800029c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x4dc>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e009      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x4ca>
 8001df8:	e001      	b.n	8001dfe <HAL_RCC_OscConfig+0x4ee>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
    }
  }
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3740      	adds	r7, #64	; 0x40
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	42470060 	.word	0x42470060

08001e14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e055      	b.n	8001ed2 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d106      	bne.n	8001e46 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f001 f80d 	bl	8002e60 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2202      	movs	r2, #2
 8001e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e5c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6851      	ldr	r1, [r2, #4]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6892      	ldr	r2, [r2, #8]
 8001e6a:	4311      	orrs	r1, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	68d2      	ldr	r2, [r2, #12]
 8001e70:	4311      	orrs	r1, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6912      	ldr	r2, [r2, #16]
 8001e76:	4311      	orrs	r1, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6952      	ldr	r2, [r2, #20]
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6992      	ldr	r2, [r2, #24]
 8001e82:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001e86:	4311      	orrs	r1, r2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	69d2      	ldr	r2, [r2, #28]
 8001e8c:	4311      	orrs	r1, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6a12      	ldr	r2, [r2, #32]
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6992      	ldr	r2, [r2, #24]
 8001ea4:	0c12      	lsrs	r2, r2, #16
 8001ea6:	f002 0104 	and.w	r1, r2, #4
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	69d2      	ldr	r2, [r2, #28]
 8001ebc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec0:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_TIM_OC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e01d      	b.n	8001f28 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d106      	bne.n	8001f06 <HAL_TIM_OC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f001 f8eb 	bl	80030dc <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3304      	adds	r3, #4
 8001f16:	4619      	mov	r1, r3
 8001f18:	4610      	mov	r0, r2
 8001f1a:	f000 f869 	bl	8001ff0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_TIM_OC_ConfigChannel+0x1a>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e04e      	b.n	8001fe8 <HAL_TIM_OC_ConfigChannel+0xb8>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2202      	movs	r2, #2
 8001f56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  switch (Channel)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d839      	bhi.n	8001fd4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8001f60:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <HAL_TIM_OC_ConfigChannel+0x38>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	08001f9d 	.word	0x08001f9d
 8001f6c:	08001fd5 	.word	0x08001fd5
 8001f70:	08001fd5 	.word	0x08001fd5
 8001f74:	08001fd5 	.word	0x08001fd5
 8001f78:	08001fab 	.word	0x08001fab
 8001f7c:	08001fd5 	.word	0x08001fd5
 8001f80:	08001fd5 	.word	0x08001fd5
 8001f84:	08001fd5 	.word	0x08001fd5
 8001f88:	08001fb9 	.word	0x08001fb9
 8001f8c:	08001fd5 	.word	0x08001fd5
 8001f90:	08001fd5 	.word	0x08001fd5
 8001f94:	08001fd5 	.word	0x08001fd5
 8001f98:	08001fc7 	.word	0x08001fc7
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f946 	bl	8002234 <TIM_OC1_SetConfig>
    }
    break;
 8001fa8:	e015      	b.n	8001fd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 f8c7 	bl	8002144 <TIM_OC2_SetConfig>
    }
    break;
 8001fb6:	e00e      	b.n	8001fd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f9ac 	bl	800231c <TIM_OC3_SetConfig>
    }
    break;
 8001fc4:	e007      	b.n	8001fd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fa1d 	bl	800240c <TIM_OC4_SetConfig>
    }
    break;
 8001fd2:	e000      	b.n	8001fd6 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    default:
    break;    
 8001fd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim); 
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a44      	ldr	r2, [pc, #272]	; (8002118 <TIM_Base_SetConfig+0x128>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d013      	beq.n	8002034 <TIM_Base_SetConfig+0x44>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002012:	d00f      	beq.n	8002034 <TIM_Base_SetConfig+0x44>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a41      	ldr	r2, [pc, #260]	; (800211c <TIM_Base_SetConfig+0x12c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00b      	beq.n	8002034 <TIM_Base_SetConfig+0x44>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a40      	ldr	r2, [pc, #256]	; (8002120 <TIM_Base_SetConfig+0x130>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d007      	beq.n	8002034 <TIM_Base_SetConfig+0x44>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3f      	ldr	r2, [pc, #252]	; (8002124 <TIM_Base_SetConfig+0x134>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d003      	beq.n	8002034 <TIM_Base_SetConfig+0x44>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3e      	ldr	r2, [pc, #248]	; (8002128 <TIM_Base_SetConfig+0x138>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d101      	bne.n	8002038 <TIM_Base_SetConfig+0x48>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <TIM_Base_SetConfig+0x4a>
 8002038:	2300      	movs	r3, #0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a31      	ldr	r2, [pc, #196]	; (8002118 <TIM_Base_SetConfig+0x128>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d02b      	beq.n	80020b0 <TIM_Base_SetConfig+0xc0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205e:	d027      	beq.n	80020b0 <TIM_Base_SetConfig+0xc0>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a2e      	ldr	r2, [pc, #184]	; (800211c <TIM_Base_SetConfig+0x12c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d023      	beq.n	80020b0 <TIM_Base_SetConfig+0xc0>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a2d      	ldr	r2, [pc, #180]	; (8002120 <TIM_Base_SetConfig+0x130>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d01f      	beq.n	80020b0 <TIM_Base_SetConfig+0xc0>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a2c      	ldr	r2, [pc, #176]	; (8002124 <TIM_Base_SetConfig+0x134>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d01b      	beq.n	80020b0 <TIM_Base_SetConfig+0xc0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a2b      	ldr	r2, [pc, #172]	; (8002128 <TIM_Base_SetConfig+0x138>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d017      	beq.n	80020b0 <TIM_Base_SetConfig+0xc0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a2a      	ldr	r2, [pc, #168]	; (800212c <TIM_Base_SetConfig+0x13c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <TIM_Base_SetConfig+0xc0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a29      	ldr	r2, [pc, #164]	; (8002130 <TIM_Base_SetConfig+0x140>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d00f      	beq.n	80020b0 <TIM_Base_SetConfig+0xc0>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <TIM_Base_SetConfig+0x144>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00b      	beq.n	80020b0 <TIM_Base_SetConfig+0xc0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a27      	ldr	r2, [pc, #156]	; (8002138 <TIM_Base_SetConfig+0x148>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d007      	beq.n	80020b0 <TIM_Base_SetConfig+0xc0>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a26      	ldr	r2, [pc, #152]	; (800213c <TIM_Base_SetConfig+0x14c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d003      	beq.n	80020b0 <TIM_Base_SetConfig+0xc0>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a25      	ldr	r2, [pc, #148]	; (8002140 <TIM_Base_SetConfig+0x150>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <TIM_Base_SetConfig+0xc4>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <TIM_Base_SetConfig+0xc6>
 80020b4:	2300      	movs	r3, #0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d008      	beq.n	80020cc <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <TIM_Base_SetConfig+0x128>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d003      	beq.n	80020f2 <TIM_Base_SetConfig+0x102>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <TIM_Base_SetConfig+0x138>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <TIM_Base_SetConfig+0x106>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <TIM_Base_SetConfig+0x108>
 80020f6:	2300      	movs	r3, #0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	615a      	str	r2, [r3, #20]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40010400 	.word	0x40010400
 800212c:	40014000 	.word	0x40014000
 8002130:	40014400 	.word	0x40014400
 8002134:	40014800 	.word	0x40014800
 8002138:	40001800 	.word	0x40001800
 800213c:	40001c00 	.word	0x40001c00
 8002140:	40002000 	.word	0x40002000

08002144 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	f023 0210 	bic.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800217e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002186:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f023 0320 	bic.w	r3, r3, #32
 800219a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a20      	ldr	r2, [pc, #128]	; (800222c <TIM_OC2_SetConfig+0xe8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_OC2_SetConfig+0x74>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <TIM_OC2_SetConfig+0xec>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <TIM_OC2_SetConfig+0x78>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <TIM_OC2_SetConfig+0x7a>
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d021      	beq.n	8002206 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021dc:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	621a      	str	r2, [r3, #32]
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40010000 	.word	0x40010000
 8002230:	40010400 	.word	0x40010400

08002234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	f023 0201 	bic.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f023 0303 	bic.w	r3, r3, #3
 8002276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f023 0302 	bic.w	r3, r3, #2
 8002288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4313      	orrs	r3, r2
 8002292:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <TIM_OC1_SetConfig+0xe0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <TIM_OC1_SetConfig+0x70>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <TIM_OC1_SetConfig+0xe4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d101      	bne.n	80022a8 <TIM_OC1_SetConfig+0x74>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <TIM_OC1_SetConfig+0x76>
 80022a8:	2300      	movs	r3, #0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d01e      	beq.n	80022ec <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f023 0308 	bic.w	r3, r3, #8
 80022b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f023 0304 	bic.w	r3, r3, #4
 80022c6:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	621a      	str	r2, [r3, #32]
} 
 8002306:	bf00      	nop
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40010000 	.word	0x40010000
 8002318:	40010400 	.word	0x40010400

0800231c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0303 	bic.w	r3, r3, #3
 800235e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a20      	ldr	r2, [pc, #128]	; (8002404 <TIM_OC3_SetConfig+0xe8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d003      	beq.n	800238e <TIM_OC3_SetConfig+0x72>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <TIM_OC3_SetConfig+0xec>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <TIM_OC3_SetConfig+0x76>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <TIM_OC3_SetConfig+0x78>
 8002392:	2300      	movs	r3, #0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d021      	beq.n	80023dc <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800239e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023b2:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	621a      	str	r2, [r3, #32]
}
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40010000 	.word	0x40010000
 8002408:	40010400 	.word	0x40010400

0800240c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002446:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244e:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002462:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	031b      	lsls	r3, r3, #12
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <TIM_OC4_SetConfig+0xb8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d003      	beq.n	8002480 <TIM_OC4_SetConfig+0x74>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <TIM_OC4_SetConfig+0xbc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d101      	bne.n	8002484 <TIM_OC4_SetConfig+0x78>
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <TIM_OC4_SetConfig+0x7a>
 8002484:	2300      	movs	r3, #0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002490:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	019b      	lsls	r3, r3, #6
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	621a      	str	r2, [r3, #32]
}
 80024b8:	bf00      	nop
 80024ba:	371c      	adds	r7, #28
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	40010000 	.word	0x40010000
 80024c8:	40010400 	.word	0x40010400

080024cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e032      	b.n	800254a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	6852      	ldr	r2, [r2, #4]
 80024fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002502:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	6851      	ldr	r1, [r2, #4]
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	6892      	ldr	r2, [r2, #8]
 8002520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002524:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	6891      	ldr	r1, [r2, #8]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	6852      	ldr	r2, [r2, #4]
 8002534:	430a      	orrs	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
} 
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800256e:	2302      	movs	r3, #2
 8002570:	e044      	b.n	80025fc <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 800260e:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <MX_ADC1_Init+0x98>)
 8002610:	4a24      	ldr	r2, [pc, #144]	; (80026a4 <MX_ADC1_Init+0x9c>)
 8002612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <MX_ADC1_Init+0x98>)
 8002616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800261a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800261c:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <MX_ADC1_Init+0x98>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002622:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <MX_ADC1_Init+0x98>)
 8002624:	2201      	movs	r2, #1
 8002626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002628:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <MX_ADC1_Init+0x98>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <MX_ADC1_Init+0x98>)
 8002630:	2201      	movs	r2, #1
 8002632:	621a      	str	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <MX_ADC1_Init+0x98>)
 8002636:	2201      	movs	r2, #1
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800263a:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <MX_ADC1_Init+0x98>)
 800263c:	2200      	movs	r2, #0
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <MX_ADC1_Init+0x98>)
 8002642:	4a19      	ldr	r2, [pc, #100]	; (80026a8 <MX_ADC1_Init+0xa0>)
 8002644:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <MX_ADC1_Init+0x98>)
 8002648:	2200      	movs	r2, #0
 800264a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <MX_ADC1_Init+0x98>)
 800264e:	2201      	movs	r2, #1
 8002650:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <MX_ADC1_Init+0x98>)
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_ADC1_Init+0x98>)
 800265a:	2201      	movs	r2, #1
 800265c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800265e:	4810      	ldr	r0, [pc, #64]	; (80026a0 <MX_ADC1_Init+0x98>)
 8002660:	f7fd fe45 	bl	80002ee <HAL_ADC_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <MX_ADC1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800266a:	2149      	movs	r1, #73	; 0x49
 800266c:	480f      	ldr	r0, [pc, #60]	; (80026ac <MX_ADC1_Init+0xa4>)
 800266e:	f000 fad5 	bl	8002c1c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_7;
 8002672:	2307      	movs	r3, #7
 8002674:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002676:	2301      	movs	r3, #1
 8002678:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800267e:	463b      	mov	r3, r7
 8002680:	4619      	mov	r1, r3
 8002682:	4807      	ldr	r0, [pc, #28]	; (80026a0 <MX_ADC1_Init+0x98>)
 8002684:	f7fd ffde 	bl	8000644 <HAL_ADC_ConfigChannel>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <MX_ADC1_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800268e:	2153      	movs	r1, #83	; 0x53
 8002690:	4806      	ldr	r0, [pc, #24]	; (80026ac <MX_ADC1_Init+0xa4>)
 8002692:	f000 fac3 	bl	8002c1c <_Error_Handler>
  }

}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000024 	.word	0x20000024
 80026a4:	40012000 	.word	0x40012000
 80026a8:	0f000001 	.word	0x0f000001
 80026ac:	08003218 	.word	0x08003218

080026b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a16      	ldr	r2, [pc, #88]	; (8002718 <HAL_ADC_MspInit+0x68>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d125      	bne.n	800270e <HAL_ADC_MspInit+0x5e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	4a15      	ldr	r2, [pc, #84]	; (800271c <HAL_ADC_MspInit+0x6c>)
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <HAL_ADC_MspInit+0x6c>)
 80026ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_ADC_MspInit+0x6c>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 80026de:	2317      	movs	r3, #23
 80026e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e2:	2303      	movs	r3, #3
 80026e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	4619      	mov	r1, r3
 80026f0:	480b      	ldr	r0, [pc, #44]	; (8002720 <HAL_ADC_MspInit+0x70>)
 80026f2:	f7fe fc05 	bl	8000f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80026f6:	23cf      	movs	r3, #207	; 0xcf
 80026f8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026fa:	2303      	movs	r3, #3
 80026fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002702:	f107 030c 	add.w	r3, r7, #12
 8002706:	4619      	mov	r1, r3
 8002708:	4806      	ldr	r0, [pc, #24]	; (8002724 <HAL_ADC_MspInit+0x74>)
 800270a:	f7fe fbf9 	bl	8000f00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800270e:	bf00      	nop
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40012000 	.word	0x40012000
 800271c:	40023800 	.word	0x40023800
 8002720:	40020800 	.word	0x40020800
 8002724:	40020000 	.word	0x40020000

08002728 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  // These settings should make the CAN bus run at 500 kb/s with a
  // sample point at 86.7%. Each bit will contain a total of 15 time
  // quanta. The value of the BTR register corresponding to these
  // settings should be 0x001b0005. Values calculated using the
  // calculator http://www.bittiming.can-wiki.info/.
  hcan1.Instance = CAN1;
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <MX_CAN1_Init+0x6c>)
 800272e:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <MX_CAN1_Init+0x70>)
 8002730:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8002732:	4b18      	ldr	r3, [pc, #96]	; (8002794 <MX_CAN1_Init+0x6c>)
 8002734:	2205      	movs	r2, #5
 8002736:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002738:	4b16      	ldr	r3, [pc, #88]	; (8002794 <MX_CAN1_Init+0x6c>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SJW = CAN_SJW_4TQ;
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <MX_CAN1_Init+0x6c>)
 8002740:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8002744:	60da      	str	r2, [r3, #12]
  hcan1.Init.BS1 = CAN_BS1_12TQ;
 8002746:	4b13      	ldr	r3, [pc, #76]	; (8002794 <MX_CAN1_Init+0x6c>)
 8002748:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800274c:	611a      	str	r2, [r3, #16]
  hcan1.Init.BS2 = CAN_BS2_2TQ;
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <MX_CAN1_Init+0x6c>)
 8002750:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002754:	615a      	str	r2, [r3, #20]
  hcan1.Init.TTCM = DISABLE;
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <MX_CAN1_Init+0x6c>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  hcan1.Init.ABOM = DISABLE;
 800275c:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <MX_CAN1_Init+0x6c>)
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
  hcan1.Init.AWUM = DISABLE;
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <MX_CAN1_Init+0x6c>)
 8002764:	2200      	movs	r2, #0
 8002766:	621a      	str	r2, [r3, #32]
  hcan1.Init.NART = DISABLE;
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <MX_CAN1_Init+0x6c>)
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <MX_CAN1_Init+0x6c>)
 8002770:	2200      	movs	r2, #0
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 8002774:	4b07      	ldr	r3, [pc, #28]	; (8002794 <MX_CAN1_Init+0x6c>)
 8002776:	2200      	movs	r2, #0
 8002778:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800277a:	4806      	ldr	r0, [pc, #24]	; (8002794 <MX_CAN1_Init+0x6c>)
 800277c:	f7fe f98e 	bl	8000a9c <HAL_CAN_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <MX_CAN1_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002786:	2149      	movs	r1, #73	; 0x49
 8002788:	4804      	ldr	r0, [pc, #16]	; (800279c <MX_CAN1_Init+0x74>)
 800278a:	f000 fa47 	bl	8002c1c <_Error_Handler>
  }

}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	2000006c 	.word	0x2000006c
 8002798:	40006400 	.word	0x40006400
 800279c:	08003228 	.word	0x08003228

080027a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <HAL_CAN_MspInit+0x58>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d11e      	bne.n	80027f0 <HAL_CAN_MspInit+0x50>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4a11      	ldr	r2, [pc, #68]	; (80027fc <HAL_CAN_MspInit+0x5c>)
 80027b8:	4b10      	ldr	r3, [pc, #64]	; (80027fc <HAL_CAN_MspInit+0x5c>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <HAL_CAN_MspInit+0x5c>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
  
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027dc:	2303      	movs	r3, #3
 80027de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80027e0:	2309      	movs	r3, #9
 80027e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e4:	f107 030c 	add.w	r3, r7, #12
 80027e8:	4619      	mov	r1, r3
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <HAL_CAN_MspInit+0x60>)
 80027ec:	f7fe fb88 	bl	8000f00 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80027f0:	bf00      	nop
 80027f2:	3720      	adds	r7, #32
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40006400 	.word	0x40006400
 80027fc:	40023800 	.word	0x40023800
 8002800:	40020000 	.word	0x40020000

08002804 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	4a25      	ldr	r2, [pc, #148]	; (80028a4 <MX_GPIO_Init+0xa0>)
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <MX_GPIO_Init+0xa0>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <MX_GPIO_Init+0xa0>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <MX_GPIO_Init+0xa0>)
 800282c:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <MX_GPIO_Init+0xa0>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <MX_GPIO_Init+0xa0>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <MX_GPIO_Init+0xa0>)
 8002848:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <MX_GPIO_Init+0xa0>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <MX_GPIO_Init+0xa0>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <MX_GPIO_Init+0xa0>)
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <MX_GPIO_Init+0xa0>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f043 0310 	orr.w	r3, r3, #16
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <MX_GPIO_Init+0xa0>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <MX_GPIO_Init+0xa0>)
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <MX_GPIO_Init+0xa0>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <MX_GPIO_Init+0xa0>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]

}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800

080028a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <MX_I2C1_Init+0x54>)
 80028ae:	4a14      	ldr	r2, [pc, #80]	; (8002900 <MX_I2C1_Init+0x58>)
 80028b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <MX_I2C1_Init+0x54>)
 80028b4:	4a13      	ldr	r2, [pc, #76]	; (8002904 <MX_I2C1_Init+0x5c>)
 80028b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <MX_I2C1_Init+0x54>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <MX_I2C1_Init+0x54>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028c4:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <MX_I2C1_Init+0x54>)
 80028c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <MX_I2C1_Init+0x54>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <MX_I2C1_Init+0x54>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <MX_I2C1_Init+0x54>)
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <MX_I2C1_Init+0x54>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028e4:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_I2C1_Init+0x54>)
 80028e6:	f7fe fc9d 	bl	8001224 <HAL_I2C_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 80028f0:	2142      	movs	r1, #66	; 0x42
 80028f2:	4805      	ldr	r0, [pc, #20]	; (8002908 <MX_I2C1_Init+0x60>)
 80028f4:	f000 f992 	bl	8002c1c <_Error_Handler>
  }

}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	200000b0 	.word	0x200000b0
 8002900:	40005400 	.word	0x40005400
 8002904:	000186a0 	.word	0x000186a0
 8002908:	08003238 	.word	0x08003238

0800290c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <HAL_I2C_MspInit+0x58>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d11d      	bne.n	800295a <HAL_I2C_MspInit+0x4e>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800291e:	23c0      	movs	r3, #192	; 0xc0
 8002920:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002922:	2312      	movs	r3, #18
 8002924:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002926:	2301      	movs	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800292e:	2304      	movs	r3, #4
 8002930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	4619      	mov	r1, r3
 8002938:	480b      	ldr	r0, [pc, #44]	; (8002968 <HAL_I2C_MspInit+0x5c>)
 800293a:	f7fe fae1 	bl	8000f00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <HAL_I2C_MspInit+0x60>)
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_I2C_MspInit+0x60>)
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <HAL_I2C_MspInit+0x60>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800295a:	bf00      	nop
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40005400 	.word	0x40005400
 8002968:	40020400 	.word	0x40020400
 800296c:	40023800 	.word	0x40023800

08002970 <updatePressure>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
int updatePressure(int sensorNum)
{
 8002970:	b5b0      	push	{r4, r5, r7, lr}
 8002972:	b090      	sub	sp, #64	; 0x40
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	int chanList[] = {ADC_CHANNEL_0, ADC_CHANNEL_1, ADC_CHANNEL_2,
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <updatePressure+0x6c>)
 800297a:	f107 041c 	add.w	r4, r7, #28
 800297e:	461d      	mov	r5, r3
 8002980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	6023      	str	r3, [r4, #0]
			ADC_CHANNEL_6, ADC_CHANNEL_7, ADC_CHANNEL_10, ADC_CHANNEL_11,
			ADC_CHANNEL_12, ADC_CHANNEL_14};
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = chanList[sensorNum - 1];
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002996:	4413      	add	r3, r2
 8002998:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800299c:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 800299e:	2301      	movs	r3, #1
 80029a0:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80029a2:	2304      	movs	r3, #4
 80029a4:	617b      	str	r3, [r7, #20]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	4619      	mov	r1, r3
 80029ac:	480c      	ldr	r0, [pc, #48]	; (80029e0 <updatePressure+0x70>)
 80029ae:	f7fd fe49 	bl	8000644 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&hadc1);
 80029b2:	480b      	ldr	r0, [pc, #44]	; (80029e0 <updatePressure+0x70>)
 80029b4:	f7fd fcde 	bl	8000374 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295
 80029bc:	4808      	ldr	r0, [pc, #32]	; (80029e0 <updatePressure+0x70>)
 80029be:	f7fd fdb2 	bl	8000526 <HAL_ADC_PollForConversion>
	volatile int value = HAL_ADC_GetValue(&hadc1);
 80029c2:	4807      	ldr	r0, [pc, #28]	; (80029e0 <updatePressure+0x70>)
 80029c4:	f7fd fe31 	bl	800062a <HAL_ADC_GetValue>
 80029c8:	4603      	mov	r3, r0
 80029ca:	60bb      	str	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 80029cc:	4804      	ldr	r0, [pc, #16]	; (80029e0 <updatePressure+0x70>)
 80029ce:	f7fd fd77 	bl	80004c0 <HAL_ADC_Stop>

	return value;
 80029d2:	68bb      	ldr	r3, [r7, #8]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3740      	adds	r7, #64	; 0x40
 80029d8:	46bd      	mov	sp, r7
 80029da:	bdb0      	pop	{r4, r5, r7, pc}
 80029dc:	08003248 	.word	0x08003248
 80029e0:	20000024 	.word	0x20000024

080029e4 <sendCANmsg>:

void sendCANmsg(int sensorNum, int value)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
	uint16_t msgID = create_ID(BOARD_ID, sensorNum); // e.g. Sends pressure value at reading 1.
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4619      	mov	r1, r3
 80029f4:	2001      	movs	r0, #1
 80029f6:	f000 f93f 	bl	8002c78 <create_ID>
 80029fa:	4603      	mov	r3, r0
 80029fc:	82fb      	strh	r3, [r7, #22]
	can_msg_t msg;

	CAN_short_msg(&msg, msgID, value);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	8af9      	ldrh	r1, [r7, #22]
 8002a04:	f107 0308 	add.w	r3, r7, #8
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f96b 	bl	8002ce4 <CAN_short_msg>

	while (!CAN_can_transmit()) {	  };
 8002a0e:	bf00      	nop
 8002a10:	f000 f950 	bl	8002cb4 <CAN_can_transmit>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f083 0301 	eor.w	r3, r3, #1
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f7      	bne.n	8002a10 <sendCANmsg+0x2c>

	CAN_queue_transmit(&msg);
 8002a20:	f107 0308 	add.w	r3, r7, #8
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 f977 	bl	8002d18 <CAN_queue_transmit>
	HAL_Delay(10);
 8002a2a:	200a      	movs	r0, #10
 8002a2c:	f7fd fc42 	bl	80002b4 <HAL_Delay>
}
 8002a30:	bf00      	nop
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <main>:

/* USER CODE END 0 */

int main(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a3e:	f7fd fbe1 	bl	8000204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a42:	f000 f86b 	bl	8002b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a46:	f7ff fedd 	bl	8002804 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002a4a:	f7ff fddd 	bl	8002608 <MX_ADC1_Init>
  MX_CAN1_Init();
 8002a4e:	f7ff fe6b 	bl	8002728 <MX_CAN1_Init>
  MX_I2C1_Init();
 8002a52:	f7ff ff29 	bl	80028a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002a56:	f000 f9c9 	bl	8002dec <MX_SPI1_Init>
  MX_TIM1_Init();
 8002a5a:	f000 facb 	bl	8002ff4 <MX_TIM1_Init>

  /* USER CODE BEGIN 2 */
  Init_MyCAN();
 8002a5e:	f000 f8e3 	bl	8002c28 <Init_MyCAN>
  {
	  /*HAL_ADC_Start(&hadc1);
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	  volatile int value = HAL_ADC_GetValue(&hadc1);
	  HAL_ADC_Stop(&hadc1);*/
	  volatile int value1 = updatePressure(1);
 8002a62:	2001      	movs	r0, #1
 8002a64:	f7ff ff84 	bl	8002970 <updatePressure>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
	  volatile int value2 = updatePressure(2);
 8002a6c:	2002      	movs	r0, #2
 8002a6e:	f7ff ff7f 	bl	8002970 <updatePressure>
 8002a72:	4603      	mov	r3, r0
 8002a74:	623b      	str	r3, [r7, #32]
	  volatile int value3 = updatePressure(3);
 8002a76:	2003      	movs	r0, #3
 8002a78:	f7ff ff7a 	bl	8002970 <updatePressure>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	61fb      	str	r3, [r7, #28]
	  volatile int value4 = updatePressure(4);
 8002a80:	2004      	movs	r0, #4
 8002a82:	f7ff ff75 	bl	8002970 <updatePressure>
 8002a86:	4603      	mov	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]
	  volatile int value5 = updatePressure(5);
 8002a8a:	2005      	movs	r0, #5
 8002a8c:	f7ff ff70 	bl	8002970 <updatePressure>
 8002a90:	4603      	mov	r3, r0
 8002a92:	617b      	str	r3, [r7, #20]
	  volatile int value6 = updatePressure(6);
 8002a94:	2006      	movs	r0, #6
 8002a96:	f7ff ff6b 	bl	8002970 <updatePressure>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	613b      	str	r3, [r7, #16]
	  volatile int value7 = updatePressure(7);
 8002a9e:	2007      	movs	r0, #7
 8002aa0:	f7ff ff66 	bl	8002970 <updatePressure>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	60fb      	str	r3, [r7, #12]
	  volatile int value8 = updatePressure(8);
 8002aa8:	2008      	movs	r0, #8
 8002aaa:	f7ff ff61 	bl	8002970 <updatePressure>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	60bb      	str	r3, [r7, #8]
	  volatile int value9 = updatePressure(9);
 8002ab2:	2009      	movs	r0, #9
 8002ab4:	f7ff ff5c 	bl	8002970 <updatePressure>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	607b      	str	r3, [r7, #4]
	  CAN_short_msg(&msg, msgID, value1);
	  while (!CAN_can_transmit()) {	  };
	  CAN_queue_transmit(&msg);
	  HAL_delay(10);*/

	  sendCANmsg(1, value1);
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	4619      	mov	r1, r3
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7ff ff8f 	bl	80029e4 <sendCANmsg>
	  sendCANmsg(2, value2);
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	2002      	movs	r0, #2
 8002acc:	f7ff ff8a 	bl	80029e4 <sendCANmsg>
	  sendCANmsg(3, value3);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f7ff ff85 	bl	80029e4 <sendCANmsg>
	  sendCANmsg(4, value4);
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4619      	mov	r1, r3
 8002ade:	2004      	movs	r0, #4
 8002ae0:	f7ff ff80 	bl	80029e4 <sendCANmsg>
	  sendCANmsg(5, value5);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	2005      	movs	r0, #5
 8002aea:	f7ff ff7b 	bl	80029e4 <sendCANmsg>
	  sendCANmsg(6, value6);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4619      	mov	r1, r3
 8002af2:	2006      	movs	r0, #6
 8002af4:	f7ff ff76 	bl	80029e4 <sendCANmsg>
	  sendCANmsg(7, value7);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4619      	mov	r1, r3
 8002afc:	2007      	movs	r0, #7
 8002afe:	f7ff ff71 	bl	80029e4 <sendCANmsg>
	  sendCANmsg(8, value8);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4619      	mov	r1, r3
 8002b06:	2008      	movs	r0, #8
 8002b08:	f7ff ff6c 	bl	80029e4 <sendCANmsg>
	  sendCANmsg(9, value9);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	2009      	movs	r0, #9
 8002b12:	f7ff ff67 	bl	80029e4 <sendCANmsg>

	  volatile int breakpoint = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	603b      	str	r3, [r7, #0]
  {
 8002b1a:	e7a2      	b.n	8002a62 <main+0x2a>

08002b1c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b094      	sub	sp, #80	; 0x50
 8002b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	4a39      	ldr	r2, [pc, #228]	; (8002c0c <SystemClock_Config+0xf0>)
 8002b28:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <SystemClock_Config+0xf0>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <SystemClock_Config+0xf0>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	4a33      	ldr	r2, [pc, #204]	; (8002c10 <SystemClock_Config+0xf4>)
 8002b44:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <SystemClock_Config+0xf4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b30      	ldr	r3, [pc, #192]	; (8002c10 <SystemClock_Config+0xf4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b64:	2302      	movs	r3, #2
 8002b66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b6e:	2304      	movs	r3, #4
 8002b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002b72:	23b4      	movs	r3, #180	; 0xb4
 8002b74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b76:	2302      	movs	r3, #2
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fec2 	bl	8001910 <HAL_RCC_OscConfig>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b92:	21d6      	movs	r1, #214	; 0xd6
 8002b94:	481f      	ldr	r0, [pc, #124]	; (8002c14 <SystemClock_Config+0xf8>)
 8002b96:	f000 f841 	bl	8002c1c <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b9a:	f7fe fc23 	bl	80013e4 <HAL_PWREx_EnableOverDrive>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <SystemClock_Config+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ba4:	21dd      	movs	r1, #221	; 0xdd
 8002ba6:	481b      	ldr	r0, [pc, #108]	; (8002c14 <SystemClock_Config+0xf8>)
 8002ba8:	f000 f838 	bl	8002c1c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bac:	230f      	movs	r3, #15
 8002bae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002bc4:	f107 0308 	add.w	r3, r7, #8
 8002bc8:	2105      	movs	r1, #5
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fc74 	bl	80014b8 <HAL_RCC_ClockConfig>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <SystemClock_Config+0xc2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002bd6:	21eb      	movs	r1, #235	; 0xeb
 8002bd8:	480e      	ldr	r0, [pc, #56]	; (8002c14 <SystemClock_Config+0xf8>)
 8002bda:	f000 f81f 	bl	8002c1c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002bde:	f7fe fd7d 	bl	80016dc <HAL_RCC_GetHCLKFreq>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <SystemClock_Config+0xfc>)
 8002be6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bea:	099b      	lsrs	r3, r3, #6
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe f950 	bl	8000e92 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002bf2:	2004      	movs	r0, #4
 8002bf4:	f7fe f95a 	bl	8000eac <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f7fe f92b 	bl	8000e5a <HAL_NVIC_SetPriority>
}
 8002c04:	bf00      	nop
 8002c06:	3750      	adds	r7, #80	; 0x50
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40007000 	.word	0x40007000
 8002c14:	0800326c 	.word	0x0800326c
 8002c18:	10624dd3 	.word	0x10624dd3

08002c1c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8002c26:	e7fe      	b.n	8002c26 <_Error_Handler+0xa>

08002c28 <Init_MyCAN>:
#include "stm32f4xx_hal.h"

#include "mycan.h"

void Init_MyCAN()
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
	CAN1->MCR &= ~1;
 8002c2c:	4a11      	ldr	r2, [pc, #68]	; (8002c74 <Init_MyCAN+0x4c>)
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <Init_MyCAN+0x4c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6013      	str	r3, [r2, #0]
  	CAN1->sFilterRegister[0].FR1 = 0;
 8002c38:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <Init_MyCAN+0x4c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 	CAN1->sFilterRegister[0].FR2 = 0;
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <Init_MyCAN+0x4c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 	CAN1->FA1R = 1;
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <Init_MyCAN+0x4c>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 	CAN1->FS1R = 1;
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <Init_MyCAN+0x4c>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 	CAN1->FMR &= ~1;
 8002c58:	4a06      	ldr	r2, [pc, #24]	; (8002c74 <Init_MyCAN+0x4c>)
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <Init_MyCAN+0x4c>)
 8002c5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40006400 	.word	0x40006400

08002c78 <create_ID>:

uint16_t create_ID(uint16_t board, uint16_t type)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	460a      	mov	r2, r1
 8002c82:	80fb      	strh	r3, [r7, #6]
 8002c84:	4613      	mov	r3, r2
 8002c86:	80bb      	strh	r3, [r7, #4]
	return (((uint16_t)(board << 6) & 0b0000011111000000) | ((uint16_t)type & 0b00111111));
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	019b      	lsls	r3, r3, #6
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	b21b      	sxth	r3, r3
 8002c90:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002c94:	b21a      	sxth	r2, r3
 8002c96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	b29b      	uxth	r3, r3
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <CAN_can_transmit>:
    uint16_t identifier = create_ID(board, MID_ACKNOWLEDGE);
    uint16_t payload = id;
    CAN_short_msg(msg, identifier, payload);
}*/

bool CAN_can_transmit() {
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
	// Retrieve mailbox empty bits from CAN transmit register
	int empty_flags = (CAN1->TSR >> 26) & 0x07;
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <CAN_can_transmit+0x2c>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	0e9b      	lsrs	r3, r3, #26
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	607b      	str	r3, [r7, #4]

	// Check that at least one mailbox is empty
	return (empty_flags != 0x00);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf14      	ite	ne
 8002ccc:	2301      	movne	r3, #1
 8002cce:	2300      	moveq	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40006400 	.word	0x40006400

08002ce4 <CAN_short_msg>:
void CAN_byte_msg(can_msg_t *msg, uint16_t identifier, uint8_t data) {
	msg->identifier = identifier;
	msg->data_length = 1;
	*(uint8_t*)(msg->data + 7) = data;
}
void CAN_short_msg(can_msg_t *msg, uint16_t identifier, uint16_t data) {
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	803b      	strh	r3, [r7, #0]
	msg->identifier = identifier;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	887a      	ldrh	r2, [r7, #2]
 8002cf8:	805a      	strh	r2, [r3, #2]
	msg->data_length = 2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	701a      	strb	r2, [r3, #0]
	*(uint16_t*)(msg->data + 6) = data;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	3306      	adds	r3, #6
 8002d06:	883a      	ldrh	r2, [r7, #0]
 8002d08:	801a      	strh	r2, [r3, #0]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <CAN_queue_transmit>:
}
uint32_t CAN_decode_long(can_msg_t *msg) {
 return (msg->data[4] << 24) | (msg->data[5] << 16) | (msg->data[6] << 8) | msg->data[7];
}

bool CAN_queue_transmit(can_msg_t *msg) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	// Check if at least one mailbox is available
	if (CAN_can_transmit()) {
 8002d20:	f7ff ffc8 	bl	8002cb4 <CAN_can_transmit>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d059      	beq.n	8002dde <CAN_queue_transmit+0xc6>

		// Find an available mailbox
		int mailbox = (CAN1->TSR >> 24) & 0x03;
 8002d2a:	4b2f      	ldr	r3, [pc, #188]	; (8002de8 <CAN_queue_transmit+0xd0>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0e1b      	lsrs	r3, r3, #24
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	61fb      	str	r3, [r7, #28]

		int identifier_reg = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
		int dat_len_reg = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
		int dat_low_reg = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
		int dat_high_reg = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]

		// Setup transmit register for data frame with standard identifier
		identifier_reg |= (msg->identifier << 21);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	885b      	ldrh	r3, [r3, #2]
 8002d4a:	055b      	lsls	r3, r3, #21
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
		// Request start of transmission
		identifier_reg |= 0x01;
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	61bb      	str	r3, [r7, #24]

		// Setup data length register with no timestamp
		dat_len_reg = msg->data_length;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	617b      	str	r3, [r7, #20]

		// Setup low data register with data[4] & data[5] & data[6] & data[7] (concat)
		dat_low_reg = (msg->data[4] << 24) | (msg->data[5] << 16) | (msg->data[6] << 8) | (msg->data[7]);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7a1b      	ldrb	r3, [r3, #8]
 8002d64:	061a      	lsls	r2, r3, #24
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7a5b      	ldrb	r3, [r3, #9]
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7a9b      	ldrb	r3, [r3, #10]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	4313      	orrs	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	7ad2      	ldrb	r2, [r2, #11]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
		// Setup high data register with data[0] & data[1] & data[2] & data[3] (concat)
		dat_high_reg = (msg->data[0] << 24) | (msg->data[1] << 16) | (msg->data[2] << 8) | (msg->data[3]);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	791b      	ldrb	r3, [r3, #4]
 8002d82:	061a      	lsls	r2, r3, #24
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	795b      	ldrb	r3, [r3, #5]
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	799b      	ldrb	r3, [r3, #6]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	4313      	orrs	r3, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	79d2      	ldrb	r2, [r2, #7]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

		CAN1->sTxMailBox[mailbox].TDLR = dat_low_reg;
 8002d9c:	4912      	ldr	r1, [pc, #72]	; (8002de8 <CAN_queue_transmit+0xd0>)
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	440b      	add	r3, r1
 8002da6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002daa:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mailbox].TDHR = dat_high_reg;
 8002dac:	490e      	ldr	r1, [pc, #56]	; (8002de8 <CAN_queue_transmit+0xd0>)
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	440b      	add	r3, r1
 8002db6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002dba:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mailbox].TDTR = dat_len_reg;
 8002dbc:	490a      	ldr	r1, [pc, #40]	; (8002de8 <CAN_queue_transmit+0xd0>)
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	3318      	adds	r3, #24
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3304      	adds	r3, #4
 8002dca:	601a      	str	r2, [r3, #0]

		// Set the identifier register to start the transaction
		CAN1->sTxMailBox[mailbox].TIR = identifier_reg;
 8002dcc:	4906      	ldr	r1, [pc, #24]	; (8002de8 <CAN_queue_transmit+0xd0>)
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	3318      	adds	r3, #24
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	440b      	add	r3, r1
 8002dd8:	601a      	str	r2, [r3, #0]

		return true;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <CAN_queue_transmit+0xc8>

	} else {
		return false;
 8002dde:	2300      	movs	r3, #0
	}
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40006400 	.word	0x40006400

08002dec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002df0:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002df2:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <MX_SPI1_Init+0x6c>)
 8002df4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002df8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002dfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e10:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e16:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002e38:	220a      	movs	r2, #10
 8002e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e3c:	4805      	ldr	r0, [pc, #20]	; (8002e54 <MX_SPI1_Init+0x68>)
 8002e3e:	f7fe ffe9 	bl	8001e14 <HAL_SPI_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <MX_SPI1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e48:	2145      	movs	r1, #69	; 0x45
 8002e4a:	4804      	ldr	r0, [pc, #16]	; (8002e5c <MX_SPI1_Init+0x70>)
 8002e4c:	f7ff fee6 	bl	8002c1c <_Error_Handler>
  }

}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000104 	.word	0x20000104
 8002e58:	40013000 	.word	0x40013000
 8002e5c:	0800327c 	.word	0x0800327c

08002e60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <HAL_SPI_MspInit+0x58>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d11d      	bne.n	8002eae <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <HAL_SPI_MspInit+0x5c>)
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_SPI_MspInit+0x5c>)
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e80:	6453      	str	r3, [r2, #68]	; 0x44
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <HAL_SPI_MspInit+0x5c>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e8e:	2338      	movs	r3, #56	; 0x38
 8002e90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	2302      	movs	r3, #2
 8002e94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e9e:	2305      	movs	r3, #5
 8002ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea2:	f107 030c 	add.w	r3, r7, #12
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <HAL_SPI_MspInit+0x60>)
 8002eaa:	f7fe f829 	bl	8000f00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002eae:	bf00      	nop
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40013000 	.word	0x40013000
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40020400 	.word	0x40020400

08002ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec8:	2003      	movs	r0, #3
 8002eca:	f7fd ffbb 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	f06f 000b 	mvn.w	r0, #11
 8002ed6:	f7fd ffc0 	bl	8000e5a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2100      	movs	r1, #0
 8002ede:	f06f 000a 	mvn.w	r0, #10
 8002ee2:	f7fd ffba 	bl	8000e5a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	f06f 0009 	mvn.w	r0, #9
 8002eee:	f7fd ffb4 	bl	8000e5a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	f06f 0004 	mvn.w	r0, #4
 8002efa:	f7fd ffae 	bl	8000e5a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	f06f 0003 	mvn.w	r0, #3
 8002f06:	f7fd ffa8 	bl	8000e5a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	f06f 0001 	mvn.w	r0, #1
 8002f12:	f7fd ffa2 	bl	8000e5a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1e:	f7fd ff9c 	bl	8000e5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f38:	e7fe      	b.n	8002f38 <HardFault_Handler+0x4>

08002f3a <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f3e:	e7fe      	b.n	8002f3e <MemManage_Handler+0x4>

08002f40 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f44:	e7fe      	b.n	8002f44 <BusFault_Handler+0x4>

08002f46 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f4a:	e7fe      	b.n	8002f4a <UsageFault_Handler+0x4>

08002f4c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f7a:	f7fd f981 	bl	8000280 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002f7e:	f7fd ffb1 	bl	8000ee4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f8c:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <SystemInit+0x60>)
 8002f8e:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <SystemInit+0x60>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f9c:	4a13      	ldr	r2, [pc, #76]	; (8002fec <SystemInit+0x64>)
 8002f9e:	4b13      	ldr	r3, [pc, #76]	; (8002fec <SystemInit+0x64>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002fa8:	4b10      	ldr	r3, [pc, #64]	; (8002fec <SystemInit+0x64>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <SystemInit+0x64>)
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <SystemInit+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <SystemInit+0x64>)
 8002fc0:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <SystemInit+0x68>)
 8002fc2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002fc4:	4a09      	ldr	r2, [pc, #36]	; (8002fec <SystemInit+0x64>)
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <SystemInit+0x64>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <SystemInit+0x64>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <SystemInit+0x60>)
 8002fd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fdc:	609a      	str	r2, [r3, #8]
#endif
}
 8002fde:	bf00      	nop
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000ed00 	.word	0xe000ed00
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	24003010 	.word	0x24003010

08002ff4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b090      	sub	sp, #64	; 0x40
 8002ff8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8002ffa:	4b35      	ldr	r3, [pc, #212]	; (80030d0 <MX_TIM1_Init+0xdc>)
 8002ffc:	4a35      	ldr	r2, [pc, #212]	; (80030d4 <MX_TIM1_Init+0xe0>)
 8002ffe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003000:	4b33      	ldr	r3, [pc, #204]	; (80030d0 <MX_TIM1_Init+0xdc>)
 8003002:	2200      	movs	r2, #0
 8003004:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003006:	4b32      	ldr	r3, [pc, #200]	; (80030d0 <MX_TIM1_Init+0xdc>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800300c:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <MX_TIM1_Init+0xdc>)
 800300e:	2200      	movs	r2, #0
 8003010:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003012:	4b2f      	ldr	r3, [pc, #188]	; (80030d0 <MX_TIM1_Init+0xdc>)
 8003014:	2200      	movs	r2, #0
 8003016:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003018:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <MX_TIM1_Init+0xdc>)
 800301a:	2200      	movs	r2, #0
 800301c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800301e:	482c      	ldr	r0, [pc, #176]	; (80030d0 <MX_TIM1_Init+0xdc>)
 8003020:	f7fe ff5b 	bl	8001eda <HAL_TIM_OC_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <MX_TIM1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800302a:	2140      	movs	r1, #64	; 0x40
 800302c:	482a      	ldr	r0, [pc, #168]	; (80030d8 <MX_TIM1_Init+0xe4>)
 800302e:	f7ff fdf5 	bl	8002c1c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003036:	2300      	movs	r3, #0
 8003038:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800303a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800303e:	4619      	mov	r1, r3
 8003040:	4823      	ldr	r0, [pc, #140]	; (80030d0 <MX_TIM1_Init+0xdc>)
 8003042:	f7ff fa43 	bl	80024cc <HAL_TIMEx_MasterConfigSynchronization>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <MX_TIM1_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 800304c:	2147      	movs	r1, #71	; 0x47
 800304e:	4822      	ldr	r0, [pc, #136]	; (80030d8 <MX_TIM1_Init+0xe4>)
 8003050:	f7ff fde4 	bl	8002c1c <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003054:	2300      	movs	r3, #0
 8003056:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800305c:	2300      	movs	r3, #0
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003060:	2300      	movs	r3, #0
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003064:	2300      	movs	r3, #0
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003068:	2300      	movs	r3, #0
 800306a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800306c:	2300      	movs	r3, #0
 800306e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003070:	f107 031c 	add.w	r3, r7, #28
 8003074:	2200      	movs	r2, #0
 8003076:	4619      	mov	r1, r3
 8003078:	4815      	ldr	r0, [pc, #84]	; (80030d0 <MX_TIM1_Init+0xdc>)
 800307a:	f7fe ff59 	bl	8001f30 <HAL_TIM_OC_ConfigChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <MX_TIM1_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003084:	2153      	movs	r1, #83	; 0x53
 8003086:	4814      	ldr	r0, [pc, #80]	; (80030d8 <MX_TIM1_Init+0xe4>)
 8003088:	f7ff fdc8 	bl	8002c1c <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800308c:	2300      	movs	r3, #0
 800308e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003094:	2300      	movs	r3, #0
 8003096:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030aa:	463b      	mov	r3, r7
 80030ac:	4619      	mov	r1, r3
 80030ae:	4808      	ldr	r0, [pc, #32]	; (80030d0 <MX_TIM1_Init+0xdc>)
 80030b0:	f7ff fa51 	bl	8002556 <HAL_TIMEx_ConfigBreakDeadTime>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <MX_TIM1_Init+0xce>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030ba:	215f      	movs	r1, #95	; 0x5f
 80030bc:	4806      	ldr	r0, [pc, #24]	; (80030d8 <MX_TIM1_Init+0xe4>)
 80030be:	f7ff fdad 	bl	8002c1c <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 80030c2:	4803      	ldr	r0, [pc, #12]	; (80030d0 <MX_TIM1_Init+0xdc>)
 80030c4:	f000 f82c 	bl	8003120 <HAL_TIM_MspPostInit>

}
 80030c8:	bf00      	nop
 80030ca:	3740      	adds	r7, #64	; 0x40
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	2000015c 	.word	0x2000015c
 80030d4:	40010000 	.word	0x40010000
 80030d8:	0800328c 	.word	0x0800328c

080030dc <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <HAL_TIM_OC_MspInit+0x3c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10d      	bne.n	800310a <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <HAL_TIM_OC_MspInit+0x40>)
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_TIM_OC_MspInit+0x40>)
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6453      	str	r3, [r2, #68]	; 0x44
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <HAL_TIM_OC_MspInit+0x40>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40010000 	.word	0x40010000
 800311c:	40023800 	.word	0x40023800

08003120 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0b      	ldr	r2, [pc, #44]	; (800315c <HAL_TIM_MspPostInit+0x3c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d110      	bne.n	8003154 <HAL_TIM_MspPostInit+0x34>
  
    /**TIM1 GPIO Configuration    
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003132:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003136:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	2300      	movs	r3, #0
 8003142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003144:	2301      	movs	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003148:	f107 030c 	add.w	r3, r7, #12
 800314c:	4619      	mov	r1, r3
 800314e:	4804      	ldr	r0, [pc, #16]	; (8003160 <HAL_TIM_MspPostInit+0x40>)
 8003150:	f7fd fed6 	bl	8000f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003154:	bf00      	nop
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40010000 	.word	0x40010000
 8003160:	40021000 	.word	0x40021000

08003164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800319c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003168:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800316a:	e003      	b.n	8003174 <LoopCopyDataInit>

0800316c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800316e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003170:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003172:	3104      	adds	r1, #4

08003174 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003174:	480b      	ldr	r0, [pc, #44]	; (80031a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003178:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800317a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800317c:	d3f6      	bcc.n	800316c <CopyDataInit>
  ldr  r2, =_sbss
 800317e:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003180:	e002      	b.n	8003188 <LoopFillZerobss>

08003182 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003182:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003184:	f842 3b04 	str.w	r3, [r2], #4

08003188 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800318a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800318c:	d3f9      	bcc.n	8003182 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800318e:	f7ff fefb 	bl	8002f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003192:	f000 f811 	bl	80031b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003196:	f7ff fc4f 	bl	8002a38 <main>
  bx  lr    
 800319a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800319c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80031a0:	080032bc 	.word	0x080032bc
  ldr  r0, =_sdata
 80031a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031a8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80031ac:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80031b0:	20000198 	.word	0x20000198

080031b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031b4:	e7fe      	b.n	80031b4 <ADC_IRQHandler>
	...

080031b8 <__libc_init_array>:
 80031b8:	b570      	push	{r4, r5, r6, lr}
 80031ba:	4e0d      	ldr	r6, [pc, #52]	; (80031f0 <__libc_init_array+0x38>)
 80031bc:	4c0d      	ldr	r4, [pc, #52]	; (80031f4 <__libc_init_array+0x3c>)
 80031be:	1ba4      	subs	r4, r4, r6
 80031c0:	10a4      	asrs	r4, r4, #2
 80031c2:	2500      	movs	r5, #0
 80031c4:	42a5      	cmp	r5, r4
 80031c6:	d109      	bne.n	80031dc <__libc_init_array+0x24>
 80031c8:	4e0b      	ldr	r6, [pc, #44]	; (80031f8 <__libc_init_array+0x40>)
 80031ca:	4c0c      	ldr	r4, [pc, #48]	; (80031fc <__libc_init_array+0x44>)
 80031cc:	f000 f818 	bl	8003200 <_init>
 80031d0:	1ba4      	subs	r4, r4, r6
 80031d2:	10a4      	asrs	r4, r4, #2
 80031d4:	2500      	movs	r5, #0
 80031d6:	42a5      	cmp	r5, r4
 80031d8:	d105      	bne.n	80031e6 <__libc_init_array+0x2e>
 80031da:	bd70      	pop	{r4, r5, r6, pc}
 80031dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031e0:	4798      	blx	r3
 80031e2:	3501      	adds	r5, #1
 80031e4:	e7ee      	b.n	80031c4 <__libc_init_array+0xc>
 80031e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ea:	4798      	blx	r3
 80031ec:	3501      	adds	r5, #1
 80031ee:	e7f2      	b.n	80031d6 <__libc_init_array+0x1e>
 80031f0:	080032b4 	.word	0x080032b4
 80031f4:	080032b4 	.word	0x080032b4
 80031f8:	080032b4 	.word	0x080032b4
 80031fc:	080032b8 	.word	0x080032b8

08003200 <_init>:
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	bf00      	nop
 8003204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003206:	bc08      	pop	{r3}
 8003208:	469e      	mov	lr, r3
 800320a:	4770      	bx	lr

0800320c <_fini>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	bf00      	nop
 8003210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003212:	bc08      	pop	{r3}
 8003214:	469e      	mov	lr, r3
 8003216:	4770      	bx	lr
