
Valve_Code3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e38  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002ffc  08002ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  0800305c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000e8  20000004  08003060  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000ec  08003060  000200ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014423  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002690  00000000  00000000  00034457  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b10  00000000  00000000  00036ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009f8  00000000  00000000  000375f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005d45  00000000  00000000  00037ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003b90  00000000  00000000  0003dd35  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000418c5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c84  00000000  00000000  00041944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002fe4 	.word	0x08002fe4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08002fe4 	.word	0x08002fe4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fdff 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f002 fbae 	bl	8002ca8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <HAL_InitTick+0x30>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a09      	ldr	r2, [pc, #36]	; (800058c <HAL_InitTick+0x34>)
 8000566:	fba2 2303 	umull	r2, r3, r2, r3
 800056a:	099b      	lsrs	r3, r3, #6
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fe0e 	bl	800118e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000572:	2200      	movs	r2, #0
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	f04f 30ff 	mov.w	r0, #4294967295
 800057a:	f000 fdec 	bl	8001156 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000000 	.word	0x20000000
 800058c:	10624dd3 	.word	0x10624dd3

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick++;
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <HAL_IncTick+0x18>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <HAL_IncTick+0x18>)
 800059c:	6013      	str	r3, [r2, #0]
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000020 	.word	0x20000020

080005ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_GetTick+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000020 	.word	0x20000020

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff ffee 	bl	80005ac <HAL_GetTick>
 80005d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005dc:	d002      	beq.n	80005e4 <HAL_Delay+0x20>
  {
     wait++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005e4:	bf00      	nop
 80005e6:	f7ff ffe1 	bl	80005ac <HAL_GetTick>
 80005ea:	4602      	mov	r2, r0
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1ad2      	subs	r2, r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d3f7      	bcc.n	80005e6 <HAL_Delay+0x22>
  {
  }
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d101      	bne.n	8000614 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000610:	2301      	movs	r3, #1
 8000612:	e033      	b.n	800067c <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	2b00      	cmp	r3, #0
 800061a:	d109      	bne.n	8000630 <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f002 f8ee 	bl	800280c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 0310 	and.w	r3, r3, #16
 8000638:	2b00      	cmp	r3, #0
 800063a:	d118      	bne.n	800066e <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000644:	f023 0302 	bic.w	r3, r3, #2
 8000648:	f043 0202 	orr.w	r2, r3, #2
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 faa7 	bl	8000ba4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f023 0303 	bic.w	r3, r3, #3
 8000664:	f043 0201 	orr.w	r2, r3, #1
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	641a      	str	r2, [r3, #64]	; 0x40
 800066c:	e001      	b.n	8000672 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800066e:	2301      	movs	r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800067a:	7bfb      	ldrb	r3, [r7, #15]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000696:	2b01      	cmp	r3, #1
 8000698:	d101      	bne.n	800069e <HAL_ADC_Start+0x1a>
 800069a:	2302      	movs	r3, #2
 800069c:	e089      	b.n	80007b2 <HAL_ADC_Start+0x12e>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2201      	movs	r2, #1
 80006a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d018      	beq.n	80006e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	6892      	ldr	r2, [r2, #8]
 80006be:	f042 0201 	orr.w	r2, r2, #1
 80006c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006c4:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <HAL_ADC_Start+0x13c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a3e      	ldr	r2, [pc, #248]	; (80007c4 <HAL_ADC_Start+0x140>)
 80006ca:	fba2 2303 	umull	r2, r3, r2, r3
 80006ce:	0c9a      	lsrs	r2, r3, #18
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006d8:	e002      	b.n	80006e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	3b01      	subs	r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1f9      	bne.n	80006da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d05d      	beq.n	80007b0 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006fc:	f023 0301 	bic.w	r3, r3, #1
 8000700:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000712:	2b00      	cmp	r3, #0
 8000714:	d007      	beq.n	8000726 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800071e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800072e:	2b00      	cmp	r3, #0
 8000730:	d006      	beq.n	8000740 <HAL_ADC_Start+0xbc>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f023 0206 	bic.w	r2, r3, #6
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	645a      	str	r2, [r3, #68]	; 0x44
 800073e:	e002      	b.n	8000746 <HAL_ADC_Start+0xc2>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <HAL_ADC_Start+0x144>)
 8000750:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800075a:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	f003 031f 	and.w	r3, r3, #31
 8000764:	2b00      	cmp	r3, #0
 8000766:	d10f      	bne.n	8000788 <HAL_ADC_Start+0x104>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d11c      	bne.n	80007b0 <HAL_ADC_Start+0x12c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	6812      	ldr	r2, [r2, #0]
 800077e:	6892      	ldr	r2, [r2, #8]
 8000780:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	e013      	b.n	80007b0 <HAL_ADC_Start+0x12c>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <HAL_ADC_Start+0x148>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d10e      	bne.n	80007b0 <HAL_ADC_Start+0x12c>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d107      	bne.n	80007b0 <HAL_ADC_Start+0x12c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	6812      	ldr	r2, [r2, #0]
 80007a8:	6892      	ldr	r2, [r2, #8]
 80007aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007ae:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000000 	.word	0x20000000
 80007c4:	431bde83 	.word	0x431bde83
 80007c8:	40012300 	.word	0x40012300
 80007cc:	40012000 	.word	0x40012000

080007d0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d101      	bne.n	80007e6 <HAL_ADC_Stop+0x16>
 80007e2:	2302      	movs	r3, #2
 80007e4:	e021      	b.n	800082a <HAL_ADC_Stop+0x5a>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2201      	movs	r2, #1
 80007ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	6812      	ldr	r2, [r2, #0]
 80007f6:	6892      	ldr	r2, [r2, #8]
 80007f8:	f022 0201 	bic.w	r2, r2, #1
 80007fc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	2b00      	cmp	r3, #0
 800080a:	d109      	bne.n	8000820 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000814:	f023 0301 	bic.w	r3, r3, #1
 8000818:	f043 0201 	orr.w	r2, r3, #1
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b084      	sub	sp, #16
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800084e:	2b00      	cmp	r3, #0
 8000850:	d012      	beq.n	8000878 <HAL_ADC_PollForConversion+0x42>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00b      	beq.n	8000878 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f043 0220 	orr.w	r2, r3, #32
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e05c      	b.n	8000932 <HAL_ADC_PollForConversion+0xfc>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000878:	f7ff fe98 	bl	80005ac <HAL_GetTick>
 800087c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800087e:	e01a      	b.n	80008b6 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000886:	d016      	beq.n	80008b6 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d007      	beq.n	800089e <HAL_ADC_PollForConversion+0x68>
 800088e:	f7ff fe8d 	bl	80005ac <HAL_GetTick>
 8000892:	4602      	mov	r2, r0
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	1ad2      	subs	r2, r2, r3
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	429a      	cmp	r2, r3
 800089c:	d90b      	bls.n	80008b6 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f043 0204 	orr.w	r2, r3, #4
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80008b2:	2303      	movs	r3, #3
 80008b4:	e03d      	b.n	8000932 <HAL_ADC_PollForConversion+0xfc>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f003 0302 	and.w	r3, r3, #2
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d1dd      	bne.n	8000880 <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f06f 0212 	mvn.w	r2, #18
 80008cc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d123      	bne.n	8000930 <HAL_ADC_PollForConversion+0xfa>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d11f      	bne.n	8000930 <HAL_ADC_PollForConversion+0xfa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d006      	beq.n	800090c <HAL_ADC_PollForConversion+0xd6>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000908:	2b00      	cmp	r3, #0
 800090a:	d111      	bne.n	8000930 <HAL_ADC_PollForConversion+0xfa>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d105      	bne.n	8000930 <HAL_ADC_PollForConversion+0xfa>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f043 0201 	orr.w	r2, r3, #1
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000954:	b490      	push	{r4, r7}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000968:	2b01      	cmp	r3, #1
 800096a:	d101      	bne.n	8000970 <HAL_ADC_ConfigChannel+0x1c>
 800096c:	2302      	movs	r3, #2
 800096e:	e109      	b.n	8000b84 <HAL_ADC_ConfigChannel+0x230>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2201      	movs	r2, #1
 8000974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b09      	cmp	r3, #9
 800097e:	d926      	bls.n	80009ce <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68d9      	ldr	r1, [r3, #12]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	b29b      	uxth	r3, r3
 8000990:	4618      	mov	r0, r3
 8000992:	4603      	mov	r3, r0
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4403      	add	r3, r0
 8000998:	3b1e      	subs	r3, #30
 800099a:	2007      	movs	r0, #7
 800099c:	fa00 f303 	lsl.w	r3, r0, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	400b      	ands	r3, r1
 80009a4:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68d9      	ldr	r1, [r3, #12]
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	6898      	ldr	r0, [r3, #8]
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	461c      	mov	r4, r3
 80009bc:	4623      	mov	r3, r4
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4423      	add	r3, r4
 80009c2:	3b1e      	subs	r3, #30
 80009c4:	fa00 f303 	lsl.w	r3, r0, r3
 80009c8:	430b      	orrs	r3, r1
 80009ca:	60d3      	str	r3, [r2, #12]
 80009cc:	e023      	b.n	8000a16 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6919      	ldr	r1, [r3, #16]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	4603      	mov	r3, r0
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4403      	add	r3, r0
 80009e6:	2007      	movs	r0, #7
 80009e8:	fa00 f303 	lsl.w	r3, r0, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	400b      	ands	r3, r1
 80009f0:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6919      	ldr	r1, [r3, #16]
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	6898      	ldr	r0, [r3, #8]
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	461c      	mov	r4, r3
 8000a08:	4623      	mov	r3, r4
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4423      	add	r3, r4
 8000a0e:	fa00 f303 	lsl.w	r3, r0, r3
 8000a12:	430b      	orrs	r3, r1
 8000a14:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d824      	bhi.n	8000a68 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6819      	ldr	r1, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	3b05      	subs	r3, #5
 8000a34:	221f      	movs	r2, #31
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	4003      	ands	r3, r0
 8000a3e:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6819      	ldr	r1, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	461c      	mov	r4, r3
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	3b05      	subs	r3, #5
 8000a5e:	fa04 f303 	lsl.w	r3, r4, r3
 8000a62:	4303      	orrs	r3, r0
 8000a64:	634b      	str	r3, [r1, #52]	; 0x34
 8000a66:	e04c      	b.n	8000b02 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	2b0c      	cmp	r3, #12
 8000a6e:	d824      	bhi.n	8000aba <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6819      	ldr	r1, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	3b23      	subs	r3, #35	; 0x23
 8000a86:	221f      	movs	r2, #31
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4003      	ands	r3, r0
 8000a90:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6819      	ldr	r1, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	461c      	mov	r4, r3
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	3b23      	subs	r3, #35	; 0x23
 8000ab0:	fa04 f303 	lsl.w	r3, r4, r3
 8000ab4:	4303      	orrs	r3, r0
 8000ab6:	630b      	str	r3, [r1, #48]	; 0x30
 8000ab8:	e023      	b.n	8000b02 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6819      	ldr	r1, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	3b41      	subs	r3, #65	; 0x41
 8000ad0:	221f      	movs	r2, #31
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	4003      	ands	r3, r0
 8000ada:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6819      	ldr	r1, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	461c      	mov	r4, r3
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	3b41      	subs	r3, #65	; 0x41
 8000afa:	fa04 f303 	lsl.w	r3, r4, r3
 8000afe:	4303      	orrs	r3, r0
 8000b00:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <HAL_ADC_ConfigChannel+0x23c>)
 8000b04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <HAL_ADC_ConfigChannel+0x240>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d109      	bne.n	8000b24 <HAL_ADC_ConfigChannel+0x1d0>
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b12      	cmp	r3, #18
 8000b16:	d105      	bne.n	8000b24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <HAL_ADC_ConfigChannel+0x240>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d125      	bne.n	8000b7a <HAL_ADC_ConfigChannel+0x226>
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_ADC_ConfigChannel+0x244>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d003      	beq.n	8000b40 <HAL_ADC_ConfigChannel+0x1ec>
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b11      	cmp	r3, #17
 8000b3e:	d11c      	bne.n	8000b7a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <HAL_ADC_ConfigChannel+0x244>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d111      	bne.n	8000b7a <HAL_ADC_ConfigChannel+0x226>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_ADC_ConfigChannel+0x248>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_ADC_ConfigChannel+0x24c>)
 8000b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b60:	0c9a      	lsrs	r2, r3, #18
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b6c:	e002      	b.n	8000b74 <HAL_ADC_ConfigChannel+0x220>
      {
        counter--;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1f9      	bne.n	8000b6e <HAL_ADC_ConfigChannel+0x21a>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc90      	pop	{r4, r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40012300 	.word	0x40012300
 8000b94:	40012000 	.word	0x40012000
 8000b98:	10000012 	.word	0x10000012
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	431bde83 	.word	0x431bde83

08000ba4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bac:	4b78      	ldr	r3, [pc, #480]	; (8000d90 <ADC_Init+0x1ec>)
 8000bae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	6852      	ldr	r2, [r2, #4]
 8000bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	6851      	ldr	r1, [r2, #4]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	6912      	ldr	r2, [r2, #16]
 8000be8:	0212      	lsls	r2, r2, #8
 8000bea:	430a      	orrs	r2, r1
 8000bec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	6852      	ldr	r2, [r2, #4]
 8000bf8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	6851      	ldr	r1, [r2, #4]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	6892      	ldr	r2, [r2, #8]
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	6812      	ldr	r2, [r2, #0]
 8000c18:	6892      	ldr	r2, [r2, #8]
 8000c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	6812      	ldr	r2, [r2, #0]
 8000c28:	6891      	ldr	r1, [r2, #8]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68d2      	ldr	r2, [r2, #12]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c36:	4a57      	ldr	r2, [pc, #348]	; (8000d94 <ADC_Init+0x1f0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d022      	beq.n	8000c82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	6812      	ldr	r2, [r2, #0]
 8000c44:	6892      	ldr	r2, [r2, #8]
 8000c46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	6891      	ldr	r1, [r2, #8]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	6892      	ldr	r2, [r2, #8]
 8000c68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	6812      	ldr	r2, [r2, #0]
 8000c76:	6891      	ldr	r1, [r2, #8]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	e00f      	b.n	8000ca2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	6892      	ldr	r2, [r2, #8]
 8000c8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	6892      	ldr	r2, [r2, #8]
 8000c9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ca0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	6892      	ldr	r2, [r2, #8]
 8000cac:	f022 0202 	bic.w	r2, r2, #2
 8000cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	6812      	ldr	r2, [r2, #0]
 8000cba:	6891      	ldr	r1, [r2, #8]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	6992      	ldr	r2, [r2, #24]
 8000cc0:	0052      	lsls	r2, r2, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a1b      	ldr	r3, [r3, #32]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d01b      	beq.n	8000d06 <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	6812      	ldr	r2, [r2, #0]
 8000cd6:	6852      	ldr	r2, [r2, #4]
 8000cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cdc:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	6812      	ldr	r2, [r2, #0]
 8000ce6:	6852      	ldr	r2, [r2, #4]
 8000ce8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000cec:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	6812      	ldr	r2, [r2, #0]
 8000cf6:	6851      	ldr	r1, [r2, #4]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000cfc:	3a01      	subs	r2, #1
 8000cfe:	0352      	lsls	r2, r2, #13
 8000d00:	430a      	orrs	r2, r1
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	e007      	b.n	8000d16 <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	6812      	ldr	r2, [r2, #0]
 8000d0e:	6852      	ldr	r2, [r2, #4]
 8000d10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d14:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	6812      	ldr	r2, [r2, #0]
 8000d1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d20:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	69d2      	ldr	r2, [r2, #28]
 8000d34:	3a01      	subs	r2, #1
 8000d36:	0512      	lsls	r2, r2, #20
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	6812      	ldr	r2, [r2, #0]
 8000d44:	6892      	ldr	r2, [r2, #8]
 8000d46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	6891      	ldr	r1, [r2, #8]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d5a:	0252      	lsls	r2, r2, #9
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	6892      	ldr	r2, [r2, #8]
 8000d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	6891      	ldr	r1, [r2, #8]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	6952      	ldr	r2, [r2, #20]
 8000d7e:	0292      	lsls	r2, r2, #10
 8000d80:	430a      	orrs	r2, r1
 8000d82:	609a      	str	r2, [r3, #8]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40012300 	.word	0x40012300
 8000d94:	0f000001 	.word	0x0f000001

08000d98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t InitStatus = CAN_INITSTATUS_FAILED;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_CAN_Init+0x1a>
  {
     return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e112      	b.n	8000fd8 <HAL_CAN_Init+0x240>
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  

  if(hcan->State == HAL_CAN_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d106      	bne.n	8000dcc <HAL_CAN_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f001 fd94 	bl	80028f4 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2202      	movs	r2, #2
 8000dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	6812      	ldr	r2, [r2, #0]
 8000dde:	f022 0202 	bic.w	r2, r2, #2
 8000de2:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	f042 0201 	orr.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000df4:	f7ff fbda 	bl	80005ac <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]

  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000dfa:	e010      	b.n	8000e1e <HAL_CAN_Init+0x86>
  {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000dfc:	f7ff fbd6 	bl	80005ac <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b0a      	cmp	r3, #10
 8000e08:	d909      	bls.n	8000e1e <HAL_CAN_Init+0x86>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e0dc      	b.n	8000fd8 <HAL_CAN_Init+0x240>
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d1e7      	bne.n	8000dfc <HAL_CAN_Init+0x64>
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	f040 80bd 	bne.w	8000fb6 <HAL_CAN_Init+0x21e>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d108      	bne.n	8000e56 <HAL_CAN_Init+0xbe>
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	e007      	b.n	8000e66 <HAL_CAN_Init+0xce>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	6812      	ldr	r2, [r2, #0]
 8000e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e64:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d108      	bne.n	8000e80 <HAL_CAN_Init+0xe8>
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6812      	ldr	r2, [r2, #0]
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e007      	b.n	8000e90 <HAL_CAN_Init+0xf8>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e8e:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d108      	bne.n	8000eaa <HAL_CAN_Init+0x112>
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	f042 0220 	orr.w	r2, r2, #32
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e007      	b.n	8000eba <HAL_CAN_Init+0x122>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	6812      	ldr	r2, [r2, #0]
 8000eb4:	f022 0220 	bic.w	r2, r2, #32
 8000eb8:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d108      	bne.n	8000ed4 <HAL_CAN_Init+0x13c>
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	6812      	ldr	r2, [r2, #0]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	f042 0210 	orr.w	r2, r2, #16
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e007      	b.n	8000ee4 <HAL_CAN_Init+0x14c>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	6812      	ldr	r2, [r2, #0]
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	f022 0210 	bic.w	r2, r2, #16
 8000ee2:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d108      	bne.n	8000efe <HAL_CAN_Init+0x166>
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6812      	ldr	r2, [r2, #0]
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	f042 0208 	orr.w	r2, r2, #8
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e007      	b.n	8000f0e <HAL_CAN_Init+0x176>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	6812      	ldr	r2, [r2, #0]
 8000f08:	f022 0208 	bic.w	r2, r2, #8
 8000f0c:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d108      	bne.n	8000f28 <HAL_CAN_Init+0x190>
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	f042 0204 	orr.w	r2, r2, #4
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e007      	b.n	8000f38 <HAL_CAN_Init+0x1a0>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	f022 0204 	bic.w	r2, r2, #4
 8000f36:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6891      	ldr	r1, [r2, #8]
                ((uint32_t)hcan->Init.SJW) | \
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68d2      	ldr	r2, [r2, #12]
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000f44:	4311      	orrs	r1, r2
                ((uint32_t)hcan->Init.BS1) | \
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6912      	ldr	r2, [r2, #16]
                ((uint32_t)hcan->Init.SJW) | \
 8000f4a:	4311      	orrs	r1, r2
                ((uint32_t)hcan->Init.BS2) | \
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6952      	ldr	r2, [r2, #20]
                ((uint32_t)hcan->Init.BS1) | \
 8000f50:	4311      	orrs	r1, r2
               ((uint32_t)hcan->Init.Prescaler - 1U);
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6852      	ldr	r2, [r2, #4]
 8000f56:	3a01      	subs	r2, #1
                ((uint32_t)hcan->Init.BS2) | \
 8000f58:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000f5a:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6812      	ldr	r2, [r2, #0]
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	f022 0201 	bic.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f6c:	f7ff fb1e 	bl	80005ac <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]

   /* Wait the acknowledge */
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000f72:	e010      	b.n	8000f96 <HAL_CAN_Init+0x1fe>
   {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000f74:	f7ff fb1a 	bl	80005ac <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b0a      	cmp	r3, #10
 8000f80:	d909      	bls.n	8000f96 <HAL_CAN_Init+0x1fe>
     {
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2203      	movs	r2, #3
 8000f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
       return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e020      	b.n	8000fd8 <HAL_CAN_Init+0x240>
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d0e7      	beq.n	8000f74 <HAL_CAN_Init+0x1dc>
     }
   }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d001      	beq.n	8000fb6 <HAL_CAN_Init+0x21e>
    {
      InitStatus = CAN_INITSTATUS_SUCCESS;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
    }
  }
 
  if(InitStatus == CAN_INITSTATUS_SUCCESS)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d108      	bne.n	8000fce <HAL_CAN_Init+0x236>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
    /* Return function status */
    return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e004      	b.n	8000fd8 <HAL_CAN_Init+0x240>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Return function status */
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
  }
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	da0b      	bge.n	8001070 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	490d      	ldr	r1, [pc, #52]	; (8001090 <NVIC_SetPriority+0x4c>)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 030f 	and.w	r3, r3, #15
 8001060:	3b04      	subs	r3, #4
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106e:	e009      	b.n	8001084 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	4908      	ldr	r1, [pc, #32]	; (8001094 <NVIC_SetPriority+0x50>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00
 8001094:	e000e100 	.word	0xe000e100

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	2201      	movs	r2, #1
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	1e5a      	subs	r2, r3, #1
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	401a      	ands	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010de:	2101      	movs	r1, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	1e59      	subs	r1, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f7ff ff90 	bl	8001044 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff49 	bl	8000fe0 <NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff5e 	bl	8001028 <NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff90 	bl	8001098 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5f 	bl	8001044 <NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ffb0 	bl	80010fc <SysTick_Config>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d106      	bne.n	80011c4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80011c2:	e005      	b.n	80011d0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80011c4:	4a05      	ldr	r2, [pc, #20]	; (80011dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80011e4:	f000 f802 	bl	80011ec <HAL_SYSTICK_Callback>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	e165      	b.n	80014e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	f040 8154 	bne.w	80014de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x4a>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b12      	cmp	r3, #18
 8001244:	d123      	bne.n	800128e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	691a      	ldr	r2, [r3, #16]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	69b9      	ldr	r1, [r7, #24]
 800128a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0203 	and.w	r2, r3, #3
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d00b      	beq.n	80012e2 <HAL_GPIO_Init+0xe6>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d6:	2b11      	cmp	r3, #17
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d130      	bne.n	8001344 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0201 	and.w	r2, r3, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80ae 	beq.w	80014de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4a5c      	ldr	r2, [pc, #368]	; (80014f8 <HAL_GPIO_Init+0x2fc>)
 8001388:	4b5b      	ldr	r3, [pc, #364]	; (80014f8 <HAL_GPIO_Init+0x2fc>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <HAL_GPIO_Init+0x2fc>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139e:	4a57      	ldr	r2, [pc, #348]	; (80014fc <HAL_GPIO_Init+0x300>)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3302      	adds	r3, #2
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4e      	ldr	r2, [pc, #312]	; (8001500 <HAL_GPIO_Init+0x304>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d025      	beq.n	8001416 <HAL_GPIO_Init+0x21a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4d      	ldr	r2, [pc, #308]	; (8001504 <HAL_GPIO_Init+0x308>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d01f      	beq.n	8001412 <HAL_GPIO_Init+0x216>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4c      	ldr	r2, [pc, #304]	; (8001508 <HAL_GPIO_Init+0x30c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d019      	beq.n	800140e <HAL_GPIO_Init+0x212>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4b      	ldr	r2, [pc, #300]	; (800150c <HAL_GPIO_Init+0x310>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0x20e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4a      	ldr	r2, [pc, #296]	; (8001510 <HAL_GPIO_Init+0x314>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <HAL_GPIO_Init+0x20a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a49      	ldr	r2, [pc, #292]	; (8001514 <HAL_GPIO_Init+0x318>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x206>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a48      	ldr	r2, [pc, #288]	; (8001518 <HAL_GPIO_Init+0x31c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_GPIO_Init+0x202>
 80013fa:	2306      	movs	r3, #6
 80013fc:	e00c      	b.n	8001418 <HAL_GPIO_Init+0x21c>
 80013fe:	2307      	movs	r3, #7
 8001400:	e00a      	b.n	8001418 <HAL_GPIO_Init+0x21c>
 8001402:	2305      	movs	r3, #5
 8001404:	e008      	b.n	8001418 <HAL_GPIO_Init+0x21c>
 8001406:	2304      	movs	r3, #4
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x21c>
 800140a:	2303      	movs	r3, #3
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x21c>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x21c>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x21c>
 8001416:	2300      	movs	r3, #0
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	f002 0203 	and.w	r2, r2, #3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4093      	lsls	r3, r2
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001428:	4934      	ldr	r1, [pc, #208]	; (80014fc <HAL_GPIO_Init+0x300>)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001436:	4b39      	ldr	r3, [pc, #228]	; (800151c <HAL_GPIO_Init+0x320>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800145a:	4a30      	ldr	r2, [pc, #192]	; (800151c <HAL_GPIO_Init+0x320>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001460:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_GPIO_Init+0x320>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001484:	4a25      	ldr	r2, [pc, #148]	; (800151c <HAL_GPIO_Init+0x320>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <HAL_GPIO_Init+0x320>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ae:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_GPIO_Init+0x320>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_GPIO_Init+0x320>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d8:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_GPIO_Init+0x320>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b0f      	cmp	r3, #15
 80014e8:	f67f ae96 	bls.w	8001218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ec:	bf00      	nop
 80014ee:	3724      	adds	r7, #36	; 0x24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40013800 	.word	0x40013800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40021000 	.word	0x40021000
 8001514:	40021400 	.word	0x40021400
 8001518:	40021800 	.word	0x40021800
 800151c:	40013c00 	.word	0x40013c00

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0ca      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001568:	4b67      	ldr	r3, [pc, #412]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 020f 	and.w	r2, r3, #15
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d20c      	bcs.n	8001590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b62      	ldr	r3, [pc, #392]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 020f 	and.w	r2, r3, #15
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b6      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a8:	4a58      	ldr	r2, [pc, #352]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	4b58      	ldr	r3, [pc, #352]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c0:	4a52      	ldr	r2, [pc, #328]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015c2:	4b52      	ldr	r3, [pc, #328]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	494f      	ldr	r1, [pc, #316]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	4b4f      	ldr	r3, [pc, #316]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d044      	beq.n	8001674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d119      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e07d      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d003      	beq.n	8001612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	2b03      	cmp	r3, #3
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	4b3e      	ldr	r3, [pc, #248]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e06d      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e065      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001632:	4936      	ldr	r1, [pc, #216]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	4b35      	ldr	r3, [pc, #212]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 0203 	bic.w	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4313      	orrs	r3, r2
 8001642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001644:	f7fe ffb2 	bl	80005ac <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	e00a      	b.n	8001662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164c:	f7fe ffae 	bl	80005ac <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e04d      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 020c 	and.w	r2, r3, #12
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	429a      	cmp	r2, r3
 8001672:	d1eb      	bne.n	800164c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 020f 	and.w	r2, r3, #15
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d90c      	bls.n	800169c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <HAL_RCC_ClockConfig+0x1b4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 020f 	and.w	r2, r3, #15
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e030      	b.n	80016fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a8:	4918      	ldr	r1, [pc, #96]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c6:	4911      	ldr	r1, [pc, #68]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016da:	f000 f829 	bl	8001730 <HAL_RCC_GetSysClockFreq>
 80016de:	4601      	mov	r1, r0
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	5cd3      	ldrb	r3, [r2, r3]
 80016ee:	fa21 f303 	lsr.w	r3, r1, r3
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7fe ff2e 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00
 800170c:	40023800 	.word	0x40023800
 8001710:	0800303c 	.word	0x0800303c
 8001714:	20000000 	.word	0x20000000

08001718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_RCC_GetHCLKFreq+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000000 	.word	0x20000000

08001730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001734:	b0a1      	sub	sp, #132	; 0x84
 8001736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800174c:	4ba0      	ldr	r3, [pc, #640]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b0c      	cmp	r3, #12
 8001756:	f200 8193 	bhi.w	8001a80 <HAL_RCC_GetSysClockFreq+0x350>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <HAL_RCC_GetSysClockFreq+0x30>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	08001795 	.word	0x08001795
 8001764:	08001a81 	.word	0x08001a81
 8001768:	08001a81 	.word	0x08001a81
 800176c:	08001a81 	.word	0x08001a81
 8001770:	0800179b 	.word	0x0800179b
 8001774:	08001a81 	.word	0x08001a81
 8001778:	08001a81 	.word	0x08001a81
 800177c:	08001a81 	.word	0x08001a81
 8001780:	080017a1 	.word	0x080017a1
 8001784:	08001a81 	.word	0x08001a81
 8001788:	08001a81 	.word	0x08001a81
 800178c:	08001a81 	.word	0x08001a81
 8001790:	0800191d 	.word	0x0800191d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b8f      	ldr	r3, [pc, #572]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8001796:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8001798:	e175      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179a:	4b8f      	ldr	r3, [pc, #572]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x2a8>)
 800179c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800179e:	e172      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a0:	4b8b      	ldr	r3, [pc, #556]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a8:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017aa:	4b89      	ldr	r3, [pc, #548]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d056      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b6:	4b86      	ldr	r3, [pc, #536]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	099b      	lsrs	r3, r3, #6
 80017bc:	f04f 0400 	mov.w	r4, #0
 80017c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	ea01 0103 	and.w	r1, r1, r3
 80017cc:	ea02 0204 	and.w	r2, r2, r4
 80017d0:	460b      	mov	r3, r1
 80017d2:	4614      	mov	r4, r2
 80017d4:	0160      	lsls	r0, r4, #5
 80017d6:	6678      	str	r0, [r7, #100]	; 0x64
 80017d8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80017da:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80017de:	6678      	str	r0, [r7, #100]	; 0x64
 80017e0:	015b      	lsls	r3, r3, #5
 80017e2:	663b      	str	r3, [r7, #96]	; 0x60
 80017e4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80017e8:	1a5b      	subs	r3, r3, r1
 80017ea:	eb64 0402 	sbc.w	r4, r4, r2
 80017ee:	01a0      	lsls	r0, r4, #6
 80017f0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80017f2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80017f4:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 80017f8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80017fa:	0198      	lsls	r0, r3, #6
 80017fc:	65b8      	str	r0, [r7, #88]	; 0x58
 80017fe:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8001802:	1aed      	subs	r5, r5, r3
 8001804:	eb66 0604 	sbc.w	r6, r6, r4
 8001808:	4633      	mov	r3, r6
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	657b      	str	r3, [r7, #84]	; 0x54
 800180e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001810:	4628      	mov	r0, r5
 8001812:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001816:	657b      	str	r3, [r7, #84]	; 0x54
 8001818:	462b      	mov	r3, r5
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	653b      	str	r3, [r7, #80]	; 0x50
 800181e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001822:	461d      	mov	r5, r3
 8001824:	4626      	mov	r6, r4
 8001826:	186b      	adds	r3, r5, r1
 8001828:	eb46 0402 	adc.w	r4, r6, r2
 800182c:	4618      	mov	r0, r3
 800182e:	4621      	mov	r1, r4
 8001830:	460b      	mov	r3, r1
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001838:	4602      	mov	r2, r0
 800183a:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 800183e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001840:	4603      	mov	r3, r0
 8001842:	025b      	lsls	r3, r3, #9
 8001844:	64bb      	str	r3, [r7, #72]	; 0x48
 8001846:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800184a:	4618      	mov	r0, r3
 800184c:	4621      	mov	r1, r4
 800184e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001850:	f04f 0400 	mov.w	r4, #0
 8001854:	461a      	mov	r2, r3
 8001856:	4623      	mov	r3, r4
 8001858:	f7fe fcd4 	bl	8000204 <__aeabi_uldivmod>
 800185c:	4603      	mov	r3, r0
 800185e:	460c      	mov	r4, r1
 8001860:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001862:	e04d      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001864:	4b5a      	ldr	r3, [pc, #360]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	099b      	lsrs	r3, r3, #6
 800186a:	f04f 0400 	mov.w	r4, #0
 800186e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	ea01 0103 	and.w	r1, r1, r3
 800187a:	ea02 0204 	and.w	r2, r2, r4
 800187e:	460b      	mov	r3, r1
 8001880:	4614      	mov	r4, r2
 8001882:	0160      	lsls	r0, r4, #5
 8001884:	6478      	str	r0, [r7, #68]	; 0x44
 8001886:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001888:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800188c:	6478      	str	r0, [r7, #68]	; 0x44
 800188e:	015b      	lsls	r3, r3, #5
 8001890:	643b      	str	r3, [r7, #64]	; 0x40
 8001892:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001896:	1a5b      	subs	r3, r3, r1
 8001898:	eb64 0402 	sbc.w	r4, r4, r2
 800189c:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 80018a0:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 80018a4:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 80018a8:	ebba 0a03 	subs.w	sl, sl, r3
 80018ac:	eb6b 0b04 	sbc.w	fp, fp, r4
 80018b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018be:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80018c4:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80018c8:	eb1a 0a01 	adds.w	sl, sl, r1
 80018cc:	eb4b 0b02 	adc.w	fp, fp, r2
 80018d0:	ea4f 238b 	mov.w	r3, fp, lsl #10
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
 80018d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d8:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34
 80018de:	ea4f 238a 	mov.w	r3, sl, lsl #10
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
 80018e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80018e8:	4650      	mov	r0, sl
 80018ea:	4659      	mov	r1, fp
 80018ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ee:	f04f 0400 	mov.w	r4, #0
 80018f2:	461a      	mov	r2, r3
 80018f4:	4623      	mov	r3, r4
 80018f6:	f7fe fc85 	bl	8000204 <__aeabi_uldivmod>
 80018fa:	4603      	mov	r3, r0
 80018fc:	460c      	mov	r4, r1
 80018fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001900:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	0c1b      	lsrs	r3, r3, #16
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	3301      	adds	r3, #1
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8001910:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001914:	fbb2 f3f3 	udiv	r3, r2, r3
 8001918:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800191a:	e0b4      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800191c:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001924:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d054      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	f04f 0400 	mov.w	r4, #0
 800193c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	ea01 0103 	and.w	r1, r1, r3
 8001948:	ea02 0204 	and.w	r2, r2, r4
 800194c:	460b      	mov	r3, r1
 800194e:	4614      	mov	r4, r2
 8001950:	0160      	lsls	r0, r4, #5
 8001952:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001956:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800195a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800195c:	015b      	lsls	r3, r3, #5
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001960:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001964:	1a5b      	subs	r3, r3, r1
 8001966:	eb64 0402 	sbc.w	r4, r4, r2
 800196a:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800196e:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001972:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001976:	ebb8 0803 	subs.w	r8, r8, r3
 800197a:	eb69 0904 	sbc.w	r9, r9, r4
 800197e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
 800198c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001990:	623b      	str	r3, [r7, #32]
 8001992:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001996:	eb18 0801 	adds.w	r8, r8, r1
 800199a:	eb49 0902 	adc.w	r9, r9, r2
 800199e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019b6:	4640      	mov	r0, r8
 80019b8:	4649      	mov	r1, r9
 80019ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019bc:	f04f 0400 	mov.w	r4, #0
 80019c0:	461a      	mov	r2, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	f7fe fc1e 	bl	8000204 <__aeabi_uldivmod>
 80019c8:	4603      	mov	r3, r0
 80019ca:	460c      	mov	r4, r1
 80019cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019ce:	e04b      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x338>
 80019d0:	40023800 	.word	0x40023800
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x364>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	099b      	lsrs	r3, r3, #6
 80019e2:	f04f 0400 	mov.w	r4, #0
 80019e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	ea01 0103 	and.w	r1, r1, r3
 80019f2:	ea02 0204 	and.w	r2, r2, r4
 80019f6:	460b      	mov	r3, r1
 80019f8:	4614      	mov	r4, r2
 80019fa:	0160      	lsls	r0, r4, #5
 80019fc:	6178      	str	r0, [r7, #20]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001a04:	6178      	str	r0, [r7, #20]
 8001a06:	015b      	lsls	r3, r3, #5
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001a0e:	1a5b      	subs	r3, r3, r1
 8001a10:	eb64 0402 	sbc.w	r4, r4, r2
 8001a14:	01a6      	lsls	r6, r4, #6
 8001a16:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001a1a:	019d      	lsls	r5, r3, #6
 8001a1c:	1aed      	subs	r5, r5, r3
 8001a1e:	eb66 0604 	sbc.w	r6, r6, r4
 8001a22:	00f3      	lsls	r3, r6, #3
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	00eb      	lsls	r3, r5, #3
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001a36:	186d      	adds	r5, r5, r1
 8001a38:	eb46 0602 	adc.w	r6, r6, r2
 8001a3c:	02b3      	lsls	r3, r6, #10
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	02ab      	lsls	r3, r5, #10
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001a50:	4628      	mov	r0, r5
 8001a52:	4631      	mov	r1, r6
 8001a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a56:	f04f 0400 	mov.w	r4, #0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4623      	mov	r3, r4
 8001a5e:	f7fe fbd1 	bl	8000204 <__aeabi_uldivmod>
 8001a62:	4603      	mov	r3, r0
 8001a64:	460c      	mov	r4, r1
 8001a66:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x364>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	0f1b      	lsrs	r3, r3, #28
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001a74:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001a7e:	e002      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x368>)
 8001a82:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3784      	adds	r7, #132	; 0x84
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	00f42400 	.word	0x00f42400

08001a9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8083 	beq.w	8001bbc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ab6:	4b95      	ldr	r3, [pc, #596]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d019      	beq.n	8001af6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ac2:	4b92      	ldr	r3, [pc, #584]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d106      	bne.n	8001adc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ace:	4b8f      	ldr	r3, [pc, #572]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ada:	d00c      	beq.n	8001af6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001adc:	4b8b      	ldr	r3, [pc, #556]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ae4:	2b0c      	cmp	r3, #12
 8001ae6:	d112      	bne.n	8001b0e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae8:	4b88      	ldr	r3, [pc, #544]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001af4:	d10b      	bne.n	8001b0e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af6:	4b85      	ldr	r3, [pc, #532]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d05b      	beq.n	8001bba <HAL_RCC_OscConfig+0x11e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d157      	bne.n	8001bba <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e1fc      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x8a>
 8001b18:	4a7c      	ldr	r2, [pc, #496]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001b1a:	4b7c      	ldr	r3, [pc, #496]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e01d      	b.n	8001b62 <HAL_RCC_OscConfig+0xc6>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b2e:	d10c      	bne.n	8001b4a <HAL_RCC_OscConfig+0xae>
 8001b30:	4a76      	ldr	r2, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001b32:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4a73      	ldr	r2, [pc, #460]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001b3e:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e00b      	b.n	8001b62 <HAL_RCC_OscConfig+0xc6>
 8001b4a:	4a70      	ldr	r2, [pc, #448]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001b4c:	4b6f      	ldr	r3, [pc, #444]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4a6d      	ldr	r2, [pc, #436]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001b58:	4b6c      	ldr	r3, [pc, #432]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d013      	beq.n	8001b92 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7fe fd1f 	bl	80005ac <HAL_GetTick>
 8001b6e:	60f8      	str	r0, [r7, #12]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b72:	f7fe fd1b 	bl	80005ac <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b64      	cmp	r3, #100	; 0x64
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e1c1      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b84:	4b61      	ldr	r3, [pc, #388]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0xd6>
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7fe fd0b 	bl	80005ac <HAL_GetTick>
 8001b96:	60f8      	str	r0, [r7, #12]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9a:	f7fe fd07 	bl	80005ac <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b64      	cmp	r3, #100	; 0x64
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e1ad      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bac:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0xfe>
 8001bb8:	e000      	b.n	8001bbc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d06f      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bc8:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d017      	beq.n	8001c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bd4:	4b4d      	ldr	r3, [pc, #308]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d105      	bne.n	8001bec <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001be0:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00b      	beq.n	8001c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bec:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d11c      	bne.n	8001c32 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf8:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d116      	bne.n	8001c32 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c04:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_OscConfig+0x180>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e175      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	493b      	ldr	r1, [pc, #236]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c30:	e03a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d020      	beq.n	8001c7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3a:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7fe fcb4 	bl	80005ac <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c48:	f7fe fcb0 	bl	80005ac <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e156      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5a:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4929      	ldr	r1, [pc, #164]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
 8001c7a:	e015      	b.n	8001ca8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7fe fc93 	bl	80005ac <HAL_GetTick>
 8001c86:	60f8      	str	r0, [r7, #12]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7fe fc8f 	bl	80005ac <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e135      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d037      	beq.n	8001d24 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d016      	beq.n	8001cea <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_RCC_OscConfig+0x278>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc2:	f7fe fc73 	bl	80005ac <HAL_GetTick>
 8001cc6:	60f8      	str	r0, [r7, #12]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cca:	f7fe fc6f 	bl	80005ac <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e115      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x22e>
 8001ce8:	e01c      	b.n	8001d24 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_RCC_OscConfig+0x278>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7fe fc5c 	bl	80005ac <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf6:	e00f      	b.n	8001d18 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7fe fc58 	bl	80005ac <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d908      	bls.n	8001d18 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0fe      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	42470000 	.word	0x42470000
 8001d14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	4b7d      	ldr	r3, [pc, #500]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1e9      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d07d      	beq.n	8001e2c <HAL_RCC_OscConfig+0x390>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	4a76      	ldr	r2, [pc, #472]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001d36:	4b76      	ldr	r3, [pc, #472]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d40:	4b73      	ldr	r3, [pc, #460]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d4c:	4a71      	ldr	r2, [pc, #452]	; (8001f14 <HAL_RCC_OscConfig+0x478>)
 8001d4e:	4b71      	ldr	r3, [pc, #452]	; (8001f14 <HAL_RCC_OscConfig+0x478>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d58:	f7fe fc28 	bl	80005ac <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x2d6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d60:	f7fe fc24 	bl	80005ac <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x2d6>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0ca      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d72:	4b68      	ldr	r3, [pc, #416]	; (8001f14 <HAL_RCC_OscConfig+0x478>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x2c4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2f8>
 8001d86:	4a62      	ldr	r2, [pc, #392]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001d88:	4b61      	ldr	r3, [pc, #388]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6713      	str	r3, [r2, #112]	; 0x70
 8001d92:	e01c      	b.n	8001dce <HAL_RCC_OscConfig+0x332>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x31a>
 8001d9c:	4a5c      	ldr	r2, [pc, #368]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001d9e:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	4a59      	ldr	r2, [pc, #356]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001daa:	4b59      	ldr	r3, [pc, #356]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
 8001db4:	e00b      	b.n	8001dce <HAL_RCC_OscConfig+0x332>
 8001db6:	4a56      	ldr	r2, [pc, #344]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001db8:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc2:	4a53      	ldr	r2, [pc, #332]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001dc4:	4b52      	ldr	r3, [pc, #328]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d015      	beq.n	8001e02 <HAL_RCC_OscConfig+0x366>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd6:	f7fe fbe9 	bl	80005ac <HAL_GetTick>
 8001dda:	60f8      	str	r0, [r7, #12]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_OscConfig+0x358>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7fe fbe5 	bl	80005ac <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x358>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e089      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ee      	beq.n	8001dde <HAL_RCC_OscConfig+0x342>
 8001e00:	e014      	b.n	8001e2c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e02:	f7fe fbd3 	bl	80005ac <HAL_GetTick>
 8001e06:	60f8      	str	r0, [r7, #12]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x384>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe fbcf 	bl	80005ac <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x384>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e073      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_RCC_OscConfig+0x36e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d068      	beq.n	8001f06 <HAL_RCC_OscConfig+0x46a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e34:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d060      	beq.n	8001f02 <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d145      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e48:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <HAL_RCC_OscConfig+0x47c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fbad 	bl	80005ac <HAL_GetTick>
 8001e52:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e56:	f7fe fba9 	bl	80005ac <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e04f      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e68:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e74:	4926      	ldr	r1, [pc, #152]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	019b      	lsls	r3, r3, #6
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	061b      	lsls	r3, r3, #24
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	071b      	lsls	r3, r3, #28
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_RCC_OscConfig+0x47c>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe fb7e 	bl	80005ac <HAL_GetTick>
 8001eb0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7fe fb7a 	bl	80005ac <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e020      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x418>
 8001ed2:	e018      	b.n	8001f06 <HAL_RCC_OscConfig+0x46a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_RCC_OscConfig+0x47c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7fe fb67 	bl	80005ac <HAL_GetTick>
 8001ede:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7fe fb63 	bl	80005ac <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e009      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_OscConfig+0x474>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x446>
 8001f00:	e001      	b.n	8001f06 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_RCC_OscConfig+0x46c>
    }
  }
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000
 8001f18:	42470060 	.word	0x42470060

08001f1c <HAL_TIM_OC_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e01d      	b.n	8001f6a <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_TIM_OC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 ffbc 	bl	8002ec0 <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3304      	adds	r3, #4
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f000 f86a 	bl	8002034 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_TIM_OC_ConfigChannel+0x1a>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e04e      	b.n	800202c <HAL_TIM_OC_ConfigChannel+0xb8>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  switch (Channel)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	d839      	bhi.n	8002018 <HAL_TIM_OC_ConfigChannel+0xa4>
 8001fa4:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <HAL_TIM_OC_ConfigChannel+0x38>)
 8001fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001faa:	bf00      	nop
 8001fac:	08001fe1 	.word	0x08001fe1
 8001fb0:	08002019 	.word	0x08002019
 8001fb4:	08002019 	.word	0x08002019
 8001fb8:	08002019 	.word	0x08002019
 8001fbc:	08001fef 	.word	0x08001fef
 8001fc0:	08002019 	.word	0x08002019
 8001fc4:	08002019 	.word	0x08002019
 8001fc8:	08002019 	.word	0x08002019
 8001fcc:	08001ffd 	.word	0x08001ffd
 8001fd0:	08002019 	.word	0x08002019
 8001fd4:	08002019 	.word	0x08002019
 8001fd8:	08002019 	.word	0x08002019
 8001fdc:	0800200b 	.word	0x0800200b
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f946 	bl	8002278 <TIM_OC1_SetConfig>
    }
    break;
 8001fec:	e015      	b.n	800201a <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68b9      	ldr	r1, [r7, #8]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 f8c7 	bl	8002188 <TIM_OC2_SetConfig>
    }
    break;
 8001ffa:	e00e      	b.n	800201a <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f9ac 	bl	8002360 <TIM_OC3_SetConfig>
    }
    break;
 8002008:	e007      	b.n	800201a <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fa1d 	bl	8002450 <TIM_OC4_SetConfig>
    }
    break;
 8002016:	e000      	b.n	800201a <HAL_TIM_OC_ConfigChannel+0xa6>
    
    default:
    break;    
 8002018:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim); 
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a44      	ldr	r2, [pc, #272]	; (800215c <TIM_Base_SetConfig+0x128>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d013      	beq.n	8002078 <TIM_Base_SetConfig+0x44>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002056:	d00f      	beq.n	8002078 <TIM_Base_SetConfig+0x44>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a41      	ldr	r2, [pc, #260]	; (8002160 <TIM_Base_SetConfig+0x12c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00b      	beq.n	8002078 <TIM_Base_SetConfig+0x44>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a40      	ldr	r2, [pc, #256]	; (8002164 <TIM_Base_SetConfig+0x130>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <TIM_Base_SetConfig+0x44>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3f      	ldr	r2, [pc, #252]	; (8002168 <TIM_Base_SetConfig+0x134>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d003      	beq.n	8002078 <TIM_Base_SetConfig+0x44>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3e      	ldr	r2, [pc, #248]	; (800216c <TIM_Base_SetConfig+0x138>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <TIM_Base_SetConfig+0x48>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <TIM_Base_SetConfig+0x4a>
 800207c:	2300      	movs	r3, #0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a31      	ldr	r2, [pc, #196]	; (800215c <TIM_Base_SetConfig+0x128>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d02b      	beq.n	80020f4 <TIM_Base_SetConfig+0xc0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a2:	d027      	beq.n	80020f4 <TIM_Base_SetConfig+0xc0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a2e      	ldr	r2, [pc, #184]	; (8002160 <TIM_Base_SetConfig+0x12c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d023      	beq.n	80020f4 <TIM_Base_SetConfig+0xc0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a2d      	ldr	r2, [pc, #180]	; (8002164 <TIM_Base_SetConfig+0x130>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d01f      	beq.n	80020f4 <TIM_Base_SetConfig+0xc0>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a2c      	ldr	r2, [pc, #176]	; (8002168 <TIM_Base_SetConfig+0x134>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d01b      	beq.n	80020f4 <TIM_Base_SetConfig+0xc0>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a2b      	ldr	r2, [pc, #172]	; (800216c <TIM_Base_SetConfig+0x138>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d017      	beq.n	80020f4 <TIM_Base_SetConfig+0xc0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a2a      	ldr	r2, [pc, #168]	; (8002170 <TIM_Base_SetConfig+0x13c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d013      	beq.n	80020f4 <TIM_Base_SetConfig+0xc0>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a29      	ldr	r2, [pc, #164]	; (8002174 <TIM_Base_SetConfig+0x140>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00f      	beq.n	80020f4 <TIM_Base_SetConfig+0xc0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a28      	ldr	r2, [pc, #160]	; (8002178 <TIM_Base_SetConfig+0x144>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d00b      	beq.n	80020f4 <TIM_Base_SetConfig+0xc0>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a27      	ldr	r2, [pc, #156]	; (800217c <TIM_Base_SetConfig+0x148>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d007      	beq.n	80020f4 <TIM_Base_SetConfig+0xc0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a26      	ldr	r2, [pc, #152]	; (8002180 <TIM_Base_SetConfig+0x14c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d003      	beq.n	80020f4 <TIM_Base_SetConfig+0xc0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a25      	ldr	r2, [pc, #148]	; (8002184 <TIM_Base_SetConfig+0x150>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d101      	bne.n	80020f8 <TIM_Base_SetConfig+0xc4>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <TIM_Base_SetConfig+0xc6>
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a0c      	ldr	r2, [pc, #48]	; (800215c <TIM_Base_SetConfig+0x128>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d003      	beq.n	8002136 <TIM_Base_SetConfig+0x102>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a0e      	ldr	r2, [pc, #56]	; (800216c <TIM_Base_SetConfig+0x138>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <TIM_Base_SetConfig+0x106>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <TIM_Base_SetConfig+0x108>
 800213a:	2300      	movs	r3, #0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	615a      	str	r2, [r3, #20]
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40010000 	.word	0x40010000
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800
 8002168:	40000c00 	.word	0x40000c00
 800216c:	40010400 	.word	0x40010400
 8002170:	40014000 	.word	0x40014000
 8002174:	40014400 	.word	0x40014400
 8002178:	40014800 	.word	0x40014800
 800217c:	40001800 	.word	0x40001800
 8002180:	40001c00 	.word	0x40001c00
 8002184:	40002000 	.word	0x40002000

08002188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	f023 0210 	bic.w	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ca:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f023 0320 	bic.w	r3, r3, #32
 80021de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a20      	ldr	r2, [pc, #128]	; (8002270 <TIM_OC2_SetConfig+0xe8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d003      	beq.n	80021fc <TIM_OC2_SetConfig+0x74>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a1f      	ldr	r2, [pc, #124]	; (8002274 <TIM_OC2_SetConfig+0xec>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d101      	bne.n	8002200 <TIM_OC2_SetConfig+0x78>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <TIM_OC2_SetConfig+0x7a>
 8002200:	2300      	movs	r3, #0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d021      	beq.n	800224a <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800220c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002220:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	621a      	str	r2, [r3, #32]
}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40010000 	.word	0x40010000
 8002274:	40010400 	.word	0x40010400

08002278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	f023 0201 	bic.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f023 0302 	bic.w	r3, r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a1f      	ldr	r2, [pc, #124]	; (8002358 <TIM_OC1_SetConfig+0xe0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <TIM_OC1_SetConfig+0x70>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a1e      	ldr	r2, [pc, #120]	; (800235c <TIM_OC1_SetConfig+0xe4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <TIM_OC1_SetConfig+0x74>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <TIM_OC1_SetConfig+0x76>
 80022ec:	2300      	movs	r3, #0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01e      	beq.n	8002330 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f023 0308 	bic.w	r3, r3, #8
 80022f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f023 0304 	bic.w	r3, r3, #4
 800230a:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800231a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	621a      	str	r2, [r3, #32]
} 
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40010000 	.word	0x40010000
 800235c:	40010400 	.word	0x40010400

08002360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0303 	bic.w	r3, r3, #3
 80023a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	4313      	orrs	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <TIM_OC3_SetConfig+0xe8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d003      	beq.n	80023d2 <TIM_OC3_SetConfig+0x72>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a1f      	ldr	r2, [pc, #124]	; (800244c <TIM_OC3_SetConfig+0xec>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <TIM_OC3_SetConfig+0x76>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <TIM_OC3_SetConfig+0x78>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d021      	beq.n	8002420 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023f6:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	621a      	str	r2, [r3, #32]
}
 800243a:	bf00      	nop
 800243c:	371c      	adds	r7, #28
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40010000 	.word	0x40010000
 800244c:	40010400 	.word	0x40010400

08002450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800248a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002492:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024a6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	031b      	lsls	r3, r3, #12
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a14      	ldr	r2, [pc, #80]	; (8002508 <TIM_OC4_SetConfig+0xb8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <TIM_OC4_SetConfig+0x74>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <TIM_OC4_SetConfig+0xbc>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d101      	bne.n	80024c8 <TIM_OC4_SetConfig+0x78>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <TIM_OC4_SetConfig+0x7a>
 80024c8:	2300      	movs	r3, #0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	019b      	lsls	r3, r3, #6
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	621a      	str	r2, [r3, #32]
}
 80024fc:	bf00      	nop
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40010000 	.word	0x40010000
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002524:	2302      	movs	r3, #2
 8002526:	e032      	b.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	6852      	ldr	r2, [r2, #4]
 8002542:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002546:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	6851      	ldr	r1, [r2, #4]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	6892      	ldr	r2, [r2, #8]
 8002564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002568:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	6891      	ldr	r1, [r2, #8]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	6852      	ldr	r2, [r2, #4]
 8002578:	430a      	orrs	r2, r1
 800257a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
} 
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e044      	b.n	8002640 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8002652:	4b6a      	ldr	r3, [pc, #424]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002654:	4a6a      	ldr	r2, [pc, #424]	; (8002800 <MX_ADC1_Init+0x1b4>)
 8002656:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002658:	4b68      	ldr	r3, [pc, #416]	; (80027fc <MX_ADC1_Init+0x1b0>)
 800265a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800265e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002660:	4b66      	ldr	r3, [pc, #408]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002666:	4b65      	ldr	r3, [pc, #404]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800266c:	4b63      	ldr	r3, [pc, #396]	; (80027fc <MX_ADC1_Init+0x1b0>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002672:	4b62      	ldr	r3, [pc, #392]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002674:	2200      	movs	r2, #0
 8002676:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002678:	4b60      	ldr	r3, [pc, #384]	; (80027fc <MX_ADC1_Init+0x1b0>)
 800267a:	2200      	movs	r2, #0
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800267e:	4b5f      	ldr	r3, [pc, #380]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002680:	4a60      	ldr	r2, [pc, #384]	; (8002804 <MX_ADC1_Init+0x1b8>)
 8002682:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002684:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 800268a:	4b5c      	ldr	r3, [pc, #368]	; (80027fc <MX_ADC1_Init+0x1b0>)
 800268c:	220a      	movs	r2, #10
 800268e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002690:	4b5a      	ldr	r3, [pc, #360]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002696:	4b59      	ldr	r3, [pc, #356]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002698:	2201      	movs	r2, #1
 800269a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800269c:	4857      	ldr	r0, [pc, #348]	; (80027fc <MX_ADC1_Init+0x1b0>)
 800269e:	f7fd ffae 	bl	80005fe <HAL_ADC_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <MX_ADC1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026a8:	2148      	movs	r1, #72	; 0x48
 80026aa:	4857      	ldr	r0, [pc, #348]	; (8002808 <MX_ADC1_Init+0x1bc>)
 80026ac:	f000 faf6 	bl	8002c9c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80026b4:	2301      	movs	r3, #1
 80026b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80026b8:	2304      	movs	r3, #4
 80026ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026bc:	463b      	mov	r3, r7
 80026be:	4619      	mov	r1, r3
 80026c0:	484e      	ldr	r0, [pc, #312]	; (80027fc <MX_ADC1_Init+0x1b0>)
 80026c2:	f7fe f947 	bl	8000954 <HAL_ADC_ConfigChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <MX_ADC1_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026cc:	2152      	movs	r1, #82	; 0x52
 80026ce:	484e      	ldr	r0, [pc, #312]	; (8002808 <MX_ADC1_Init+0x1bc>)
 80026d0:	f000 fae4 	bl	8002c9c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 80026d4:	2301      	movs	r3, #1
 80026d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80026d8:	2302      	movs	r3, #2
 80026da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026dc:	463b      	mov	r3, r7
 80026de:	4619      	mov	r1, r3
 80026e0:	4846      	ldr	r0, [pc, #280]	; (80027fc <MX_ADC1_Init+0x1b0>)
 80026e2:	f7fe f937 	bl	8000954 <HAL_ADC_ConfigChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <MX_ADC1_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026ec:	215b      	movs	r1, #91	; 0x5b
 80026ee:	4846      	ldr	r0, [pc, #280]	; (8002808 <MX_ADC1_Init+0x1bc>)
 80026f0:	f000 fad4 	bl	8002c9c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 80026f4:	2302      	movs	r3, #2
 80026f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80026f8:	2303      	movs	r3, #3
 80026fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026fc:	463b      	mov	r3, r7
 80026fe:	4619      	mov	r1, r3
 8002700:	483e      	ldr	r0, [pc, #248]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002702:	f7fe f927 	bl	8000954 <HAL_ADC_ConfigChannel>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <MX_ADC1_Init+0xc8>
  {
    _Error_Handler(__FILE__, __LINE__);
 800270c:	2164      	movs	r1, #100	; 0x64
 800270e:	483e      	ldr	r0, [pc, #248]	; (8002808 <MX_ADC1_Init+0x1bc>)
 8002710:	f000 fac4 	bl	8002c9c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 8002714:	2303      	movs	r3, #3
 8002716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002718:	2304      	movs	r3, #4
 800271a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800271c:	463b      	mov	r3, r7
 800271e:	4619      	mov	r1, r3
 8002720:	4836      	ldr	r0, [pc, #216]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002722:	f7fe f917 	bl	8000954 <HAL_ADC_ConfigChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <MX_ADC1_Init+0xe8>
  {
    _Error_Handler(__FILE__, __LINE__);
 800272c:	216d      	movs	r1, #109	; 0x6d
 800272e:	4836      	ldr	r0, [pc, #216]	; (8002808 <MX_ADC1_Init+0x1bc>)
 8002730:	f000 fab4 	bl	8002c9c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 8002734:	2304      	movs	r3, #4
 8002736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002738:	2305      	movs	r3, #5
 800273a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800273c:	463b      	mov	r3, r7
 800273e:	4619      	mov	r1, r3
 8002740:	482e      	ldr	r0, [pc, #184]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002742:	f7fe f907 	bl	8000954 <HAL_ADC_ConfigChannel>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <MX_ADC1_Init+0x108>
  {
    _Error_Handler(__FILE__, __LINE__);
 800274c:	2176      	movs	r1, #118	; 0x76
 800274e:	482e      	ldr	r0, [pc, #184]	; (8002808 <MX_ADC1_Init+0x1bc>)
 8002750:	f000 faa4 	bl	8002c9c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_5;
 8002754:	2305      	movs	r3, #5
 8002756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002758:	2306      	movs	r3, #6
 800275a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800275c:	463b      	mov	r3, r7
 800275e:	4619      	mov	r1, r3
 8002760:	4826      	ldr	r0, [pc, #152]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002762:	f7fe f8f7 	bl	8000954 <HAL_ADC_ConfigChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <MX_ADC1_Init+0x128>
  {
    _Error_Handler(__FILE__, __LINE__);
 800276c:	217f      	movs	r1, #127	; 0x7f
 800276e:	4826      	ldr	r0, [pc, #152]	; (8002808 <MX_ADC1_Init+0x1bc>)
 8002770:	f000 fa94 	bl	8002c9c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 8002774:	2306      	movs	r3, #6
 8002776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002778:	2307      	movs	r3, #7
 800277a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800277c:	463b      	mov	r3, r7
 800277e:	4619      	mov	r1, r3
 8002780:	481e      	ldr	r0, [pc, #120]	; (80027fc <MX_ADC1_Init+0x1b0>)
 8002782:	f7fe f8e7 	bl	8000954 <HAL_ADC_ConfigChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <MX_ADC1_Init+0x148>
  {
    _Error_Handler(__FILE__, __LINE__);
 800278c:	2188      	movs	r1, #136	; 0x88
 800278e:	481e      	ldr	r0, [pc, #120]	; (8002808 <MX_ADC1_Init+0x1bc>)
 8002790:	f000 fa84 	bl	8002c9c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_7;
 8002794:	2307      	movs	r3, #7
 8002796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002798:	2308      	movs	r3, #8
 800279a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800279c:	463b      	mov	r3, r7
 800279e:	4619      	mov	r1, r3
 80027a0:	4816      	ldr	r0, [pc, #88]	; (80027fc <MX_ADC1_Init+0x1b0>)
 80027a2:	f7fe f8d7 	bl	8000954 <HAL_ADC_ConfigChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <MX_ADC1_Init+0x168>
  {
    _Error_Handler(__FILE__, __LINE__);
 80027ac:	2191      	movs	r1, #145	; 0x91
 80027ae:	4816      	ldr	r0, [pc, #88]	; (8002808 <MX_ADC1_Init+0x1bc>)
 80027b0:	f000 fa74 	bl	8002c9c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_8;
 80027b4:	2308      	movs	r3, #8
 80027b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80027b8:	2309      	movs	r3, #9
 80027ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027bc:	463b      	mov	r3, r7
 80027be:	4619      	mov	r1, r3
 80027c0:	480e      	ldr	r0, [pc, #56]	; (80027fc <MX_ADC1_Init+0x1b0>)
 80027c2:	f7fe f8c7 	bl	8000954 <HAL_ADC_ConfigChannel>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <MX_ADC1_Init+0x188>
  {
    _Error_Handler(__FILE__, __LINE__);
 80027cc:	219a      	movs	r1, #154	; 0x9a
 80027ce:	480e      	ldr	r0, [pc, #56]	; (8002808 <MX_ADC1_Init+0x1bc>)
 80027d0:	f000 fa64 	bl	8002c9c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_9;
 80027d4:	2309      	movs	r3, #9
 80027d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80027d8:	230a      	movs	r3, #10
 80027da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027dc:	463b      	mov	r3, r7
 80027de:	4619      	mov	r1, r3
 80027e0:	4806      	ldr	r0, [pc, #24]	; (80027fc <MX_ADC1_Init+0x1b0>)
 80027e2:	f7fe f8b7 	bl	8000954 <HAL_ADC_ConfigChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <MX_ADC1_Init+0x1a8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80027ec:	21a3      	movs	r1, #163	; 0xa3
 80027ee:	4806      	ldr	r0, [pc, #24]	; (8002808 <MX_ADC1_Init+0x1bc>)
 80027f0:	f000 fa54 	bl	8002c9c <_Error_Handler>
  }

}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000024 	.word	0x20000024
 8002800:	40012000 	.word	0x40012000
 8002804:	0f000001 	.word	0x0f000001
 8002808:	08002ffc 	.word	0x08002ffc

0800280c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a16      	ldr	r2, [pc, #88]	; (8002874 <HAL_ADC_MspInit+0x68>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d125      	bne.n	800286a <HAL_ADC_MspInit+0x5e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	4a15      	ldr	r2, [pc, #84]	; (8002878 <HAL_ADC_MspInit+0x6c>)
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_ADC_MspInit+0x6c>)
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6453      	str	r3, [r2, #68]	; 0x44
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_ADC_MspInit+0x6c>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800283a:	23ff      	movs	r3, #255	; 0xff
 800283c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800283e:	2303      	movs	r3, #3
 8002840:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002846:	f107 030c 	add.w	r3, r7, #12
 800284a:	4619      	mov	r1, r3
 800284c:	480b      	ldr	r0, [pc, #44]	; (800287c <HAL_ADC_MspInit+0x70>)
 800284e:	f7fe fcd5 	bl	80011fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002852:	2303      	movs	r3, #3
 8002854:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002856:	2303      	movs	r3, #3
 8002858:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285e:	f107 030c 	add.w	r3, r7, #12
 8002862:	4619      	mov	r1, r3
 8002864:	4806      	ldr	r0, [pc, #24]	; (8002880 <HAL_ADC_MspInit+0x74>)
 8002866:	f7fe fcc9 	bl	80011fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800286a:	bf00      	nop
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40012000 	.word	0x40012000
 8002878:	40023800 	.word	0x40023800
 800287c:	40020000 	.word	0x40020000
 8002880:	40020400 	.word	0x40020400

08002884 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8002888:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <MX_CAN1_Init+0x64>)
 800288a:	4a18      	ldr	r2, [pc, #96]	; (80028ec <MX_CAN1_Init+0x68>)
 800288c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <MX_CAN1_Init+0x64>)
 8002890:	2210      	movs	r2, #16
 8002892:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <MX_CAN1_Init+0x64>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  hcan1.Init.SJW = CAN_SJW_1TQ;
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <MX_CAN1_Init+0x64>)
 800289c:	2200      	movs	r2, #0
 800289e:	60da      	str	r2, [r3, #12]
  hcan1.Init.BS1 = CAN_BS1_1TQ;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <MX_CAN1_Init+0x64>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
  hcan1.Init.BS2 = CAN_BS2_1TQ;
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <MX_CAN1_Init+0x64>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TTCM = DISABLE;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <MX_CAN1_Init+0x64>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
  hcan1.Init.ABOM = DISABLE;
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <MX_CAN1_Init+0x64>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	61da      	str	r2, [r3, #28]
  hcan1.Init.AWUM = DISABLE;
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <MX_CAN1_Init+0x64>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	621a      	str	r2, [r3, #32]
  hcan1.Init.NART = DISABLE;
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <MX_CAN1_Init+0x64>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <MX_CAN1_Init+0x64>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <MX_CAN1_Init+0x64>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80028d0:	4805      	ldr	r0, [pc, #20]	; (80028e8 <MX_CAN1_Init+0x64>)
 80028d2:	f7fe fa61 	bl	8000d98 <HAL_CAN_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <MX_CAN1_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 80028dc:	2145      	movs	r1, #69	; 0x45
 80028de:	4804      	ldr	r0, [pc, #16]	; (80028f0 <MX_CAN1_Init+0x6c>)
 80028e0:	f000 f9dc 	bl	8002c9c <_Error_Handler>
  }

}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	2000006c 	.word	0x2000006c
 80028ec:	40006400 	.word	0x40006400
 80028f0:	0800300c 	.word	0x0800300c

080028f4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_CAN_MspInit+0x58>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d11e      	bne.n	8002944 <HAL_CAN_MspInit+0x50>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	4a11      	ldr	r2, [pc, #68]	; (8002950 <HAL_CAN_MspInit+0x5c>)
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_CAN_MspInit+0x5c>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <HAL_CAN_MspInit+0x5c>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
  
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002922:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002926:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	2302      	movs	r3, #2
 800292a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002930:	2303      	movs	r3, #3
 8002932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002934:	2309      	movs	r3, #9
 8002936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	4619      	mov	r1, r3
 800293e:	4805      	ldr	r0, [pc, #20]	; (8002954 <HAL_CAN_MspInit+0x60>)
 8002940:	f7fe fc5c 	bl	80011fc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002944:	bf00      	nop
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40006400 	.word	0x40006400
 8002950:	40023800 	.word	0x40023800
 8002954:	40020000 	.word	0x40020000

08002958 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	4a43      	ldr	r2, [pc, #268]	; (8002a70 <MX_GPIO_Init+0x118>)
 8002964:	4b42      	ldr	r3, [pc, #264]	; (8002a70 <MX_GPIO_Init+0x118>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	f043 0310 	orr.w	r3, r3, #16
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <MX_GPIO_Init+0x118>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4a3c      	ldr	r2, [pc, #240]	; (8002a70 <MX_GPIO_Init+0x118>)
 8002980:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <MX_GPIO_Init+0x118>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <MX_GPIO_Init+0x118>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	4a35      	ldr	r2, [pc, #212]	; (8002a70 <MX_GPIO_Init+0x118>)
 800299c:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <MX_GPIO_Init+0x118>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b32      	ldr	r3, [pc, #200]	; (8002a70 <MX_GPIO_Init+0x118>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	4a2e      	ldr	r2, [pc, #184]	; (8002a70 <MX_GPIO_Init+0x118>)
 80029b8:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <MX_GPIO_Init+0x118>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <MX_GPIO_Init+0x118>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <MX_GPIO_Init+0x118>)
 80029d4:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <MX_GPIO_Init+0x118>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f043 0308 	orr.w	r3, r3, #8
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <MX_GPIO_Init+0x118>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80029ea:	2200      	movs	r2, #0
 80029ec:	f64f 01f8 	movw	r1, #63736	; 0xf8f8
 80029f0:	4820      	ldr	r0, [pc, #128]	; (8002a74 <MX_GPIO_Init+0x11c>)
 80029f2:	f7fe fd95 	bl	8001520 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 80029f6:	2200      	movs	r2, #0
 80029f8:	f24f 41f8 	movw	r1, #62712	; 0xf4f8
 80029fc:	481e      	ldr	r0, [pc, #120]	; (8002a78 <MX_GPIO_Init+0x120>)
 80029fe:	f7fe fd8f 	bl	8001520 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_2 
 8002a02:	2200      	movs	r2, #0
 8002a04:	f649 017c 	movw	r1, #39036	; 0x987c
 8002a08:	481c      	ldr	r0, [pc, #112]	; (8002a7c <MX_GPIO_Init+0x124>)
 8002a0a:	f7fe fd89 	bl	8001520 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 PE4 PE5 PE6 
                           PE7 PE11 PE12 PE13 
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8002a0e:	f64f 03f8 	movw	r3, #63736	; 0xf8f8
 8002a12:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a14:	2301      	movs	r3, #1
 8002a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	4813      	ldr	r0, [pc, #76]	; (8002a74 <MX_GPIO_Init+0x11c>)
 8002a28:	f7fe fbe8 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8002a2c:	f24f 43f8 	movw	r3, #62712	; 0xf4f8
 8002a30:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	480c      	ldr	r0, [pc, #48]	; (8002a78 <MX_GPIO_Init+0x120>)
 8002a46:	f7fe fbd9 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD15 PD2 
                           PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_2 
 8002a4a:	f649 037c 	movw	r3, #39036	; 0x987c
 8002a4e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a50:	2301      	movs	r3, #1
 8002a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4619      	mov	r1, r3
 8002a62:	4806      	ldr	r0, [pc, #24]	; (8002a7c <MX_GPIO_Init+0x124>)
 8002a64:	f7fe fbca 	bl	80011fc <HAL_GPIO_Init>

}
 8002a68:	bf00      	nop
 8002a6a:	3728      	adds	r7, #40	; 0x28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40020c00 	.word	0x40020c00

08002a80 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a86:	f7fd fd45 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a8a:	f000 f88b 	bl	8002ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a8e:	f7ff ff63 	bl	8002958 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002a92:	f7ff fddb 	bl	800264c <MX_ADC1_Init>
  MX_CAN1_Init();
 8002a96:	f7ff fef5 	bl	8002884 <MX_CAN1_Init>
  MX_TIM1_Init();
 8002a9a:	f000 f99d 	bl	8002dd8 <MX_TIM1_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1); //Enable A1
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	2140      	movs	r1, #64	; 0x40
 8002aa2:	483c      	ldr	r0, [pc, #240]	; (8002b94 <main+0x114>)
 8002aa4:	f7fe fd3c 	bl	8001520 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);//Enable A2
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	2110      	movs	r1, #16
 8002aac:	483a      	ldr	r0, [pc, #232]	; (8002b98 <main+0x118>)
 8002aae:	f7fe fd37 	bl	8001520 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//Enable A3
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ab8:	4836      	ldr	r0, [pc, #216]	; (8002b94 <main+0x114>)
 8002aba:	f7fe fd31 	bl	8001520 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);//Enable A4
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ac4:	4835      	ldr	r0, [pc, #212]	; (8002b9c <main+0x11c>)
 8002ac6:	f7fe fd2b 	bl	8001520 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, 1); //Enable B1
 8002aca:	2201      	movs	r2, #1
 8002acc:	2108      	movs	r1, #8
 8002ace:	4831      	ldr	r0, [pc, #196]	; (8002b94 <main+0x114>)
 8002ad0:	f7fe fd26 	bl	8001520 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//Enable B2
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	482f      	ldr	r0, [pc, #188]	; (8002b98 <main+0x118>)
 8002ada:	f7fe fd21 	bl	8001520 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);//Enable B3
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ae4:	482b      	ldr	r0, [pc, #172]	; (8002b94 <main+0x114>)
 8002ae6:	f7fe fd1b 	bl	8001520 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);//Enable B4
 8002aea:	2201      	movs	r2, #1
 8002aec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002af0:	482a      	ldr	r0, [pc, #168]	; (8002b9c <main+0x11c>)
 8002af2:	f7fe fd15 	bl	8001520 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1);//Enable B5
 8002af6:	2201      	movs	r2, #1
 8002af8:	2110      	movs	r1, #16
 8002afa:	4828      	ldr	r0, [pc, #160]	; (8002b9c <main+0x11c>)
 8002afc:	f7fe fd10 	bl	8001520 <HAL_GPIO_WritePin>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8002b00:	4827      	ldr	r0, [pc, #156]	; (8002ba0 <main+0x120>)
 8002b02:	f7fd fdbf 	bl	8000684 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002b06:	f04f 31ff 	mov.w	r1, #4294967295
 8002b0a:	4825      	ldr	r0, [pc, #148]	; (8002ba0 <main+0x120>)
 8002b0c:	f7fd fe93 	bl	8000836 <HAL_ADC_PollForConversion>
	  int VALVE_0 = HAL_ADC_GetValue(&hadc1);
 8002b10:	4823      	ldr	r0, [pc, #140]	; (8002ba0 <main+0x120>)
 8002b12:	f7fd ff12 	bl	800093a <HAL_ADC_GetValue>
 8002b16:	4603      	mov	r3, r0
 8002b18:	607b      	str	r3, [r7, #4]
	  HAL_ADC_Stop(&hadc1);
 8002b1a:	4821      	ldr	r0, [pc, #132]	; (8002ba0 <main+0x120>)
 8002b1c:	f7fd fe58 	bl	80007d0 <HAL_ADC_Stop>
	  //Valve 0 (A1)
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8002b20:	2201      	movs	r2, #1
 8002b22:	2120      	movs	r1, #32
 8002b24:	481b      	ldr	r0, [pc, #108]	; (8002b94 <main+0x114>)
 8002b26:	f7fe fcfb 	bl	8001520 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	4819      	ldr	r0, [pc, #100]	; (8002b94 <main+0x114>)
 8002b30:	f7fe fcf6 	bl	8001520 <HAL_GPIO_WritePin>

	  	  HAL_Delay(1000);
 8002b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b38:	f7fd fd44 	bl	80005c4 <HAL_Delay>

	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2120      	movs	r1, #32
 8002b40:	4814      	ldr	r0, [pc, #80]	; (8002b94 <main+0x114>)
 8002b42:	f7fe fced 	bl	8001520 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8002b46:	2201      	movs	r2, #1
 8002b48:	2180      	movs	r1, #128	; 0x80
 8002b4a:	4812      	ldr	r0, [pc, #72]	; (8002b94 <main+0x114>)
 8002b4c:	f7fe fce8 	bl	8001520 <HAL_GPIO_WritePin>

	  	  HAL_Delay(1000);
 8002b50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b54:	f7fd fd36 	bl	80005c4 <HAL_Delay>


	  	 //Valve 1 (B1)
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8002b58:	2201      	movs	r2, #1
 8002b5a:	2110      	movs	r1, #16
 8002b5c:	480d      	ldr	r0, [pc, #52]	; (8002b94 <main+0x114>)
 8002b5e:	f7fe fcdf 	bl	8001520 <HAL_GPIO_WritePin>
	  	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2140      	movs	r1, #64	; 0x40
 8002b66:	480c      	ldr	r0, [pc, #48]	; (8002b98 <main+0x118>)
 8002b68:	f7fe fcda 	bl	8001520 <HAL_GPIO_WritePin>

	  	  	  HAL_Delay(1000);
 8002b6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b70:	f7fd fd28 	bl	80005c4 <HAL_Delay>

	  	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2110      	movs	r1, #16
 8002b78:	4806      	ldr	r0, [pc, #24]	; (8002b94 <main+0x114>)
 8002b7a:	f7fe fcd1 	bl	8001520 <HAL_GPIO_WritePin>
	  	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8002b7e:	2201      	movs	r2, #1
 8002b80:	2140      	movs	r1, #64	; 0x40
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <main+0x118>)
 8002b84:	f7fe fccc 	bl	8001520 <HAL_GPIO_WritePin>

	  	  	  HAL_Delay(1000);
 8002b88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b8c:	f7fd fd1a 	bl	80005c4 <HAL_Delay>
  {
 8002b90:	e7b6      	b.n	8002b00 <main+0x80>
 8002b92:	bf00      	nop
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40020c00 	.word	0x40020c00
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	20000024 	.word	0x20000024

08002ba4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b094      	sub	sp, #80	; 0x50
 8002ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	4a37      	ldr	r2, [pc, #220]	; (8002c8c <SystemClock_Config+0xe8>)
 8002bb0:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <SystemClock_Config+0xe8>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <SystemClock_Config+0xe8>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	4a31      	ldr	r2, [pc, #196]	; (8002c90 <SystemClock_Config+0xec>)
 8002bcc:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <SystemClock_Config+0xec>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <SystemClock_Config+0xec>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002be6:	2301      	movs	r3, #1
 8002be8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bf4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002bfe:	235a      	movs	r3, #90	; 0x5a
 8002c00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c02:	2302      	movs	r3, #2
 8002c04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002c06:	2302      	movs	r3, #2
 8002c08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c0e:	f107 031c 	add.w	r3, r7, #28
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe ff42 	bl	8001a9c <HAL_RCC_OscConfig>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d004      	beq.n	8002c28 <SystemClock_Config+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c1e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002c22:	481c      	ldr	r0, [pc, #112]	; (8002c94 <SystemClock_Config+0xf0>)
 8002c24:	f000 f83a 	bl	8002c9c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c28:	230f      	movs	r3, #15
 8002c2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	2102      	movs	r1, #2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fc84 	bl	8001554 <HAL_RCC_ClockConfig>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d004      	beq.n	8002c5c <SystemClock_Config+0xb8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c52:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8002c56:	480f      	ldr	r0, [pc, #60]	; (8002c94 <SystemClock_Config+0xf0>)
 8002c58:	f000 f820 	bl	8002c9c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002c5c:	f7fe fd5c 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <SystemClock_Config+0xf4>)
 8002c64:	fba3 2302 	umull	r2, r3, r3, r2
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fa8f 	bl	800118e <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002c70:	2004      	movs	r0, #4
 8002c72:	f7fe fa99 	bl	80011a8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002c76:	2200      	movs	r2, #0
 8002c78:	2100      	movs	r1, #0
 8002c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7e:	f7fe fa6a 	bl	8001156 <HAL_NVIC_SetPriority>
}
 8002c82:	bf00      	nop
 8002c84:	3750      	adds	r7, #80	; 0x50
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000
 8002c94:	0800301c 	.word	0x0800301c
 8002c98:	10624dd3 	.word	0x10624dd3

08002c9c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8002ca6:	e7fe      	b.n	8002ca6 <_Error_Handler+0xa>

08002ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cac:	2003      	movs	r0, #3
 8002cae:	f7fe fa47 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	f06f 000b 	mvn.w	r0, #11
 8002cba:	f7fe fa4c 	bl	8001156 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f06f 000a 	mvn.w	r0, #10
 8002cc6:	f7fe fa46 	bl	8001156 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2100      	movs	r1, #0
 8002cce:	f06f 0009 	mvn.w	r0, #9
 8002cd2:	f7fe fa40 	bl	8001156 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2100      	movs	r1, #0
 8002cda:	f06f 0004 	mvn.w	r0, #4
 8002cde:	f7fe fa3a 	bl	8001156 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f06f 0003 	mvn.w	r0, #3
 8002cea:	f7fe fa34 	bl	8001156 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	f06f 0001 	mvn.w	r0, #1
 8002cf6:	f7fe fa2e 	bl	8001156 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002d02:	f7fe fa28 	bl	8001156 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <HardFault_Handler+0x4>

08002d1e <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d22:	e7fe      	b.n	8002d22 <MemManage_Handler+0x4>

08002d24 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <BusFault_Handler+0x4>

08002d2a <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <UsageFault_Handler+0x4>

08002d30 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d5e:	f7fd fc17 	bl	8000590 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002d62:	f7fe fa3d 	bl	80011e0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d70:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <SystemInit+0x60>)
 8002d72:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <SystemInit+0x60>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d80:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <SystemInit+0x64>)
 8002d82:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <SystemInit+0x64>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d8c:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <SystemInit+0x64>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d92:	4a0f      	ldr	r2, [pc, #60]	; (8002dd0 <SystemInit+0x64>)
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <SystemInit+0x64>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <SystemInit+0x64>)
 8002da4:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <SystemInit+0x68>)
 8002da6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002da8:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <SystemInit+0x64>)
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <SystemInit+0x64>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <SystemInit+0x64>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dba:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <SystemInit+0x60>)
 8002dbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dc0:	609a      	str	r2, [r3, #8]
#endif
}
 8002dc2:	bf00      	nop
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	24003010 	.word	0x24003010

08002dd8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b090      	sub	sp, #64	; 0x40
 8002ddc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8002dde:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <MX_TIM1_Init+0xdc>)
 8002de0:	4a35      	ldr	r2, [pc, #212]	; (8002eb8 <MX_TIM1_Init+0xe0>)
 8002de2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002de4:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <MX_TIM1_Init+0xdc>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dea:	4b32      	ldr	r3, [pc, #200]	; (8002eb4 <MX_TIM1_Init+0xdc>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002df0:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <MX_TIM1_Init+0xdc>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <MX_TIM1_Init+0xdc>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <MX_TIM1_Init+0xdc>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002e02:	482c      	ldr	r0, [pc, #176]	; (8002eb4 <MX_TIM1_Init+0xdc>)
 8002e04:	f7ff f88a 	bl	8001f1c <HAL_TIM_OC_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <MX_TIM1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e0e:	2140      	movs	r1, #64	; 0x40
 8002e10:	482a      	ldr	r0, [pc, #168]	; (8002ebc <MX_TIM1_Init+0xe4>)
 8002e12:	f7ff ff43 	bl	8002c9c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e22:	4619      	mov	r1, r3
 8002e24:	4823      	ldr	r0, [pc, #140]	; (8002eb4 <MX_TIM1_Init+0xdc>)
 8002e26:	f7ff fb73 	bl	8002510 <HAL_TIMEx_MasterConfigSynchronization>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <MX_TIM1_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e30:	2147      	movs	r1, #71	; 0x47
 8002e32:	4822      	ldr	r0, [pc, #136]	; (8002ebc <MX_TIM1_Init+0xe4>)
 8002e34:	f7ff ff32 	bl	8002c9c <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e50:	2300      	movs	r3, #0
 8002e52:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e54:	f107 031c 	add.w	r3, r7, #28
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4815      	ldr	r0, [pc, #84]	; (8002eb4 <MX_TIM1_Init+0xdc>)
 8002e5e:	f7ff f889 	bl	8001f74 <HAL_TIM_OC_ConfigChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <MX_TIM1_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e68:	2153      	movs	r1, #83	; 0x53
 8002e6a:	4814      	ldr	r0, [pc, #80]	; (8002ebc <MX_TIM1_Init+0xe4>)
 8002e6c:	f7ff ff16 	bl	8002c9c <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e8e:	463b      	mov	r3, r7
 8002e90:	4619      	mov	r1, r3
 8002e92:	4808      	ldr	r0, [pc, #32]	; (8002eb4 <MX_TIM1_Init+0xdc>)
 8002e94:	f7ff fb81 	bl	800259a <HAL_TIMEx_ConfigBreakDeadTime>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <MX_TIM1_Init+0xce>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e9e:	215f      	movs	r1, #95	; 0x5f
 8002ea0:	4806      	ldr	r0, [pc, #24]	; (8002ebc <MX_TIM1_Init+0xe4>)
 8002ea2:	f7ff fefb 	bl	8002c9c <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8002ea6:	4803      	ldr	r0, [pc, #12]	; (8002eb4 <MX_TIM1_Init+0xdc>)
 8002ea8:	f000 f82c 	bl	8002f04 <HAL_TIM_MspPostInit>

}
 8002eac:	bf00      	nop
 8002eae:	3740      	adds	r7, #64	; 0x40
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	200000b0 	.word	0x200000b0
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	0800302c 	.word	0x0800302c

08002ec0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <HAL_TIM_OC_MspInit+0x3c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10d      	bne.n	8002eee <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <HAL_TIM_OC_MspInit+0x40>)
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_TIM_OC_MspInit+0x40>)
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee2:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <HAL_TIM_OC_MspInit+0x40>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40010000 	.word	0x40010000
 8002f00:	40023800 	.word	0x40023800

08002f04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <HAL_TIM_MspPostInit+0x3c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d110      	bne.n	8002f38 <HAL_TIM_MspPostInit+0x34>
  
    /**TIM1 GPIO Configuration    
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	4619      	mov	r1, r3
 8002f32:	4804      	ldr	r0, [pc, #16]	; (8002f44 <HAL_TIM_MspPostInit+0x40>)
 8002f34:	f7fe f962 	bl	80011fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f38:	bf00      	nop
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40021000 	.word	0x40021000

08002f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f4e:	e003      	b.n	8002f58 <LoopCopyDataInit>

08002f50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f56:	3104      	adds	r1, #4

08002f58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f58:	480b      	ldr	r0, [pc, #44]	; (8002f88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f60:	d3f6      	bcc.n	8002f50 <CopyDataInit>
  ldr  r2, =_sbss
 8002f62:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f64:	e002      	b.n	8002f6c <LoopFillZerobss>

08002f66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f68:	f842 3b04 	str.w	r3, [r2], #4

08002f6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f70:	d3f9      	bcc.n	8002f66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f72:	f7ff fefb 	bl	8002d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f76:	f000 f811 	bl	8002f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f7a:	f7ff fd81 	bl	8002a80 <main>
  bx  lr    
 8002f7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f84:	0800305c 	.word	0x0800305c
  ldr  r0, =_sdata
 8002f88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f8c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8002f90:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8002f94:	200000ec 	.word	0x200000ec

08002f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f98:	e7fe      	b.n	8002f98 <ADC_IRQHandler>
	...

08002f9c <__libc_init_array>:
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	4e0d      	ldr	r6, [pc, #52]	; (8002fd4 <__libc_init_array+0x38>)
 8002fa0:	4c0d      	ldr	r4, [pc, #52]	; (8002fd8 <__libc_init_array+0x3c>)
 8002fa2:	1ba4      	subs	r4, r4, r6
 8002fa4:	10a4      	asrs	r4, r4, #2
 8002fa6:	2500      	movs	r5, #0
 8002fa8:	42a5      	cmp	r5, r4
 8002faa:	d109      	bne.n	8002fc0 <__libc_init_array+0x24>
 8002fac:	4e0b      	ldr	r6, [pc, #44]	; (8002fdc <__libc_init_array+0x40>)
 8002fae:	4c0c      	ldr	r4, [pc, #48]	; (8002fe0 <__libc_init_array+0x44>)
 8002fb0:	f000 f818 	bl	8002fe4 <_init>
 8002fb4:	1ba4      	subs	r4, r4, r6
 8002fb6:	10a4      	asrs	r4, r4, #2
 8002fb8:	2500      	movs	r5, #0
 8002fba:	42a5      	cmp	r5, r4
 8002fbc:	d105      	bne.n	8002fca <__libc_init_array+0x2e>
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
 8002fc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fc4:	4798      	blx	r3
 8002fc6:	3501      	adds	r5, #1
 8002fc8:	e7ee      	b.n	8002fa8 <__libc_init_array+0xc>
 8002fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fce:	4798      	blx	r3
 8002fd0:	3501      	adds	r5, #1
 8002fd2:	e7f2      	b.n	8002fba <__libc_init_array+0x1e>
 8002fd4:	08003054 	.word	0x08003054
 8002fd8:	08003054 	.word	0x08003054
 8002fdc:	08003054 	.word	0x08003054
 8002fe0:	08003058 	.word	0x08003058

08002fe4 <_init>:
 8002fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe6:	bf00      	nop
 8002fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fea:	bc08      	pop	{r3}
 8002fec:	469e      	mov	lr, r3
 8002fee:	4770      	bx	lr

08002ff0 <_fini>:
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff2:	bf00      	nop
 8002ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff6:	bc08      	pop	{r3}
 8002ff8:	469e      	mov	lr, r3
 8002ffa:	4770      	bx	lr
