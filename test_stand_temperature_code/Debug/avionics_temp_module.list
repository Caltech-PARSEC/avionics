
avionics_temp_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d04  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001ec8  08001ec8  00011ec8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001f30  08001f30  00011f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001f38  08001f38  00011f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001f3c  08001f3c  00011f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001fc  20000004  08001f44  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000200  08001f44  00020200  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bb02  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003777  00000000  00000000  0003bb36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000071cb  00000000  00000000  0003f2ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009f8  00000000  00000000  00046478  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000dc8  00000000  00000000  00046e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007601  00000000  00000000  00047c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003dc5  00000000  00000000  0004f239  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00052ffe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001cd8  00000000  00000000  0005307c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001eb0 	.word	0x08001eb0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08001eb0 	.word	0x08001eb0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_InitTick+0x24>)
{
 8000518:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800051a:	6818      	ldr	r0, [r3, #0]
 800051c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000520:	fbb0 f0f3 	udiv	r0, r0, r3
 8000524:	f000 fa5a 	bl	80009dc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000528:	2200      	movs	r2, #0
 800052a:	4621      	mov	r1, r4
 800052c:	f04f 30ff 	mov.w	r0, #4294967295
 8000530:	f000 fa20 	bl	8000974 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000534:	2000      	movs	r0, #0
 8000536:	bd10      	pop	{r4, pc}
 8000538:	20000000 	.word	0x20000000

0800053c <HAL_Init>:
{
 800053c:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <HAL_Init+0x30>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000546:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800054e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000556:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000558:	2003      	movs	r0, #3
 800055a:	f000 f9f9 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff ffd8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000564:	f001 fbf0 	bl	8001d48 <HAL_MspInit>
}
 8000568:	2000      	movs	r0, #0
 800056a:	bd08      	pop	{r3, pc}
 800056c:	40023c00 	.word	0x40023c00

08000570 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000570:	4a02      	ldr	r2, [pc, #8]	; (800057c <HAL_IncTick+0xc>)
 8000572:	6813      	ldr	r3, [r2, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000020 	.word	0x20000020

08000580 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <HAL_GetTick+0x8>)
 8000582:	6818      	ldr	r0, [r3, #0]
}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000020 	.word	0x20000020

0800058c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800058c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800058e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000590:	f7ff fff6 	bl	8000580 <HAL_GetTick>
  uint32_t wait = Delay;
 8000594:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000596:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000598:	4605      	mov	r5, r0
  {
     wait++;
 800059a:	bf18      	it	ne
 800059c:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800059e:	f7ff ffef 	bl	8000580 <HAL_GetTick>
 80005a2:	1b40      	subs	r0, r0, r5
 80005a4:	42a0      	cmp	r0, r4
 80005a6:	d3fa      	bcc.n	800059e <HAL_Delay+0x12>
  {
  }
}
 80005a8:	b003      	add	sp, #12
 80005aa:	bd30      	pop	{r4, r5, pc}

080005ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005ac:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005ae:	4604      	mov	r4, r0
 80005b0:	2800      	cmp	r0, #0
 80005b2:	f000 8099 	beq.w	80006e8 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80005b8:	b923      	cbnz	r3, 80005c4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005ba:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005c0:	f001 f8a0 	bl	8001704 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005c6:	06db      	lsls	r3, r3, #27
 80005c8:	f100 808c 	bmi.w	80006e4 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005d2:	f023 0302 	bic.w	r3, r3, #2
 80005d6:	f043 0302 	orr.w	r3, r3, #2
 80005da:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005dc:	4b43      	ldr	r3, [pc, #268]	; (80006ec <HAL_ADC_Init+0x140>)
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005e4:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	6861      	ldr	r1, [r4, #4]
 80005ea:	430a      	orrs	r2, r1
 80005ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ee:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005f0:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000602:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000604:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000606:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800060a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	430a      	orrs	r2, r1
 8000610:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000612:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000614:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800061a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800061c:	689a      	ldr	r2, [r3, #8]
 800061e:	430a      	orrs	r2, r1
 8000620:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000622:	4933      	ldr	r1, [pc, #204]	; (80006f0 <HAL_ADC_Init+0x144>)
 8000624:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000626:	428a      	cmp	r2, r1
 8000628:	d050      	beq.n	80006cc <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800062a:	6899      	ldr	r1, [r3, #8]
 800062c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000630:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000632:	6899      	ldr	r1, [r3, #8]
 8000634:	430a      	orrs	r2, r1
 8000636:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000638:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800063a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800063c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000640:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000646:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000648:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800064a:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800064c:	f022 0202 	bic.w	r2, r2, #2
 8000650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000652:	689a      	ldr	r2, [r3, #8]
 8000654:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000658:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800065a:	6a22      	ldr	r2, [r4, #32]
 800065c:	2a00      	cmp	r2, #0
 800065e:	d03d      	beq.n	80006dc <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000660:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000662:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000668:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000670:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	3901      	subs	r1, #1
 8000676:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800067a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800067c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800067e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000680:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000688:	3901      	subs	r1, #1
 800068a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000690:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000692:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000694:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80006a0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006a2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006a4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006ac:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006ae:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006b0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006b4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006b6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006ba:	f023 0303 	bic.w	r3, r3, #3
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006c4:	2300      	movs	r3, #0
 80006c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006ca:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006da:	e7b4      	b.n	8000646 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006dc:	685a      	ldr	r2, [r3, #4]
 80006de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006e2:	e7ca      	b.n	800067a <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 80006e4:	2001      	movs	r0, #1
 80006e6:	e7ed      	b.n	80006c4 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 80006e8:	2001      	movs	r0, #1
}
 80006ea:	bd10      	pop	{r4, pc}
 80006ec:	40012300 	.word	0x40012300
 80006f0:	0f000001 	.word	0x0f000001

080006f4 <HAL_ADC_ConfigChannel>:
{
 80006f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80006f6:	2300      	movs	r3, #0
 80006f8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d06a      	beq.n	80007d8 <HAL_ADC_ConfigChannel+0xe4>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000702:	680d      	ldr	r5, [r1, #0]
 8000704:	6804      	ldr	r4, [r0, #0]
 8000706:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000708:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800070a:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800070c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000710:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000712:	d92a      	bls.n	800076a <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000714:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000718:	68e7      	ldr	r7, [r4, #12]
 800071a:	3b1e      	subs	r3, #30
 800071c:	f04f 0e07 	mov.w	lr, #7
 8000720:	fa0e fe03 	lsl.w	lr, lr, r3
 8000724:	ea27 070e 	bic.w	r7, r7, lr
 8000728:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800072a:	68e7      	ldr	r7, [r4, #12]
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	433b      	orrs	r3, r7
 8000732:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000734:	684a      	ldr	r2, [r1, #4]
 8000736:	2a06      	cmp	r2, #6
 8000738:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800073c:	d825      	bhi.n	800078a <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800073e:	4413      	add	r3, r2
 8000740:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000742:	1f59      	subs	r1, r3, #5
 8000744:	231f      	movs	r3, #31
 8000746:	408b      	lsls	r3, r1
 8000748:	ea27 0303 	bic.w	r3, r7, r3
 800074c:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800074e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000750:	fa06 f101 	lsl.w	r1, r6, r1
 8000754:	4311      	orrs	r1, r2
 8000756:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <HAL_ADC_ConfigChannel+0x11c>)
 800075a:	429c      	cmp	r4, r3
 800075c:	d034      	beq.n	80007c8 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 800075e:	2300      	movs	r3, #0
 8000760:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000764:	4618      	mov	r0, r3
}
 8000766:	b003      	add	sp, #12
 8000768:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800076a:	6927      	ldr	r7, [r4, #16]
 800076c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000770:	f04f 0e07 	mov.w	lr, #7
 8000774:	fa0e fe03 	lsl.w	lr, lr, r3
 8000778:	ea27 070e 	bic.w	r7, r7, lr
 800077c:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800077e:	6927      	ldr	r7, [r4, #16]
 8000780:	fa02 f303 	lsl.w	r3, r2, r3
 8000784:	433b      	orrs	r3, r7
 8000786:	6123      	str	r3, [r4, #16]
 8000788:	e7d4      	b.n	8000734 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 800078a:	2a0c      	cmp	r2, #12
 800078c:	d80e      	bhi.n	80007ac <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800078e:	4413      	add	r3, r2
 8000790:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000792:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000796:	231f      	movs	r3, #31
 8000798:	4093      	lsls	r3, r2
 800079a:	ea21 0303 	bic.w	r3, r1, r3
 800079e:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007a2:	fa06 f202 	lsl.w	r2, r6, r2
 80007a6:	431a      	orrs	r2, r3
 80007a8:	6322      	str	r2, [r4, #48]	; 0x30
 80007aa:	e7d5      	b.n	8000758 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007ac:	4413      	add	r3, r2
 80007ae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007b0:	3b41      	subs	r3, #65	; 0x41
 80007b2:	221f      	movs	r2, #31
 80007b4:	409a      	lsls	r2, r3
 80007b6:	ea21 0202 	bic.w	r2, r1, r2
 80007ba:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007be:	fa06 f103 	lsl.w	r1, r6, r3
 80007c2:	4311      	orrs	r1, r2
 80007c4:	62e1      	str	r1, [r4, #44]	; 0x2c
 80007c6:	e7c7      	b.n	8000758 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007c8:	2d12      	cmp	r5, #18
 80007ca:	d107      	bne.n	80007dc <HAL_ADC_ConfigChannel+0xe8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80007cc:	4a11      	ldr	r2, [pc, #68]	; (8000814 <HAL_ADC_ConfigChannel+0x120>)
 80007ce:	6853      	ldr	r3, [r2, #4]
 80007d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007d4:	6053      	str	r3, [r2, #4]
 80007d6:	e7c2      	b.n	800075e <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80007d8:	2002      	movs	r0, #2
 80007da:	e7c4      	b.n	8000766 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_ADC_ConfigChannel+0x124>)
 80007de:	429d      	cmp	r5, r3
 80007e0:	d001      	beq.n	80007e6 <HAL_ADC_ConfigChannel+0xf2>
 80007e2:	2d11      	cmp	r5, #17
 80007e4:	d1bb      	bne.n	800075e <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80007e6:	490b      	ldr	r1, [pc, #44]	; (8000814 <HAL_ADC_ConfigChannel+0x120>)
 80007e8:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007ea:	429d      	cmp	r5, r3
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80007ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007f0:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007f2:	d1b4      	bne.n	800075e <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_ADC_ConfigChannel+0x128>)
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <HAL_ADC_ConfigChannel+0x12c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80007fe:	230a      	movs	r3, #10
 8000800:	4353      	muls	r3, r2
        counter--;
 8000802:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000804:	9b01      	ldr	r3, [sp, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0a9      	beq.n	800075e <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800080a:	9b01      	ldr	r3, [sp, #4]
 800080c:	3b01      	subs	r3, #1
 800080e:	e7f8      	b.n	8000802 <HAL_ADC_ConfigChannel+0x10e>
 8000810:	40012000 	.word	0x40012000
 8000814:	40012300 	.word	0x40012300
 8000818:	10000012 	.word	0x10000012
 800081c:	20000000 	.word	0x20000000
 8000820:	000f4240 	.word	0x000f4240

08000824 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000824:	b570      	push	{r4, r5, r6, lr}
  uint32_t InitStatus = CAN_INITSTATUS_FAILED;
  uint32_t tickstart = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000826:	4604      	mov	r4, r0
 8000828:	2800      	cmp	r0, #0
 800082a:	d072      	beq.n	8000912 <HAL_CAN_Init+0xee>
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  

  if(hcan->State == HAL_CAN_STATE_RESET)
 800082c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000830:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000834:	b91b      	cbnz	r3, 800083e <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000836:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 800083a:	f000 ffd7 	bl	80017ec <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 800083e:	2302      	movs	r3, #2
 8000840:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000844:	6823      	ldr	r3, [r4, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	f022 0202 	bic.w	r2, r2, #2
 800084c:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	f042 0201 	orr.w	r2, r2, #1
 8000854:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000856:	f7ff fe93 	bl	8000580 <HAL_GetTick>
 800085a:	4606      	mov	r6, r0

  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800085c:	6823      	ldr	r3, [r4, #0]
 800085e:	685d      	ldr	r5, [r3, #4]
 8000860:	f015 0501 	ands.w	r5, r5, #1
 8000864:	d057      	beq.n	8000916 <HAL_CAN_Init+0xf2>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000866:	685a      	ldr	r2, [r3, #4]
 8000868:	07d1      	lsls	r1, r2, #31
 800086a:	d54f      	bpl.n	800090c <HAL_CAN_Init+0xe8>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 800086c:	69a2      	ldr	r2, [r4, #24]
 800086e:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	bf0c      	ite	eq
 8000874:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000878:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800087c:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 800087e:	69e2      	ldr	r2, [r4, #28]
 8000880:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	bf0c      	ite	eq
 8000886:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 800088a:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800088e:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8000890:	6a22      	ldr	r2, [r4, #32]
 8000892:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	bf0c      	ite	eq
 8000898:	f042 0220 	orreq.w	r2, r2, #32
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 800089c:	f022 0220 	bicne.w	r2, r2, #32
 80008a0:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80008a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008a4:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	bf0c      	ite	eq
 80008aa:	f042 0210 	orreq.w	r2, r2, #16
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 80008ae:	f022 0210 	bicne.w	r2, r2, #16
 80008b2:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80008b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80008b6:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	bf0c      	ite	eq
 80008bc:	f042 0208 	orreq.w	r2, r2, #8
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80008c0:	f022 0208 	bicne.w	r2, r2, #8
 80008c4:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 80008c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80008c8:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	bf0c      	ite	eq
 80008ce:	f042 0204 	orreq.w	r2, r2, #4
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 80008d2:	f022 0204 	bicne.w	r2, r2, #4
 80008d6:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 80008d8:	68e1      	ldr	r1, [r4, #12]
 80008da:	68a2      	ldr	r2, [r4, #8]
 80008dc:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.SJW) | \
 80008de:	6921      	ldr	r1, [r4, #16]
 80008e0:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.BS1) | \
 80008e2:	6961      	ldr	r1, [r4, #20]
 80008e4:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.BS2) | \
               ((uint32_t)hcan->Init.Prescaler - 1U);
 80008e6:	6861      	ldr	r1, [r4, #4]
 80008e8:	3901      	subs	r1, #1
                ((uint32_t)hcan->Init.BS2) | \
 80008ea:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 80008ec:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	f022 0201 	bic.w	r2, r2, #1
 80008f4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008f6:	f7ff fe43 	bl	8000580 <HAL_GetTick>
 80008fa:	4605      	mov	r5, r0

   /* Wait the acknowledge */
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	07d2      	lsls	r2, r2, #31
 8000902:	d413      	bmi.n	800092c <HAL_CAN_Init+0x108>
       return HAL_TIMEOUT;
     }
   }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000904:	6858      	ldr	r0, [r3, #4]
 8000906:	f010 0001 	ands.w	r0, r0, #1
 800090a:	d01b      	beq.n	8000944 <HAL_CAN_Init+0x120>
    return HAL_OK;
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 800090c:	2304      	movs	r3, #4
 800090e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    
    /* Return function status */
    return HAL_ERROR;
 8000912:	2001      	movs	r0, #1
  }
}
 8000914:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000916:	f7ff fe33 	bl	8000580 <HAL_GetTick>
 800091a:	1b80      	subs	r0, r0, r6
 800091c:	280a      	cmp	r0, #10
 800091e:	d99d      	bls.n	800085c <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000920:	2003      	movs	r0, #3
 8000922:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hcan);
 8000926:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      return HAL_TIMEOUT;
 800092a:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 800092c:	f7ff fe28 	bl	8000580 <HAL_GetTick>
 8000930:	1b40      	subs	r0, r0, r5
 8000932:	280a      	cmp	r0, #10
 8000934:	d9e2      	bls.n	80008fc <HAL_CAN_Init+0xd8>
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000936:	2003      	movs	r0, #3
       __HAL_UNLOCK(hcan);
 8000938:	2300      	movs	r3, #0
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 800093a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
       __HAL_UNLOCK(hcan);
 800093e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
       return HAL_TIMEOUT;
 8000942:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 8000944:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000946:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 8000948:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800094c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000950 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000952:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000954:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000958:	041b      	lsls	r3, r3, #16
 800095a:	0c1b      	lsrs	r3, r3, #16
 800095c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000960:	0200      	lsls	r0, r0, #8
 8000962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000966:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800096a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800096c:	60d3      	str	r3, [r2, #12]
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000976:	b530      	push	{r4, r5, lr}
 8000978:	68dc      	ldr	r4, [r3, #12]
 800097a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000984:	2b04      	cmp	r3, #4
 8000986:	bf28      	it	cs
 8000988:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	f04f 0501 	mov.w	r5, #1
 8000990:	fa05 f303 	lsl.w	r3, r5, r3
 8000994:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000998:	bf8c      	ite	hi
 800099a:	3c03      	subhi	r4, #3
 800099c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099e:	4019      	ands	r1, r3
 80009a0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a2:	fa05 f404 	lsl.w	r4, r5, r4
 80009a6:	3c01      	subs	r4, #1
 80009a8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80009aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	ea42 0201 	orr.w	r2, r2, r1
 80009b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	bfaf      	iteee	ge
 80009b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	f000 000f 	andlt.w	r0, r0, #15
 80009be:	4b06      	ldrlt	r3, [pc, #24]	; (80009d8 <HAL_NVIC_SetPriority+0x64>)
 80009c0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c2:	bfa5      	ittet	ge
 80009c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80009c8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80009d0:	bd30      	pop	{r4, r5, pc}
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00
 80009d8:	e000ed14 	.word	0xe000ed14

080009dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009dc:	3801      	subs	r0, #1
 80009de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009e2:	d20a      	bcs.n	80009fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	21f0      	movs	r1, #240	; 0xf0
 80009ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e010 	.word	0xe000e010
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a0a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a0c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a0e:	bf0c      	ite	eq
 8000a10:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a14:	f022 0204 	bicne.w	r2, r2, #4
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	4770      	bx	lr
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a20:	4770      	bx	lr

08000a22 <HAL_SYSTICK_IRQHandler>:
{
 8000a22:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000a24:	f7ff fffc 	bl	8000a20 <HAL_SYSTICK_Callback>
 8000a28:	bd08      	pop	{r3, pc}

08000a2a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000a2a:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	b168      	cbz	r0, 8000a4c <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000a30:	7903      	ldrb	r3, [r0, #4]
 8000a32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a36:	b913      	cbnz	r3, 8000a3e <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000a38:	7142      	strb	r2, [r0, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000a3a:	f000 ff29 	bl	8001890 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000a42:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000a44:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000a46:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000a48:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000a4a:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000a4c:	2001      	movs	r0, #1
}
 8000a4e:	bd10      	pop	{r4, pc}

08000a50 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000a50:	7943      	ldrb	r3, [r0, #5]
 8000a52:	2b01      	cmp	r3, #1
{
 8000a54:	b530      	push	{r4, r5, lr}
 8000a56:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8000a5a:	d017      	beq.n	8000a8c <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000a5c:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a5e:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8000a60:	6823      	ldr	r3, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000a62:	f640 75fe 	movw	r5, #4094	; 0xffe
 8000a66:	4095      	lsls	r5, r2
 8000a68:	ea23 0505 	bic.w	r5, r3, r5
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000a6c:	c90a      	ldmia	r1, {r1, r3}
 8000a6e:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000a70:	4093      	lsls	r3, r2
 8000a72:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000a74:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	21c0      	movs	r1, #192	; 0xc0
 8000a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7e:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000a82:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000a84:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000a86:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8000a8c:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8000a8e:	bd30      	pop	{r4, r5, pc}

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a94:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a96:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a98:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000c3c <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a9c:	4a65      	ldr	r2, [pc, #404]	; (8000c34 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a9e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000c40 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aa4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000aa6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aaa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000aac:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000ab4:	45b6      	cmp	lr, r6
 8000ab6:	f040 80aa 	bne.w	8000c0e <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aba:	684c      	ldr	r4, [r1, #4]
 8000abc:	f024 0710 	bic.w	r7, r4, #16
 8000ac0:	2f02      	cmp	r7, #2
 8000ac2:	d116      	bne.n	8000af2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000ac4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ac8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000acc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ad0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ad4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ad8:	f04f 0c0f 	mov.w	ip, #15
 8000adc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ae0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ae4:	690d      	ldr	r5, [r1, #16]
 8000ae6:	fa05 f50b 	lsl.w	r5, r5, fp
 8000aea:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000aee:	f8ca 5020 	str.w	r5, [sl, #32]
 8000af2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000af6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000af8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000afc:	fa05 f50a 	lsl.w	r5, r5, sl
 8000b00:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b02:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b06:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b0a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b0e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b10:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b14:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000b16:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b1a:	d811      	bhi.n	8000b40 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000b1c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b1e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b22:	68cf      	ldr	r7, [r1, #12]
 8000b24:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000b28:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000b2c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b2e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b30:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b34:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000b38:	409f      	lsls	r7, r3
 8000b3a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000b3e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b40:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b42:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b44:	688f      	ldr	r7, [r1, #8]
 8000b46:	fa07 f70a 	lsl.w	r7, r7, sl
 8000b4a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000b4c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b4e:	00e5      	lsls	r5, r4, #3
 8000b50:	d55d      	bpl.n	8000c0e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	f04f 0b00 	mov.w	fp, #0
 8000b56:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b5a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b5e:	4d36      	ldr	r5, [pc, #216]	; (8000c38 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b60:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b64:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000b68:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000b6c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000b70:	9703      	str	r7, [sp, #12]
 8000b72:	9f03      	ldr	r7, [sp, #12]
 8000b74:	f023 0703 	bic.w	r7, r3, #3
 8000b78:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b7c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b80:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b84:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b88:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b8c:	f04f 0e0f 	mov.w	lr, #15
 8000b90:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b94:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b96:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b9a:	d03f      	beq.n	8000c1c <HAL_GPIO_Init+0x18c>
 8000b9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ba0:	42a8      	cmp	r0, r5
 8000ba2:	d03d      	beq.n	8000c20 <HAL_GPIO_Init+0x190>
 8000ba4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ba8:	42a8      	cmp	r0, r5
 8000baa:	d03b      	beq.n	8000c24 <HAL_GPIO_Init+0x194>
 8000bac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bb0:	42a8      	cmp	r0, r5
 8000bb2:	d039      	beq.n	8000c28 <HAL_GPIO_Init+0x198>
 8000bb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bb8:	42a8      	cmp	r0, r5
 8000bba:	d037      	beq.n	8000c2c <HAL_GPIO_Init+0x19c>
 8000bbc:	4548      	cmp	r0, r9
 8000bbe:	d037      	beq.n	8000c30 <HAL_GPIO_Init+0x1a0>
 8000bc0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000bc4:	42a8      	cmp	r0, r5
 8000bc6:	bf14      	ite	ne
 8000bc8:	2507      	movne	r5, #7
 8000bca:	2506      	moveq	r5, #6
 8000bcc:	fa05 f50c 	lsl.w	r5, r5, ip
 8000bd0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bd4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000bd6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bd8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bda:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000bde:	bf0c      	ite	eq
 8000be0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000be2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000be4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000be6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000bec:	bf0c      	ite	eq
 8000bee:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bf0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000bf2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bfa:	bf0c      	ite	eq
 8000bfc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bfe:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000c00:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000c02:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c04:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000c06:	bf54      	ite	pl
 8000c08:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000c0a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000c0c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0e:	3301      	adds	r3, #1
 8000c10:	2b10      	cmp	r3, #16
 8000c12:	f47f af48 	bne.w	8000aa6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000c16:	b005      	add	sp, #20
 8000c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c1c:	465d      	mov	r5, fp
 8000c1e:	e7d5      	b.n	8000bcc <HAL_GPIO_Init+0x13c>
 8000c20:	2501      	movs	r5, #1
 8000c22:	e7d3      	b.n	8000bcc <HAL_GPIO_Init+0x13c>
 8000c24:	2502      	movs	r5, #2
 8000c26:	e7d1      	b.n	8000bcc <HAL_GPIO_Init+0x13c>
 8000c28:	2503      	movs	r5, #3
 8000c2a:	e7cf      	b.n	8000bcc <HAL_GPIO_Init+0x13c>
 8000c2c:	2504      	movs	r5, #4
 8000c2e:	e7cd      	b.n	8000bcc <HAL_GPIO_Init+0x13c>
 8000c30:	2505      	movs	r5, #5
 8000c32:	e7cb      	b.n	8000bcc <HAL_GPIO_Init+0x13c>
 8000c34:	40013c00 	.word	0x40013c00
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40021400 	.word	0x40021400

08000c44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c44:	b10a      	cbz	r2, 8000c4a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c46:	6181      	str	r1, [r0, #24]
 8000c48:	4770      	bx	lr
 8000c4a:	0409      	lsls	r1, r1, #16
 8000c4c:	e7fb      	b.n	8000c46 <HAL_GPIO_WritePin+0x2>
	...

08000c50 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c50:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000c52:	4604      	mov	r4, r0
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d062      	beq.n	8000d1e <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000c58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c60:	b91b      	cbnz	r3, 8000c6a <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c62:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c66:	f000 feb9 	bl	80019dc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c6a:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c6c:	4e2d      	ldr	r6, [pc, #180]	; (8000d24 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000c6e:	4d2e      	ldr	r5, [pc, #184]	; (8000d28 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c70:	2324      	movs	r3, #36	; 0x24
 8000c72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000c76:	6813      	ldr	r3, [r2, #0]
 8000c78:	f023 0301 	bic.w	r3, r3, #1
 8000c7c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c7e:	f000 f931 	bl	8000ee4 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c82:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8000c84:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c86:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c8a:	42b3      	cmp	r3, r6
 8000c8c:	bf84      	itt	hi
 8000c8e:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8000c92:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000c94:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c96:	bf91      	iteee	ls
 8000c98:	1c69      	addls	r1, r5, #1
 8000c9a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000c9e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000ca2:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000ca4:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ca6:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000ca8:	d821      	bhi.n	8000cee <HAL_I2C_Init+0x9e>
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cb0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	bf98      	it	ls
 8000cb8:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cba:	6a21      	ldr	r1, [r4, #32]
 8000cbc:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000cbe:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000cc4:	68e1      	ldr	r1, [r4, #12]
 8000cc6:	6923      	ldr	r3, [r4, #16]
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000ccc:	69a1      	ldr	r1, [r4, #24]
 8000cce:	6963      	ldr	r3, [r4, #20]
 8000cd0:	430b      	orrs	r3, r1
 8000cd2:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000cd4:	6813      	ldr	r3, [r2, #0]
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cdc:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000cde:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ce0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ce2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ce6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ce8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000cee:	68a1      	ldr	r1, [r4, #8]
 8000cf0:	b949      	cbnz	r1, 8000d06 <HAL_I2C_Init+0xb6>
 8000cf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000cf6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cfa:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000cfe:	b163      	cbz	r3, 8000d1a <HAL_I2C_Init+0xca>
 8000d00:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000d04:	e7d9      	b.n	8000cba <HAL_I2C_Init+0x6a>
 8000d06:	2119      	movs	r1, #25
 8000d08:	434b      	muls	r3, r1
 8000d0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d0e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000d12:	b113      	cbz	r3, 8000d1a <HAL_I2C_Init+0xca>
 8000d14:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000d18:	e7cf      	b.n	8000cba <HAL_I2C_Init+0x6a>
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	e7cd      	b.n	8000cba <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8000d1e:	2001      	movs	r0, #1
}
 8000d20:	bd70      	pop	{r4, r5, r6, pc}
 8000d22:	bf00      	nop
 8000d24:	000186a0 	.word	0x000186a0
 8000d28:	000f4240 	.word	0x000f4240

08000d2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d34:	4c18      	ldr	r4, [pc, #96]	; (8000d98 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_PWREx_EnableOverDrive+0x70>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000d4e:	f7ff fc17 	bl	8000580 <HAL_GetTick>
 8000d52:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d54:	6863      	ldr	r3, [r4, #4]
 8000d56:	03da      	lsls	r2, r3, #15
 8000d58:	d50b      	bpl.n	8000d72 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d5c:	4c0e      	ldr	r4, [pc, #56]	; (8000d98 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d5e:	2201      	movs	r2, #1
 8000d60:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000d62:	f7ff fc0d 	bl	8000580 <HAL_GetTick>
 8000d66:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d68:	6863      	ldr	r3, [r4, #4]
 8000d6a:	039b      	lsls	r3, r3, #14
 8000d6c:	d50a      	bpl.n	8000d84 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000d6e:	2000      	movs	r0, #0
 8000d70:	e006      	b.n	8000d80 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d72:	f7ff fc05 	bl	8000580 <HAL_GetTick>
 8000d76:	1b40      	subs	r0, r0, r5
 8000d78:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d7c:	d9ea      	bls.n	8000d54 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000d7e:	2003      	movs	r0, #3
}
 8000d80:	b003      	add	sp, #12
 8000d82:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d84:	f7ff fbfc 	bl	8000580 <HAL_GetTick>
 8000d88:	1b40      	subs	r0, r0, r5
 8000d8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d8e:	d9eb      	bls.n	8000d68 <HAL_PWREx_EnableOverDrive+0x3c>
 8000d90:	e7f5      	b.n	8000d7e <HAL_PWREx_EnableOverDrive+0x52>
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40007000 	.word	0x40007000
 8000d9c:	420e0040 	.word	0x420e0040
 8000da0:	420e0044 	.word	0x420e0044

08000da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000da8:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000daa:	4604      	mov	r4, r0
 8000dac:	b910      	cbnz	r0, 8000db4 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000dae:	2001      	movs	r0, #1
 8000db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000db4:	4b44      	ldr	r3, [pc, #272]	; (8000ec8 <HAL_RCC_ClockConfig+0x124>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	f002 020f 	and.w	r2, r2, #15
 8000dbc:	428a      	cmp	r2, r1
 8000dbe:	d328      	bcc.n	8000e12 <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc0:	6821      	ldr	r1, [r4, #0]
 8000dc2:	078f      	lsls	r7, r1, #30
 8000dc4:	d42d      	bmi.n	8000e22 <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dc6:	07c8      	lsls	r0, r1, #31
 8000dc8:	d440      	bmi.n	8000e4c <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000dca:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <HAL_RCC_ClockConfig+0x124>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	f002 020f 	and.w	r2, r2, #15
 8000dd2:	4295      	cmp	r5, r2
 8000dd4:	d366      	bcc.n	8000ea4 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd6:	6822      	ldr	r2, [r4, #0]
 8000dd8:	0751      	lsls	r1, r2, #29
 8000dda:	d46c      	bmi.n	8000eb6 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ddc:	0713      	lsls	r3, r2, #28
 8000dde:	d507      	bpl.n	8000df0 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000de0:	4a3a      	ldr	r2, [pc, #232]	; (8000ecc <HAL_RCC_ClockConfig+0x128>)
 8000de2:	6921      	ldr	r1, [r4, #16]
 8000de4:	6893      	ldr	r3, [r2, #8]
 8000de6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000dea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dee:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000df0:	f000 f888 	bl	8000f04 <HAL_RCC_GetSysClockFreq>
 8000df4:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <HAL_RCC_ClockConfig+0x128>)
 8000df6:	4a36      	ldr	r2, [pc, #216]	; (8000ed0 <HAL_RCC_ClockConfig+0x12c>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000dfe:	5cd3      	ldrb	r3, [r2, r3]
 8000e00:	40d8      	lsrs	r0, r3
 8000e02:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <HAL_RCC_ClockConfig+0x130>)
 8000e04:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff fb84 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e12:	b2ca      	uxtb	r2, r1
 8000e14:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d1c6      	bne.n	8000dae <HAL_RCC_ClockConfig+0xa>
 8000e20:	e7ce      	b.n	8000dc0 <HAL_RCC_ClockConfig+0x1c>
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e24:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e28:	bf1e      	ittt	ne
 8000e2a:	689a      	ldrne	r2, [r3, #8]
 8000e2c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000e30:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e32:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e34:	bf42      	ittt	mi
 8000e36:	689a      	ldrmi	r2, [r3, #8]
 8000e38:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000e3c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	68a0      	ldr	r0, [r4, #8]
 8000e42:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e46:	4302      	orrs	r2, r0
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	e7bc      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e4c:	6862      	ldr	r2, [r4, #4]
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <HAL_RCC_ClockConfig+0x128>)
 8000e50:	2a01      	cmp	r2, #1
 8000e52:	d11d      	bne.n	8000e90 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5a:	d0a8      	beq.n	8000dae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e5c:	4e1b      	ldr	r6, [pc, #108]	; (8000ecc <HAL_RCC_ClockConfig+0x128>)
 8000e5e:	68b3      	ldr	r3, [r6, #8]
 8000e60:	f023 0303 	bic.w	r3, r3, #3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000e68:	f7ff fb8a 	bl	8000580 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e6c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e70:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e72:	68b3      	ldr	r3, [r6, #8]
 8000e74:	6862      	ldr	r2, [r4, #4]
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e7e:	d0a4      	beq.n	8000dca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e80:	f7ff fb7e 	bl	8000580 <HAL_GetTick>
 8000e84:	1bc0      	subs	r0, r0, r7
 8000e86:	4540      	cmp	r0, r8
 8000e88:	d9f3      	bls.n	8000e72 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000e8a:	2003      	movs	r0, #3
}
 8000e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e90:	1e91      	subs	r1, r2, #2
 8000e92:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e94:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e96:	d802      	bhi.n	8000e9e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e98:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e9c:	e7dd      	b.n	8000e5a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9e:	f013 0f02 	tst.w	r3, #2
 8000ea2:	e7da      	b.n	8000e5a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea4:	b2ea      	uxtb	r2, r5
 8000ea6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	429d      	cmp	r5, r3
 8000eb0:	f47f af7d 	bne.w	8000dae <HAL_RCC_ClockConfig+0xa>
 8000eb4:	e78f      	b.n	8000dd6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000eb6:	4905      	ldr	r1, [pc, #20]	; (8000ecc <HAL_RCC_ClockConfig+0x128>)
 8000eb8:	68e0      	ldr	r0, [r4, #12]
 8000eba:	688b      	ldr	r3, [r1, #8]
 8000ebc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ec0:	4303      	orrs	r3, r0
 8000ec2:	608b      	str	r3, [r1, #8]
 8000ec4:	e78a      	b.n	8000ddc <HAL_RCC_ClockConfig+0x38>
 8000ec6:	bf00      	nop
 8000ec8:	40023c00 	.word	0x40023c00
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	08001f17 	.word	0x08001f17
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ed8:	4b01      	ldr	r3, [pc, #4]	; (8000ee0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000000 	.word	0x20000000

08000ee4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ef2:	6810      	ldr	r0, [r2, #0]
}
 8000ef4:	40d8      	lsrs	r0, r3
 8000ef6:	4770      	bx	lr
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	08001f27 	.word	0x08001f27
 8000f00:	20000000 	.word	0x20000000

08000f04 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f04:	4920      	ldr	r1, [pc, #128]	; (8000f88 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000f06:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f08:	688b      	ldr	r3, [r1, #8]
 8000f0a:	f003 030c 	and.w	r3, r3, #12
 8000f0e:	2b08      	cmp	r3, #8
 8000f10:	d007      	beq.n	8000f22 <HAL_RCC_GetSysClockFreq+0x1e>
 8000f12:	2b0c      	cmp	r3, #12
 8000f14:	d020      	beq.n	8000f58 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f16:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <HAL_RCC_GetSysClockFreq+0x88>)
 8000f18:	481d      	ldr	r0, [pc, #116]	; (8000f90 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf18      	it	ne
 8000f1e:	4610      	movne	r0, r2
 8000f20:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f22:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f24:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f26:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f28:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f2c:	bf14      	ite	ne
 8000f2e:	4818      	ldrne	r0, [pc, #96]	; (8000f90 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f30:	4816      	ldreq	r0, [pc, #88]	; (8000f8c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f32:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f36:	bf18      	it	ne
 8000f38:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f3a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f3e:	fba1 0100 	umull	r0, r1, r1, r0
 8000f42:	f7ff f95f 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <HAL_RCC_GetSysClockFreq+0x84>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000f4e:	3301      	adds	r3, #1
 8000f50:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000f52:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f56:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f58:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f5a:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f5c:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f5e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f62:	bf14      	ite	ne
 8000f64:	480a      	ldrne	r0, [pc, #40]	; (8000f90 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f66:	4809      	ldreq	r0, [pc, #36]	; (8000f8c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f68:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f6c:	bf18      	it	ne
 8000f6e:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f70:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f74:	fba1 0100 	umull	r0, r1, r1, r0
 8000f78:	f7ff f944 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000f7c:	4b02      	ldr	r3, [pc, #8]	; (8000f88 <HAL_RCC_GetSysClockFreq+0x84>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000f84:	e7e5      	b.n	8000f52 <HAL_RCC_GetSysClockFreq+0x4e>
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	00f42400 	.word	0x00f42400
 8000f90:	007a1200 	.word	0x007a1200

08000f94 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f94:	6803      	ldr	r3, [r0, #0]
{
 8000f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f98:	07de      	lsls	r6, r3, #31
{
 8000f9a:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9c:	d43b      	bmi.n	8001016 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	079d      	lsls	r5, r3, #30
 8000fa2:	f100 8092 	bmi.w	80010ca <HAL_RCC_OscConfig+0x136>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	071e      	lsls	r6, r3, #28
 8000faa:	f100 80dc 	bmi.w	8001166 <HAL_RCC_OscConfig+0x1d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	075d      	lsls	r5, r3, #29
 8000fb2:	d52a      	bpl.n	800100a <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	4b93      	ldr	r3, [pc, #588]	; (8001208 <HAL_RCC_OscConfig+0x274>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000fba:	4d94      	ldr	r5, [pc, #592]	; (800120c <HAL_RCC_OscConfig+0x278>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000fce:	682b      	ldr	r3, [r5, #0]
 8000fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd4:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000fd6:	f7ff fad3 	bl	8000580 <HAL_GetTick>
 8000fda:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	05da      	lsls	r2, r3, #23
 8000fe0:	f140 80e3 	bpl.w	80011aa <HAL_RCC_OscConfig+0x216>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe4:	68a3      	ldr	r3, [r4, #8]
 8000fe6:	4d88      	ldr	r5, [pc, #544]	; (8001208 <HAL_RCC_OscConfig+0x274>)
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	f040 80e5 	bne.w	80011b8 <HAL_RCC_OscConfig+0x224>
 8000fee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fac3 	bl	8000580 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffa:	4d83      	ldr	r5, [pc, #524]	; (8001208 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 8000ffc:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ffe:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001002:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001004:	079b      	lsls	r3, r3, #30
 8001006:	f140 80f8 	bpl.w	80011fa <HAL_RCC_OscConfig+0x266>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800100a:	69a2      	ldr	r2, [r4, #24]
 800100c:	2a00      	cmp	r2, #0
 800100e:	f040 8103 	bne.w	8001218 <HAL_RCC_OscConfig+0x284>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001012:	2000      	movs	r0, #0
 8001014:	e01e      	b.n	8001054 <HAL_RCC_OscConfig+0xc0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001016:	4b7c      	ldr	r3, [pc, #496]	; (8001208 <HAL_RCC_OscConfig+0x274>)
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	f002 020c 	and.w	r2, r2, #12
 800101e:	2a04      	cmp	r2, #4
 8001020:	d010      	beq.n	8001044 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001028:	2a08      	cmp	r2, #8
 800102a:	d102      	bne.n	8001032 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	0258      	lsls	r0, r3, #9
 8001030:	d408      	bmi.n	8001044 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001032:	4b75      	ldr	r3, [pc, #468]	; (8001208 <HAL_RCC_OscConfig+0x274>)
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800103a:	2a0c      	cmp	r2, #12
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	0251      	lsls	r1, r2, #9
 8001042:	d509      	bpl.n	8001058 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	4b70      	ldr	r3, [pc, #448]	; (8001208 <HAL_RCC_OscConfig+0x274>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	039a      	lsls	r2, r3, #14
 800104a:	d5a8      	bpl.n	8000f9e <HAL_RCC_OscConfig+0xa>
 800104c:	6863      	ldr	r3, [r4, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1a5      	bne.n	8000f9e <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8001052:	2001      	movs	r0, #1
}
 8001054:	b003      	add	sp, #12
 8001056:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001058:	6862      	ldr	r2, [r4, #4]
 800105a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800105e:	d111      	bne.n	8001084 <HAL_RCC_OscConfig+0xf0>
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001066:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001068:	f7ff fa8a 	bl	8000580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106c:	4d66      	ldr	r5, [pc, #408]	; (8001208 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 800106e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	039b      	lsls	r3, r3, #14
 8001074:	d493      	bmi.n	8000f9e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001076:	f7ff fa83 	bl	8000580 <HAL_GetTick>
 800107a:	1b80      	subs	r0, r0, r6
 800107c:	2864      	cmp	r0, #100	; 0x64
 800107e:	d9f7      	bls.n	8001070 <HAL_RCC_OscConfig+0xdc>
            return HAL_TIMEOUT;
 8001080:	2003      	movs	r0, #3
 8001082:	e7e7      	b.n	8001054 <HAL_RCC_OscConfig+0xc0>
 8001084:	4d60      	ldr	r5, [pc, #384]	; (8001208 <HAL_RCC_OscConfig+0x274>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001086:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800108a:	682b      	ldr	r3, [r5, #0]
 800108c:	d107      	bne.n	800109e <HAL_RCC_OscConfig+0x10a>
 800108e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001092:	602b      	str	r3, [r5, #0]
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109a:	602b      	str	r3, [r5, #0]
 800109c:	e7e4      	b.n	8001068 <HAL_RCC_OscConfig+0xd4>
 800109e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a2:	602b      	str	r3, [r5, #0]
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010aa:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d1db      	bne.n	8001068 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 80010b0:	f7ff fa66 	bl	8000580 <HAL_GetTick>
 80010b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	039f      	lsls	r7, r3, #14
 80010ba:	f57f af70 	bpl.w	8000f9e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010be:	f7ff fa5f 	bl	8000580 <HAL_GetTick>
 80010c2:	1b80      	subs	r0, r0, r6
 80010c4:	2864      	cmp	r0, #100	; 0x64
 80010c6:	d9f6      	bls.n	80010b6 <HAL_RCC_OscConfig+0x122>
 80010c8:	e7da      	b.n	8001080 <HAL_RCC_OscConfig+0xec>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80010ca:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <HAL_RCC_OscConfig+0x274>)
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	f012 0f0c 	tst.w	r2, #12
 80010d2:	d010      	beq.n	80010f6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80010da:	2a08      	cmp	r2, #8
 80010dc:	d102      	bne.n	80010e4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	0258      	lsls	r0, r3, #9
 80010e2:	d508      	bpl.n	80010f6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010e4:	4a48      	ldr	r2, [pc, #288]	; (8001208 <HAL_RCC_OscConfig+0x274>)
 80010e6:	6893      	ldr	r3, [r2, #8]
 80010e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80010ec:	2b0c      	cmp	r3, #12
 80010ee:	d111      	bne.n	8001114 <HAL_RCC_OscConfig+0x180>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010f0:	6853      	ldr	r3, [r2, #4]
 80010f2:	0259      	lsls	r1, r3, #9
 80010f4:	d40e      	bmi.n	8001114 <HAL_RCC_OscConfig+0x180>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	4b44      	ldr	r3, [pc, #272]	; (8001208 <HAL_RCC_OscConfig+0x274>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	0792      	lsls	r2, r2, #30
 80010fc:	d502      	bpl.n	8001104 <HAL_RCC_OscConfig+0x170>
 80010fe:	68e2      	ldr	r2, [r4, #12]
 8001100:	2a01      	cmp	r2, #1
 8001102:	d1a6      	bne.n	8001052 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	6921      	ldr	r1, [r4, #16]
 8001108:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800110c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001110:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001112:	e748      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001114:	68e2      	ldr	r2, [r4, #12]
 8001116:	4b3e      	ldr	r3, [pc, #248]	; (8001210 <HAL_RCC_OscConfig+0x27c>)
 8001118:	b1b2      	cbz	r2, 8001148 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_ENABLE();
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800111e:	f7ff fa2f 	bl	8000580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001122:	4d39      	ldr	r5, [pc, #228]	; (8001208 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8001124:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	079b      	lsls	r3, r3, #30
 800112a:	d507      	bpl.n	800113c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	6922      	ldr	r2, [r4, #16]
 8001130:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001134:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001138:	602b      	str	r3, [r5, #0]
 800113a:	e734      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113c:	f7ff fa20 	bl	8000580 <HAL_GetTick>
 8001140:	1b80      	subs	r0, r0, r6
 8001142:	2802      	cmp	r0, #2
 8001144:	d9ef      	bls.n	8001126 <HAL_RCC_OscConfig+0x192>
 8001146:	e79b      	b.n	8001080 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8001148:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800114a:	f7ff fa19 	bl	8000580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	4d2e      	ldr	r5, [pc, #184]	; (8001208 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8001150:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001152:	682b      	ldr	r3, [r5, #0]
 8001154:	079f      	lsls	r7, r3, #30
 8001156:	f57f af26 	bpl.w	8000fa6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff fa11 	bl	8000580 <HAL_GetTick>
 800115e:	1b80      	subs	r0, r0, r6
 8001160:	2802      	cmp	r0, #2
 8001162:	d9f6      	bls.n	8001152 <HAL_RCC_OscConfig+0x1be>
 8001164:	e78c      	b.n	8001080 <HAL_RCC_OscConfig+0xec>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001166:	6962      	ldr	r2, [r4, #20]
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 800116a:	b17a      	cbz	r2, 800118c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_LSI_ENABLE();
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001170:	f7ff fa06 	bl	8000580 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001174:	4d24      	ldr	r5, [pc, #144]	; (8001208 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 8001176:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001178:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800117a:	0798      	lsls	r0, r3, #30
 800117c:	f53f af17 	bmi.w	8000fae <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001180:	f7ff f9fe 	bl	8000580 <HAL_GetTick>
 8001184:	1b80      	subs	r0, r0, r6
 8001186:	2802      	cmp	r0, #2
 8001188:	d9f6      	bls.n	8001178 <HAL_RCC_OscConfig+0x1e4>
 800118a:	e779      	b.n	8001080 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 800118c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800118e:	f7ff f9f7 	bl	8000580 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001192:	4d1d      	ldr	r5, [pc, #116]	; (8001208 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 8001194:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001196:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001198:	0799      	lsls	r1, r3, #30
 800119a:	f57f af08 	bpl.w	8000fae <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119e:	f7ff f9ef 	bl	8000580 <HAL_GetTick>
 80011a2:	1b80      	subs	r0, r0, r6
 80011a4:	2802      	cmp	r0, #2
 80011a6:	d9f6      	bls.n	8001196 <HAL_RCC_OscConfig+0x202>
 80011a8:	e76a      	b.n	8001080 <HAL_RCC_OscConfig+0xec>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80011aa:	f7ff f9e9 	bl	8000580 <HAL_GetTick>
 80011ae:	1b80      	subs	r0, r0, r6
 80011b0:	2802      	cmp	r0, #2
 80011b2:	f67f af13 	bls.w	8000fdc <HAL_RCC_OscConfig+0x48>
 80011b6:	e763      	b.n	8001080 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d104      	bne.n	80011c6 <HAL_RCC_OscConfig+0x232>
 80011bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	672b      	str	r3, [r5, #112]	; 0x70
 80011c4:	e713      	b.n	8000fee <HAL_RCC_OscConfig+0x5a>
 80011c6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011c8:	f022 0201 	bic.w	r2, r2, #1
 80011cc:	672a      	str	r2, [r5, #112]	; 0x70
 80011ce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011d0:	f022 0204 	bic.w	r2, r2, #4
 80011d4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f47f af0d 	bne.w	8000ff6 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 80011dc:	f7ff f9d0 	bl	8000580 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80011e4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011e8:	0798      	lsls	r0, r3, #30
 80011ea:	f57f af0e 	bpl.w	800100a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ee:	f7ff f9c7 	bl	8000580 <HAL_GetTick>
 80011f2:	1b80      	subs	r0, r0, r6
 80011f4:	42b8      	cmp	r0, r7
 80011f6:	d9f6      	bls.n	80011e6 <HAL_RCC_OscConfig+0x252>
 80011f8:	e742      	b.n	8001080 <HAL_RCC_OscConfig+0xec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff f9c1 	bl	8000580 <HAL_GetTick>
 80011fe:	1b80      	subs	r0, r0, r6
 8001200:	42b8      	cmp	r0, r7
 8001202:	f67f aefe 	bls.w	8001002 <HAL_RCC_OscConfig+0x6e>
 8001206:	e73b      	b.n	8001080 <HAL_RCC_OscConfig+0xec>
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000
 8001210:	42470000 	.word	0x42470000
 8001214:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001218:	4d23      	ldr	r5, [pc, #140]	; (80012a8 <HAL_RCC_OscConfig+0x314>)
 800121a:	68ab      	ldr	r3, [r5, #8]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b08      	cmp	r3, #8
 8001222:	f43f af16 	beq.w	8001052 <HAL_RCC_OscConfig+0xbe>
 8001226:	4e21      	ldr	r6, [pc, #132]	; (80012ac <HAL_RCC_OscConfig+0x318>)
 8001228:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800122a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800122c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800122e:	d12d      	bne.n	800128c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001230:	f7ff f9a6 	bl	8000580 <HAL_GetTick>
 8001234:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	0199      	lsls	r1, r3, #6
 800123a:	d421      	bmi.n	8001280 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800123c:	6a22      	ldr	r2, [r4, #32]
 800123e:	69e3      	ldr	r3, [r4, #28]
 8001240:	4313      	orrs	r3, r2
 8001242:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001244:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001248:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800124a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800124e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001250:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001254:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001256:	4c14      	ldr	r4, [pc, #80]	; (80012a8 <HAL_RCC_OscConfig+0x314>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001258:	0852      	lsrs	r2, r2, #1
 800125a:	3a01      	subs	r2, #1
 800125c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001260:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001262:	2301      	movs	r3, #1
 8001264:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001266:	f7ff f98b 	bl	8000580 <HAL_GetTick>
 800126a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	019a      	lsls	r2, r3, #6
 8001270:	f53f aecf 	bmi.w	8001012 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff f984 	bl	8000580 <HAL_GetTick>
 8001278:	1b40      	subs	r0, r0, r5
 800127a:	2802      	cmp	r0, #2
 800127c:	d9f6      	bls.n	800126c <HAL_RCC_OscConfig+0x2d8>
 800127e:	e6ff      	b.n	8001080 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff f97e 	bl	8000580 <HAL_GetTick>
 8001284:	1bc0      	subs	r0, r0, r7
 8001286:	2802      	cmp	r0, #2
 8001288:	d9d5      	bls.n	8001236 <HAL_RCC_OscConfig+0x2a2>
 800128a:	e6f9      	b.n	8001080 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 800128c:	f7ff f978 	bl	8000580 <HAL_GetTick>
 8001290:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001292:	682b      	ldr	r3, [r5, #0]
 8001294:	019b      	lsls	r3, r3, #6
 8001296:	f57f aebc 	bpl.w	8001012 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129a:	f7ff f971 	bl	8000580 <HAL_GetTick>
 800129e:	1b00      	subs	r0, r0, r4
 80012a0:	2802      	cmp	r0, #2
 80012a2:	d9f6      	bls.n	8001292 <HAL_RCC_OscConfig+0x2fe>
 80012a4:	e6ec      	b.n	8001080 <HAL_RCC_OscConfig+0xec>
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	42470060 	.word	0x42470060

080012b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80012b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b4:	9e06      	ldr	r6, [sp, #24]
 80012b6:	4604      	mov	r4, r0
 80012b8:	4688      	mov	r8, r1
 80012ba:	4617      	mov	r7, r2
 80012bc:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	6893      	ldr	r3, [r2, #8]
 80012c2:	ea38 0303 	bics.w	r3, r8, r3
 80012c6:	bf0c      	ite	eq
 80012c8:	2301      	moveq	r3, #1
 80012ca:	2300      	movne	r3, #0
 80012cc:	429f      	cmp	r7, r3
 80012ce:	d102      	bne.n	80012d6 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80012d0:	2000      	movs	r0, #0
}
 80012d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012d6:	1c6b      	adds	r3, r5, #1
 80012d8:	d0f2      	beq.n	80012c0 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80012da:	bb55      	cbnz	r5, 8001332 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80012e4:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012e6:	6862      	ldr	r2, [r4, #4]
 80012e8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80012ec:	d10a      	bne.n	8001304 <SPI_WaitFlagStateUntilTimeout+0x54>
 80012ee:	68a2      	ldr	r2, [r4, #8]
 80012f0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012f4:	d002      	beq.n	80012fc <SPI_WaitFlagStateUntilTimeout+0x4c>
 80012f6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80012fa:	d103      	bne.n	8001304 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001302:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001304:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001306:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800130a:	d109      	bne.n	8001320 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001312:	0412      	lsls	r2, r2, #16
 8001314:	0c12      	lsrs	r2, r2, #16
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800131e:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001320:	2301      	movs	r3, #1
 8001322:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001326:	2300      	movs	r3, #0
 8001328:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800132c:	2003      	movs	r0, #3
 800132e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001332:	f7ff f925 	bl	8000580 <HAL_GetTick>
 8001336:	1b80      	subs	r0, r0, r6
 8001338:	4285      	cmp	r5, r0
 800133a:	d8c0      	bhi.n	80012be <SPI_WaitFlagStateUntilTimeout+0xe>
 800133c:	e7ce      	b.n	80012dc <SPI_WaitFlagStateUntilTimeout+0x2c>

0800133e <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800133e:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001340:	460b      	mov	r3, r1
 8001342:	9200      	str	r2, [sp, #0]
 8001344:	2180      	movs	r1, #128	; 0x80
 8001346:	2200      	movs	r2, #0
{
 8001348:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800134a:	f7ff ffb1 	bl	80012b0 <SPI_WaitFlagStateUntilTimeout>
 800134e:	b120      	cbz	r0, 800135a <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001350:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001352:	f043 0320 	orr.w	r3, r3, #32
 8001356:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001358:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 800135a:	b002      	add	sp, #8
 800135c:	bd10      	pop	{r4, pc}

0800135e <HAL_SPI_Init>:
{
 800135e:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8001360:	4604      	mov	r4, r0
 8001362:	2800      	cmp	r0, #0
 8001364:	d036      	beq.n	80013d4 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 800136a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800136e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001372:	b91b      	cbnz	r3, 800137c <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001374:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001378:	f000 fcb4 	bl	8001ce4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800137c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800137e:	68a0      	ldr	r0, [r4, #8]
 8001380:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001382:	2302      	movs	r3, #2
 8001384:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001388:	680b      	ldr	r3, [r1, #0]
 800138a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800138e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001390:	6863      	ldr	r3, [r4, #4]
 8001392:	4303      	orrs	r3, r0
 8001394:	68e0      	ldr	r0, [r4, #12]
 8001396:	4303      	orrs	r3, r0
 8001398:	6920      	ldr	r0, [r4, #16]
 800139a:	4303      	orrs	r3, r0
 800139c:	6960      	ldr	r0, [r4, #20]
 800139e:	4303      	orrs	r3, r0
 80013a0:	69e0      	ldr	r0, [r4, #28]
 80013a2:	4303      	orrs	r3, r0
 80013a4:	6a20      	ldr	r0, [r4, #32]
 80013a6:	4303      	orrs	r3, r0
 80013a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80013aa:	4303      	orrs	r3, r0
 80013ac:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80013b0:	4303      	orrs	r3, r0
 80013b2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80013b4:	0c12      	lsrs	r2, r2, #16
 80013b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013b8:	f002 0204 	and.w	r2, r2, #4
 80013bc:	431a      	orrs	r2, r3
 80013be:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013c0:	69cb      	ldr	r3, [r1, #28]
 80013c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013c6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013c8:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80013ca:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013cc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80013ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80013d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80013d4:	2001      	movs	r0, #1
}
 80013d6:	bd10      	pop	{r4, pc}

080013d8 <HAL_SPI_TransmitReceive>:
{
 80013d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013dc:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 80013de:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80013e2:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80013e4:	2b01      	cmp	r3, #1
{
 80013e6:	4604      	mov	r4, r0
 80013e8:	460d      	mov	r5, r1
 80013ea:	4616      	mov	r6, r2
 80013ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80013ee:	f000 80ed 	beq.w	80015cc <HAL_SPI_TransmitReceive+0x1f4>
 80013f2:	2301      	movs	r3, #1
 80013f4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80013f8:	f7ff f8c2 	bl	8000580 <HAL_GetTick>
  tmp  = hspi->State;
 80013fc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8001400:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8001402:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001404:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001406:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001408:	d00a      	beq.n	8001420 <HAL_SPI_TransmitReceive+0x48>
 800140a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800140e:	f040 80db 	bne.w	80015c8 <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001412:	68a2      	ldr	r2, [r4, #8]
 8001414:	2a00      	cmp	r2, #0
 8001416:	f040 80d7 	bne.w	80015c8 <HAL_SPI_TransmitReceive+0x1f0>
 800141a:	2b04      	cmp	r3, #4
 800141c:	f040 80d4 	bne.w	80015c8 <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001420:	2d00      	cmp	r5, #0
 8001422:	d04e      	beq.n	80014c2 <HAL_SPI_TransmitReceive+0xea>
 8001424:	2e00      	cmp	r6, #0
 8001426:	d04c      	beq.n	80014c2 <HAL_SPI_TransmitReceive+0xea>
 8001428:	f1b9 0f00 	cmp.w	r9, #0
 800142c:	d049      	beq.n	80014c2 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 800142e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001432:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8001434:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001436:	bf04      	itt	eq
 8001438:	2305      	moveq	r3, #5
 800143a:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800143e:	2300      	movs	r3, #0
 8001440:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001442:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001444:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001446:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001448:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800144c:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001450:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001452:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001456:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001458:	bf58      	it	pl
 800145a:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800145c:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800145e:	bf58      	it	pl
 8001460:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001464:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001468:	bf58      	it	pl
 800146a:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800146c:	68e2      	ldr	r2, [r4, #12]
 800146e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001472:	d15d      	bne.n	8001530 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001474:	b119      	cbz	r1, 800147e <HAL_SPI_TransmitReceive+0xa6>
 8001476:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001478:	b292      	uxth	r2, r2
 800147a:	2a01      	cmp	r2, #1
 800147c:	d106      	bne.n	800148c <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800147e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001482:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001484:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001486:	3b01      	subs	r3, #1
 8001488:	b29b      	uxth	r3, r3
 800148a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800148c:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001490:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001492:	b29b      	uxth	r3, r3
 8001494:	b9bb      	cbnz	r3, 80014c6 <HAL_SPI_TransmitReceive+0xee>
 8001496:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001498:	b29b      	uxth	r3, r3
 800149a:	b9a3      	cbnz	r3, 80014c6 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800149c:	f8cd 8000 	str.w	r8, [sp]
 80014a0:	463b      	mov	r3, r7
 80014a2:	2201      	movs	r2, #1
 80014a4:	2102      	movs	r1, #2
 80014a6:	4620      	mov	r0, r4
 80014a8:	f7ff ff02 	bl	80012b0 <SPI_WaitFlagStateUntilTimeout>
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d135      	bne.n	800151c <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80014b0:	4642      	mov	r2, r8
 80014b2:	4639      	mov	r1, r7
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff ff42 	bl	800133e <SPI_CheckFlag_BSY>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d079      	beq.n	80015b2 <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80014be:	2320      	movs	r3, #32
 80014c0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
 80014c4:	e02b      	b.n	800151e <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80014c6:	f1b9 0f00 	cmp.w	r9, #0
 80014ca:	d00f      	beq.n	80014ec <HAL_SPI_TransmitReceive+0x114>
 80014cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b163      	cbz	r3, 80014ec <HAL_SPI_TransmitReceive+0x114>
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	0791      	lsls	r1, r2, #30
 80014d8:	d508      	bpl.n	80014ec <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80014da:	f835 2b02 	ldrh.w	r2, [r5], #2
 80014de:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80014e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014e2:	3b01      	subs	r3, #1
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80014e8:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80014ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b163      	cbz	r3, 800150c <HAL_SPI_TransmitReceive+0x134>
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	07d2      	lsls	r2, r2, #31
 80014f8:	d508      	bpl.n	800150c <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001500:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001502:	3b01      	subs	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001508:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800150c:	1c78      	adds	r0, r7, #1
 800150e:	d0bf      	beq.n	8001490 <HAL_SPI_TransmitReceive+0xb8>
 8001510:	f7ff f836 	bl	8000580 <HAL_GetTick>
 8001514:	eba0 0008 	sub.w	r0, r0, r8
 8001518:	4287      	cmp	r7, r0
 800151a:	d8b9      	bhi.n	8001490 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 800151c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800151e:	2301      	movs	r3, #1
 8001520:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001524:	2300      	movs	r3, #0
 8001526:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800152a:	b005      	add	sp, #20
 800152c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001530:	b119      	cbz	r1, 800153a <HAL_SPI_TransmitReceive+0x162>
 8001532:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001534:	b292      	uxth	r2, r2
 8001536:	2a01      	cmp	r2, #1
 8001538:	d106      	bne.n	8001548 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800153a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800153e:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001540:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001542:	3b01      	subs	r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001548:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800154c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800154e:	b29b      	uxth	r3, r3
 8001550:	b91b      	cbnz	r3, 800155a <HAL_SPI_TransmitReceive+0x182>
 8001552:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001554:	b29b      	uxth	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0a0      	beq.n	800149c <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800155a:	f1b9 0f00 	cmp.w	r9, #0
 800155e:	d00f      	beq.n	8001580 <HAL_SPI_TransmitReceive+0x1a8>
 8001560:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001562:	b29b      	uxth	r3, r3
 8001564:	b163      	cbz	r3, 8001580 <HAL_SPI_TransmitReceive+0x1a8>
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	0791      	lsls	r1, r2, #30
 800156c:	d508      	bpl.n	8001580 <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800156e:	782a      	ldrb	r2, [r5, #0]
 8001570:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001572:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001574:	3b01      	subs	r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800157a:	3501      	adds	r5, #1
        txallowed = 0U;
 800157c:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001580:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001582:	b29b      	uxth	r3, r3
 8001584:	b163      	cbz	r3, 80015a0 <HAL_SPI_TransmitReceive+0x1c8>
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	07d2      	lsls	r2, r2, #31
 800158c:	d508      	bpl.n	80015a0 <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 8001592:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001594:	3b01      	subs	r3, #1
 8001596:	b29b      	uxth	r3, r3
 8001598:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800159a:	3601      	adds	r6, #1
        txallowed = 1U;
 800159c:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80015a0:	1c7b      	adds	r3, r7, #1
 80015a2:	d0d3      	beq.n	800154c <HAL_SPI_TransmitReceive+0x174>
 80015a4:	f7fe ffec 	bl	8000580 <HAL_GetTick>
 80015a8:	eba0 0008 	sub.w	r0, r0, r8
 80015ac:	4287      	cmp	r7, r0
 80015ae:	d8cd      	bhi.n	800154c <HAL_SPI_TransmitReceive+0x174>
 80015b0:	e7b4      	b.n	800151c <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015b2:	68a3      	ldr	r3, [r4, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1b2      	bne.n	800151e <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	9003      	str	r0, [sp, #12]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	9203      	str	r2, [sp, #12]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	9303      	str	r3, [sp, #12]
 80015c4:	9b03      	ldr	r3, [sp, #12]
 80015c6:	e7aa      	b.n	800151e <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 80015c8:	2002      	movs	r0, #2
 80015ca:	e7a8      	b.n	800151e <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 80015cc:	2002      	movs	r0, #2
 80015ce:	e7ac      	b.n	800152a <HAL_SPI_TransmitReceive+0x152>

080015d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80015d2:	4814      	ldr	r0, [pc, #80]	; (8001624 <MX_ADC1_Init+0x54>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <MX_ADC1_Init+0x58>)
 80015d6:	2400      	movs	r4, #0
 80015d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015dc:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_ADC1_Init+0x5c>)
 80015e2:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80015e4:	2301      	movs	r3, #1
  hadc1.Init.ScanConvMode = DISABLE;
 80015e6:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015e8:	6184      	str	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ea:	6204      	str	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ec:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ee:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015f0:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015f2:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f4:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f6:	f7fe ffd9 	bl	80005ac <HAL_ADC_Init>
 80015fa:	b118      	cbz	r0, 8001604 <MX_ADC1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80015fc:	214a      	movs	r1, #74	; 0x4a
 80015fe:	480c      	ldr	r0, [pc, #48]	; (8001630 <MX_ADC1_Init+0x60>)
 8001600:	f000 fb46 	bl	8001c90 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
 8001604:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001606:	4669      	mov	r1, sp
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <MX_ADC1_Init+0x54>)
  sConfig.Channel = ADC_CHANNEL_0;
 800160a:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 800160c:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800160e:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001610:	f7ff f870 	bl	80006f4 <HAL_ADC_ConfigChannel>
 8001614:	b118      	cbz	r0, 800161e <MX_ADC1_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001616:	2154      	movs	r1, #84	; 0x54
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_ADC1_Init+0x60>)
 800161a:	f000 fb39 	bl	8001c90 <_Error_Handler>
  }

}
 800161e:	b004      	add	sp, #16
 8001620:	bd10      	pop	{r4, pc}
 8001622:	bf00      	nop
 8001624:	2000006c 	.word	0x2000006c
 8001628:	40012000 	.word	0x40012000
 800162c:	0f000001 	.word	0x0f000001
 8001630:	08001ed6 	.word	0x08001ed6

08001634 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc2.Instance = ADC2;
 8001636:	4815      	ldr	r0, [pc, #84]	; (800168c <MX_ADC2_Init+0x58>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001638:	4a15      	ldr	r2, [pc, #84]	; (8001690 <MX_ADC2_Init+0x5c>)
 800163a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163e:	e880 000c 	stmia.w	r0, {r2, r3}
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001642:	4a14      	ldr	r2, [pc, #80]	; (8001694 <MX_ADC2_Init+0x60>)
 8001644:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001646:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 8001648:	2201      	movs	r2, #1
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800164a:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800164c:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800164e:	6183      	str	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001650:	6203      	str	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001652:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001654:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001656:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001658:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800165a:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800165c:	f7fe ffa6 	bl	80005ac <HAL_ADC_Init>
 8001660:	b118      	cbz	r0, 800166a <MX_ADC2_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001662:	216d      	movs	r1, #109	; 0x6d
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <MX_ADC2_Init+0x64>)
 8001666:	f000 fb13 	bl	8001c90 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800166a:	2102      	movs	r1, #2
 800166c:	2201      	movs	r2, #1
 800166e:	2300      	movs	r3, #0
 8001670:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_ADC2_Init+0x58>)
 8001676:	4669      	mov	r1, sp
 8001678:	f7ff f83c 	bl	80006f4 <HAL_ADC_ConfigChannel>
 800167c:	b118      	cbz	r0, 8001686 <MX_ADC2_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 800167e:	2177      	movs	r1, #119	; 0x77
 8001680:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_ADC2_Init+0x64>)
 8001682:	f000 fb05 	bl	8001c90 <_Error_Handler>
  }

}
 8001686:	b005      	add	sp, #20
 8001688:	f85d fb04 	ldr.w	pc, [sp], #4
 800168c:	20000024 	.word	0x20000024
 8001690:	40012100 	.word	0x40012100
 8001694:	0f000001 	.word	0x0f000001
 8001698:	08001ed6 	.word	0x08001ed6

0800169c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800169c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc3.Instance = ADC3;
 800169e:	4815      	ldr	r0, [pc, #84]	; (80016f4 <MX_ADC3_Init+0x58>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016a0:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <MX_ADC3_Init+0x5c>)
 80016a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a6:	e880 000c 	stmia.w	r0, {r2, r3}
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016aa:	4a14      	ldr	r2, [pc, #80]	; (80016fc <MX_ADC3_Init+0x60>)
 80016ac:	6282      	str	r2, [r0, #40]	; 0x28
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80016ae:	2300      	movs	r3, #0
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 80016b0:	2201      	movs	r2, #1
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80016b2:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80016b4:	6103      	str	r3, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80016b6:	6183      	str	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016b8:	6203      	str	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016bc:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 80016be:	61c2      	str	r2, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80016c0:	6303      	str	r3, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016c2:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016c4:	f7fe ff72 	bl	80005ac <HAL_ADC_Init>
 80016c8:	b118      	cbz	r0, 80016d2 <MX_ADC3_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 80016ca:	2190      	movs	r1, #144	; 0x90
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <MX_ADC3_Init+0x64>)
 80016ce:	f000 fadf 	bl	8001c90 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016d2:	210a      	movs	r1, #10
 80016d4:	2201      	movs	r2, #1
 80016d6:	2300      	movs	r3, #0
 80016d8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_ADC3_Init+0x58>)
 80016de:	4669      	mov	r1, sp
 80016e0:	f7ff f808 	bl	80006f4 <HAL_ADC_ConfigChannel>
 80016e4:	b118      	cbz	r0, 80016ee <MX_ADC3_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 80016e6:	219a      	movs	r1, #154	; 0x9a
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_ADC3_Init+0x64>)
 80016ea:	f000 fad1 	bl	8001c90 <_Error_Handler>
  }

}
 80016ee:	b005      	add	sp, #20
 80016f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80016f4:	200000b4 	.word	0x200000b4
 80016f8:	40012200 	.word	0x40012200
 80016fc:	0f000001 	.word	0x0f000001
 8001700:	08001ed6 	.word	0x08001ed6

08001704 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001704:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001706:	6803      	ldr	r3, [r0, #0]
 8001708:	4a21      	ldr	r2, [pc, #132]	; (8001790 <HAL_ADC_MspInit+0x8c>)
 800170a:	4293      	cmp	r3, r2
{
 800170c:	b089      	sub	sp, #36	; 0x24
  if(adcHandle->Instance==ADC1)
 800170e:	d116      	bne.n	800173e <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_ADC_MspInit+0x90>)
 8001712:	2100      	movs	r1, #0
 8001714:	9100      	str	r1, [sp, #0]
 8001716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800171c:	645a      	str	r2, [r3, #68]	; 0x44
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001728:	2303      	movs	r3, #3
 800172a:	9303      	str	r3, [sp, #12]
    PA3     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	481a      	ldr	r0, [pc, #104]	; (8001798 <HAL_ADC_MspInit+0x94>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	9105      	str	r1, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001730:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	a903      	add	r1, sp, #12
    PC1     ------> ADC3_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	f7ff f9ac 	bl	8000a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001738:	b009      	add	sp, #36	; 0x24
 800173a:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(adcHandle->Instance==ADC2)
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_ADC_MspInit+0x98>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d10f      	bne.n	8001764 <HAL_ADC_MspInit+0x60>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_ADC_MspInit+0x90>)
 8001746:	2100      	movs	r1, #0
 8001748:	9101      	str	r1, [sp, #4]
 800174a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800174c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
 8001752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800175c:	230c      	movs	r3, #12
 800175e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001760:	2303      	movs	r3, #3
 8001762:	e7e3      	b.n	800172c <HAL_ADC_MspInit+0x28>
  else if(adcHandle->Instance==ADC3)
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <HAL_ADC_MspInit+0x9c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d1e6      	bne.n	8001738 <HAL_ADC_MspInit+0x34>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800176a:	2100      	movs	r1, #0
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_ADC_MspInit+0x90>)
 800176e:	9102      	str	r1, [sp, #8]
 8001770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001778:	645a      	str	r2, [r3, #68]	; 0x44
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	9105      	str	r1, [sp, #20]
    __HAL_RCC_ADC3_CLK_ENABLE();
 800177e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001786:	2303      	movs	r3, #3
 8001788:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178c:	a903      	add	r1, sp, #12
 800178e:	e7d1      	b.n	8001734 <HAL_ADC_MspInit+0x30>
 8001790:	40012000 	.word	0x40012000
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40012100 	.word	0x40012100
 80017a0:	40012200 	.word	0x40012200
 80017a4:	40020800 	.word	0x40020800

080017a8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80017a8:	b508      	push	{r3, lr}

  hcan1.Instance = CAN1;
 80017aa:	480d      	ldr	r0, [pc, #52]	; (80017e0 <MX_CAN1_Init+0x38>)
  hcan1.Init.Prescaler = 16;
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <MX_CAN1_Init+0x3c>)
 80017ae:	f04f 0e10 	mov.w	lr, #16
 80017b2:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	6083      	str	r3, [r0, #8]
  hcan1.Init.SJW = CAN_SJW_1TQ;
 80017ba:	60c3      	str	r3, [r0, #12]
  hcan1.Init.BS1 = CAN_BS1_1TQ;
 80017bc:	6103      	str	r3, [r0, #16]
  hcan1.Init.BS2 = CAN_BS2_1TQ;
 80017be:	6143      	str	r3, [r0, #20]
  hcan1.Init.TTCM = DISABLE;
 80017c0:	6183      	str	r3, [r0, #24]
  hcan1.Init.ABOM = DISABLE;
 80017c2:	61c3      	str	r3, [r0, #28]
  hcan1.Init.AWUM = DISABLE;
 80017c4:	6203      	str	r3, [r0, #32]
  hcan1.Init.NART = DISABLE;
 80017c6:	6243      	str	r3, [r0, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 80017c8:	6283      	str	r3, [r0, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 80017ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017cc:	f7ff f82a 	bl	8000824 <HAL_CAN_Init>
 80017d0:	b128      	cbz	r0, 80017de <MX_CAN1_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 80017d2:	2145      	movs	r1, #69	; 0x45
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_CAN1_Init+0x40>)
  }

}
 80017d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80017da:	f000 ba59 	b.w	8001c90 <_Error_Handler>
 80017de:	bd08      	pop	{r3, pc}
 80017e0:	200000fc 	.word	0x200000fc
 80017e4:	40006400 	.word	0x40006400
 80017e8:	08001ee3 	.word	0x08001ee3

080017ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80017ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 80017ee:	6802      	ldr	r2, [r0, #0]
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_CAN_MspInit+0x48>)
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d11a      	bne.n	800182c <HAL_CAN_MspInit+0x40>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017f6:	2100      	movs	r1, #0
 80017f8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80017fc:	9100      	str	r1, [sp, #0]
 80017fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	480d      	ldr	r0, [pc, #52]	; (8001838 <HAL_CAN_MspInit+0x4c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001802:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001806:	641a      	str	r2, [r3, #64]	; 0x40
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	9103      	str	r1, [sp, #12]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001814:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001818:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001824:	2309      	movs	r3, #9
 8001826:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f7ff f932 	bl	8000a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800182c:	b007      	add	sp, #28
 800182e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001832:	bf00      	nop
 8001834:	40006400 	.word	0x40006400
 8001838:	40020000 	.word	0x40020000

0800183c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800183c:	b507      	push	{r0, r1, r2, lr}
  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 800183e:	4811      	ldr	r0, [pc, #68]	; (8001884 <MX_DAC_Init+0x48>)
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_DAC_Init+0x4c>)
 8001842:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001844:	f7ff f8f1 	bl	8000a2a <HAL_DAC_Init>
 8001848:	b118      	cbz	r0, 8001852 <MX_DAC_Init+0x16>
  {
    _Error_Handler(__FILE__, __LINE__);
 800184a:	213d      	movs	r1, #61	; 0x3d
 800184c:	480f      	ldr	r0, [pc, #60]	; (800188c <MX_DAC_Init+0x50>)
 800184e:	f000 fa1f 	bl	8001c90 <_Error_Handler>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001852:	2200      	movs	r2, #0
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001854:	4669      	mov	r1, sp
 8001856:	480b      	ldr	r0, [pc, #44]	; (8001884 <MX_DAC_Init+0x48>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001858:	9200      	str	r2, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800185a:	9201      	str	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800185c:	f7ff f8f8 	bl	8000a50 <HAL_DAC_ConfigChannel>
 8001860:	b118      	cbz	r0, 800186a <MX_DAC_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001862:	2146      	movs	r1, #70	; 0x46
 8001864:	4809      	ldr	r0, [pc, #36]	; (800188c <MX_DAC_Init+0x50>)
 8001866:	f000 fa13 	bl	8001c90 <_Error_Handler>
  }

    /**DAC channel OUT2 config 
    */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800186a:	2210      	movs	r2, #16
 800186c:	4669      	mov	r1, sp
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_DAC_Init+0x48>)
 8001870:	f7ff f8ee 	bl	8000a50 <HAL_DAC_ConfigChannel>
 8001874:	b118      	cbz	r0, 800187e <MX_DAC_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001876:	214d      	movs	r1, #77	; 0x4d
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <MX_DAC_Init+0x50>)
 800187a:	f000 fa09 	bl	8001c90 <_Error_Handler>
  }

}
 800187e:	b003      	add	sp, #12
 8001880:	f85d fb04 	ldr.w	pc, [sp], #4
 8001884:	20000140 	.word	0x20000140
 8001888:	40007400 	.word	0x40007400
 800188c:	08001ef0 	.word	0x08001ef0

08001890 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001890:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(dacHandle->Instance==DAC)
 8001892:	6802      	ldr	r2, [r0, #0]
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_DAC_MspInit+0x3c>)
 8001896:	429a      	cmp	r2, r3
 8001898:	d115      	bne.n	80018c6 <HAL_DAC_MspInit+0x36>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800189a:	2100      	movs	r1, #0
 800189c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80018a0:	9100      	str	r1, [sp, #0]
 80018a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <HAL_DAC_MspInit+0x40>)
    __HAL_RCC_DAC_CLK_ENABLE();
 80018a6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	9103      	str	r1, [sp, #12]
    __HAL_RCC_DAC_CLK_ENABLE();
 80018b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018b8:	2330      	movs	r3, #48	; 0x30
 80018ba:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018be:	2303      	movs	r3, #3
 80018c0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f7ff f8e5 	bl	8000a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80018c6:	b007      	add	sp, #28
 80018c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80018cc:	40007400 	.word	0x40007400
 80018d0:	40020000 	.word	0x40020000

080018d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS10_GPIO_Port, CS10_Pin, GPIO_PIN_SET);
 80018da:	4f2c      	ldr	r7, [pc, #176]	; (800198c <MX_GPIO_Init+0xb8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS9_Pin|CS8_Pin|CS7_Pin|CS6_Pin 
 80018dc:	4d2c      	ldr	r5, [pc, #176]	; (8001990 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018de:	2400      	movs	r4, #0
 80018e0:	9400      	str	r4, [sp, #0]
 80018e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
 80018ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80018f0:	9200      	str	r2, [sp, #0]
 80018f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f4:	9401      	str	r4, [sp, #4]
 80018f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f8:	f042 0204 	orr.w	r2, r2, #4
 80018fc:	631a      	str	r2, [r3, #48]	; 0x30
 80018fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001900:	f002 0204 	and.w	r2, r2, #4
 8001904:	9201      	str	r2, [sp, #4]
 8001906:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	9402      	str	r4, [sp, #8]
 800190a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
 8001912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001914:	f002 0201 	and.w	r2, r2, #1
 8001918:	9202      	str	r2, [sp, #8]
 800191a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	9403      	str	r4, [sp, #12]
 800191e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001920:	f042 0202 	orr.w	r2, r2, #2
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
 8001926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001928:	f002 0202 	and.w	r2, r2, #2
 800192c:	9203      	str	r2, [sp, #12]
 800192e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001930:	9404      	str	r4, [sp, #16]
 8001932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001934:	f042 0210 	orr.w	r2, r2, #16
 8001938:	631a      	str	r2, [r3, #48]	; 0x30
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(CS10_GPIO_Port, CS10_Pin, GPIO_PIN_SET);
 8001942:	4638      	mov	r0, r7
 8001944:	2201      	movs	r2, #1
 8001946:	2102      	movs	r1, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001948:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(CS10_GPIO_Port, CS10_Pin, GPIO_PIN_SET);
 800194a:	f7ff f97b 	bl	8000c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, CS9_Pin|CS8_Pin|CS7_Pin|CS6_Pin 
 800194e:	2201      	movs	r2, #1
 8001950:	4628      	mov	r0, r5
 8001952:	f64f 7180 	movw	r1, #65408	; 0xff80
 8001956:	f7ff f975 	bl	8000c44 <HAL_GPIO_WritePin>
                          |CS5_Pin|CS4_Pin|CS3_Pin|CS2_Pin 
                          |CS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CS10_Pin;
 800195c:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS10_GPIO_Port, &GPIO_InitStruct);
 800195e:	a905      	add	r1, sp, #20
 8001960:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = CS10_Pin;
 8001962:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(CS10_GPIO_Port, &GPIO_InitStruct);
 800196a:	f7ff f891 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = CS9_Pin|CS8_Pin|CS7_Pin|CS6_Pin 
 800196e:	f64f 7380 	movw	r3, #65408	; 0xff80
                          |CS5_Pin|CS4_Pin|CS3_Pin|CS2_Pin 
                          |CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001972:	a905      	add	r1, sp, #20
 8001974:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = CS9_Pin|CS8_Pin|CS7_Pin|CS6_Pin 
 8001976:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800197e:	f7ff f887 	bl	8000a90 <HAL_GPIO_Init>

}
 8001982:	b00b      	add	sp, #44	; 0x2c
 8001984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40020400 	.word	0x40020400
 8001990:	40021000 	.word	0x40021000

08001994 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001994:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8001996:	480d      	ldr	r0, [pc, #52]	; (80019cc <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 100000;
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <MX_I2C1_Init+0x3c>)
 800199a:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80019d8 <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800199e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 80019a2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a6:	2300      	movs	r3, #0
 80019a8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019aa:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ac:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ae:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019b0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b6:	f7ff f94b 	bl	8000c50 <HAL_I2C_Init>
 80019ba:	b128      	cbz	r0, 80019c8 <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80019bc:	2142      	movs	r1, #66	; 0x42
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_I2C1_Init+0x40>)
  }

}
 80019c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80019c4:	f000 b964 	b.w	8001c90 <_Error_Handler>
 80019c8:	bd08      	pop	{r3, pc}
 80019ca:	bf00      	nop
 80019cc:	20000154 	.word	0x20000154
 80019d0:	40005400 	.word	0x40005400
 80019d4:	08001efd 	.word	0x08001efd
 80019d8:	000186a0 	.word	0x000186a0

080019dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80019de:	6802      	ldr	r2, [r0, #0]
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_I2C_MspInit+0x48>)
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d11a      	bne.n	8001a1c <HAL_I2C_MspInit+0x40>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e6:	23c0      	movs	r3, #192	; 0xc0
 80019e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ea:	2312      	movs	r3, #18
 80019ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019f6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	eb0d 0103 	add.w	r1, sp, r3
 80019fc:	480a      	ldr	r0, [pc, #40]	; (8001a28 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f7ff f846 	bl	8000a90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_I2C_MspInit+0x50>)
 8001a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a1c:	b007      	add	sp, #28
 8001a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a22:	bf00      	nop
 8001a24:	40005400 	.word	0x40005400
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40023800 	.word	0x40023800

08001a30 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001a30:	b530      	push	{r4, r5, lr}
 8001a32:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <SystemClock_Config+0xb0>)
 8001a36:	2100      	movs	r1, #0
 8001a38:	9100      	str	r1, [sp, #0]
 8001a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <SystemClock_Config+0xb4>)
 8001a4e:	9101      	str	r1, [sp, #4]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a62:	2301      	movs	r3, #1
 8001a64:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a6a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a70:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a72:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a74:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001a76:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a78:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a7c:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001a7e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a80:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a82:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a84:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a86:	f7ff fa85 	bl	8000f94 <HAL_RCC_OscConfig>
 8001a8a:	b100      	cbz	r0, 8001a8e <SystemClock_Config+0x5e>
 8001a8c:	e7fe      	b.n	8001a8c <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a8e:	f7ff f94d 	bl	8000d2c <HAL_PWREx_EnableOverDrive>
 8001a92:	b100      	cbz	r0, 8001a96 <SystemClock_Config+0x66>
 8001a94:	e7fe      	b.n	8001a94 <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a96:	230f      	movs	r3, #15
 8001a98:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aa0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aa2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aa8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aaa:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aac:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aae:	f7ff f979 	bl	8000da4 <HAL_RCC_ClockConfig>
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	b100      	cbz	r0, 8001ab8 <SystemClock_Config+0x88>
 8001ab6:	e7fe      	b.n	8001ab6 <SystemClock_Config+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001ab8:	f7ff fa0e 	bl	8000ed8 <HAL_RCC_GetHCLKFreq>
 8001abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ac4:	f7fe ff8a 	bl	80009dc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ac8:	4628      	mov	r0, r5
 8001aca:	f7fe ff9d 	bl	8000a08 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ace:	4622      	mov	r2, r4
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad6:	f7fe ff4d 	bl	8000974 <HAL_NVIC_SetPriority>
}
 8001ada:	b015      	add	sp, #84	; 0x54
 8001adc:	bd30      	pop	{r4, r5, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40007000 	.word	0x40007000

08001ae8 <main>:
{
 8001ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aea:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8001aec:	f7fe fd26 	bl	800053c <HAL_Init>
  SystemClock_Config();
 8001af0:	f7ff ff9e 	bl	8001a30 <SystemClock_Config>
  MX_GPIO_Init();
 8001af4:	f7ff feee 	bl	80018d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001af8:	f7ff fd6a 	bl	80015d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001afc:	f7ff fd9a 	bl	8001634 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001b00:	f7ff fdcc 	bl	800169c <MX_ADC3_Init>
  MX_CAN1_Init();
 8001b04:	f7ff fe50 	bl	80017a8 <MX_CAN1_Init>
  MX_DAC_Init();
 8001b08:	f7ff fe98 	bl	800183c <MX_DAC_Init>
  MX_I2C1_Init();
 8001b0c:	f7ff ff42 	bl	8001994 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001b10:	f000 f8c0 	bl	8001c94 <MX_SPI1_Init>
  uint8_t start_conversion[2] = {0x80, 0b1000000};
 8001b14:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <main+0x198>)
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001b16:	485b      	ldr	r0, [pc, #364]	; (8001c84 <main+0x19c>)
  uint8_t start_conversion[2] = {0x80, 0b1000000};
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t test[2] = {0x01, 0};
 8001b1e:	2501      	movs	r5, #1
 8001b20:	2400      	movs	r4, #0
  uint8_t temp_address[5] = {0x0C, 0, 0, 0, 0};
 8001b22:	230c      	movs	r3, #12
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001b24:	462a      	mov	r2, r5
 8001b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  uint8_t temp_address[5] = {0x0C, 0, 0, 0, 0};
 8001b2a:	f88d 3018 	strb.w	r3, [sp, #24]
  uint8_t test[2] = {0x01, 0};
 8001b2e:	f88d 5008 	strb.w	r5, [sp, #8]
 8001b32:	f88d 4009 	strb.w	r4, [sp, #9]
  uint8_t temp_address[5] = {0x0C, 0, 0, 0, 0};
 8001b36:	f88d 4019 	strb.w	r4, [sp, #25]
 8001b3a:	f88d 401a 	strb.w	r4, [sp, #26]
 8001b3e:	f88d 401b 	strb.w	r4, [sp, #27]
 8001b42:	f88d 401c 	strb.w	r4, [sp, #28]
  uint8_t received_temp[5] = {0};
 8001b46:	9408      	str	r4, [sp, #32]
 8001b48:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  uint8_t reg_check[12] = {0, 0,0,0,0,0,0,0,0,0,0,0};
 8001b4c:	940a      	str	r4, [sp, #40]	; 0x28
 8001b4e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001b50:	940c      	str	r4, [sp, #48]	; 0x30
  uint8_t reg_vals[12] = {0};
 8001b52:	940d      	str	r4, [sp, #52]	; 0x34
 8001b54:	940e      	str	r4, [sp, #56]	; 0x38
 8001b56:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001b58:	f7ff f874 	bl	8000c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, 1);
 8001b5c:	462a      	mov	r2, r5
 8001b5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b62:	4848      	ldr	r0, [pc, #288]	; (8001c84 <main+0x19c>)
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) test, (uint8_t *) received_data, 2, HAL_MAX_DELAY);
 8001b64:	4e48      	ldr	r6, [pc, #288]	; (8001c88 <main+0x1a0>)
  HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, 1);
 8001b66:	f7ff f86d 	bl	8000c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, 1);
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b70:	4844      	ldr	r0, [pc, #272]	; (8001c84 <main+0x19c>)
 8001b72:	f7ff f867 	bl	8000c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, 1);
 8001b76:	462a      	mov	r2, r5
 8001b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7c:	4841      	ldr	r0, [pc, #260]	; (8001c84 <main+0x19c>)
 8001b7e:	f7ff f861 	bl	8000c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS5_GPIO_Port, CS5_Pin, 1);
 8001b82:	462a      	mov	r2, r5
 8001b84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b88:	483e      	ldr	r0, [pc, #248]	; (8001c84 <main+0x19c>)
 8001b8a:	f7ff f85b 	bl	8000c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS6_GPIO_Port, CS6_Pin, 1);
 8001b8e:	462a      	mov	r2, r5
 8001b90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b94:	483b      	ldr	r0, [pc, #236]	; (8001c84 <main+0x19c>)
 8001b96:	f7ff f855 	bl	8000c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS7_GPIO_Port, CS7_Pin, 1);
 8001b9a:	462a      	mov	r2, r5
 8001b9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba0:	4838      	ldr	r0, [pc, #224]	; (8001c84 <main+0x19c>)
 8001ba2:	f7ff f84f 	bl	8000c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS8_GPIO_Port, CS8_Pin, 1);
 8001ba6:	462a      	mov	r2, r5
 8001ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bac:	4835      	ldr	r0, [pc, #212]	; (8001c84 <main+0x19c>)
 8001bae:	f7ff f849 	bl	8000c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS9_GPIO_Port, CS9_Pin, 1);
 8001bb2:	462a      	mov	r2, r5
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	4833      	ldr	r0, [pc, #204]	; (8001c84 <main+0x19c>)
 8001bb8:	f7ff f844 	bl	8000c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS10_GPIO_Port, CS10_Pin, 1);
 8001bbc:	462a      	mov	r2, r5
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4832      	ldr	r0, [pc, #200]	; (8001c8c <main+0x1a4>)
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001bc2:	4d30      	ldr	r5, [pc, #192]	; (8001c84 <main+0x19c>)
  HAL_GPIO_WritePin(CS10_GPIO_Port, CS10_Pin, 1);
 8001bc4:	f7ff f83e 	bl	8000c44 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) test, (uint8_t *) received_data, 2, HAL_MAX_DELAY);
 8001bc8:	f04f 37ff 	mov.w	r7, #4294967295
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	f7ff f836 	bl	8000c44 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) test, (uint8_t *) received_data, 2, HAL_MAX_DELAY);
 8001bd8:	2302      	movs	r3, #2
 8001bda:	aa04      	add	r2, sp, #16
 8001bdc:	a902      	add	r1, sp, #8
 8001bde:	9700      	str	r7, [sp, #0]
 8001be0:	4630      	mov	r0, r6
 8001be2:	f7ff fbf9 	bl	80013d8 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001be6:	2201      	movs	r2, #1
 8001be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bec:	4628      	mov	r0, r5
 8001bee:	f7ff f829 	bl	8000c44 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8001bf2:	2096      	movs	r0, #150	; 0x96
 8001bf4:	f7fe fcca 	bl	800058c <HAL_Delay>
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bfe:	4628      	mov	r0, r5
 8001c00:	f7ff f820 	bl	8000c44 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) start_conversion, (uint8_t *) received_data, 2, HAL_MAX_DELAY);
 8001c04:	2302      	movs	r3, #2
 8001c06:	aa04      	add	r2, sp, #16
 8001c08:	a903      	add	r1, sp, #12
 8001c0a:	9700      	str	r7, [sp, #0]
 8001c0c:	4630      	mov	r0, r6
 8001c0e:	f7ff fbe3 	bl	80013d8 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001c12:	2201      	movs	r2, #1
 8001c14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c18:	4628      	mov	r0, r5
 8001c1a:	f7ff f813 	bl	8000c44 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8001c1e:	20fa      	movs	r0, #250	; 0xfa
 8001c20:	f7fe fcb4 	bl	800058c <HAL_Delay>
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	f7ff f80a 	bl	8000c44 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) temp_address, (uint8_t *) received_temp, 5, HAL_MAX_DELAY);
 8001c30:	2305      	movs	r3, #5
 8001c32:	aa08      	add	r2, sp, #32
 8001c34:	a906      	add	r1, sp, #24
 8001c36:	9700      	str	r7, [sp, #0]
 8001c38:	4630      	mov	r0, r6
 8001c3a:	f7ff fbcd 	bl	80013d8 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c44:	4628      	mov	r0, r5
 8001c46:	f7fe fffd 	bl	8000c44 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8001c4a:	2096      	movs	r0, #150	; 0x96
 8001c4c:	f7fe fc9e 	bl	800058c <HAL_Delay>
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c56:	4628      	mov	r0, r5
 8001c58:	f7fe fff4 	bl	8000c44 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) reg_check, (uint8_t *) reg_vals, 12, HAL_MAX_DELAY);
 8001c5c:	230c      	movs	r3, #12
 8001c5e:	aa0d      	add	r2, sp, #52	; 0x34
 8001c60:	a90a      	add	r1, sp, #40	; 0x28
 8001c62:	9700      	str	r7, [sp, #0]
 8001c64:	4630      	mov	r0, r6
 8001c66:	f7ff fbb7 	bl	80013d8 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c70:	4628      	mov	r0, r5
 8001c72:	f7fe ffe7 	bl	8000c44 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8001c76:	2096      	movs	r0, #150	; 0x96
 8001c78:	f7fe fc88 	bl	800058c <HAL_Delay>
	  volatile int var = 0;
 8001c7c:	9405      	str	r4, [sp, #20]
 8001c7e:	e7a3      	b.n	8001bc8 <main+0xe0>
 8001c80:	08001ed4 	.word	0x08001ed4
 8001c84:	40021000 	.word	0x40021000
 8001c88:	200001a8 	.word	0x200001a8
 8001c8c:	40020400 	.word	0x40020400

08001c90 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001c90:	e7fe      	b.n	8001c90 <_Error_Handler>
	...

08001c94 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8001c94:	4810      	ldr	r0, [pc, #64]	; (8001cd8 <MX_SPI1_Init+0x44>)
{
 8001c96:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c98:	2202      	movs	r2, #2
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <MX_SPI1_Init+0x48>)
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c9c:	6102      	str	r2, [r0, #16]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c9e:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ca2:	2201      	movs	r2, #1
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ca4:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ca8:	6142      	str	r2, [r0, #20]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001caa:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cac:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cb4:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb6:	6203      	str	r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cb8:	2220      	movs	r2, #32
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cba:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cbc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cbe:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cc0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001cc2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cc4:	f7ff fb4b 	bl	800135e <HAL_SPI_Init>
 8001cc8:	b128      	cbz	r0, 8001cd6 <MX_SPI1_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001cca:	2145      	movs	r1, #69	; 0x45
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_SPI1_Init+0x4c>)
  }

}
 8001cce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001cd2:	f7ff bfdd 	b.w	8001c90 <_Error_Handler>
 8001cd6:	bd08      	pop	{r3, pc}
 8001cd8:	200001a8 	.word	0x200001a8
 8001cdc:	40013000 	.word	0x40013000
 8001ce0:	08001f0a 	.word	0x08001f0a

08001ce4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ce4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8001ce6:	6802      	ldr	r2, [r0, #0]
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_SPI_MspInit+0x58>)
 8001cea:	429a      	cmp	r2, r3
{
 8001cec:	b087      	sub	sp, #28
  if(spiHandle->Instance==SPI1)
 8001cee:	d123      	bne.n	8001d38 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cf0:	2400      	movs	r4, #0
 8001cf2:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001cf6:	9400      	str	r4, [sp, #0]
 8001cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	4811      	ldr	r0, [pc, #68]	; (8001d40 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d10:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d14:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d18:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d1e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f7fe feb6 	bl	8000a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d24:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	a901      	add	r1, sp, #4
 8001d28:	4806      	ldr	r0, [pc, #24]	; (8001d44 <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d2a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d32:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f7fe feac 	bl	8000a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d38:	b007      	add	sp, #28
 8001d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3c:	40013000 	.word	0x40013000
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400

08001d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4a:	2003      	movs	r0, #3
 8001d4c:	f7fe fe00 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	4611      	mov	r1, r2
 8001d54:	f06f 000b 	mvn.w	r0, #11
 8001d58:	f7fe fe0c 	bl	8000974 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	4611      	mov	r1, r2
 8001d60:	f06f 000a 	mvn.w	r0, #10
 8001d64:	f7fe fe06 	bl	8000974 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	f06f 0009 	mvn.w	r0, #9
 8001d70:	f7fe fe00 	bl	8000974 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	4611      	mov	r1, r2
 8001d78:	f06f 0004 	mvn.w	r0, #4
 8001d7c:	f7fe fdfa 	bl	8000974 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	4611      	mov	r1, r2
 8001d84:	f06f 0003 	mvn.w	r0, #3
 8001d88:	f7fe fdf4 	bl	8000974 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4611      	mov	r1, r2
 8001d90:	f06f 0001 	mvn.w	r0, #1
 8001d94:	f7fe fdee 	bl	8000974 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001da4:	f7fe bde6 	b.w	8000974 <HAL_NVIC_SetPriority>

08001da8 <NMI_Handler>:
 8001da8:	4770      	bx	lr

08001daa <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler>

08001dac <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001dac:	e7fe      	b.n	8001dac <MemManage_Handler>

08001dae <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001dae:	e7fe      	b.n	8001dae <BusFault_Handler>

08001db0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001db0:	e7fe      	b.n	8001db0 <UsageFault_Handler>

08001db2 <SVC_Handler>:
 8001db2:	4770      	bx	lr

08001db4 <DebugMon_Handler>:
 8001db4:	4770      	bx	lr

08001db6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001db8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dba:	f7fe fbd9 	bl	8000570 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001dc2:	f7fe be2e 	b.w	8000a22 <HAL_SYSTICK_IRQHandler>
	...

08001dc8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	490f      	ldr	r1, [pc, #60]	; (8001e08 <SystemInit+0x40>)
 8001dca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001dce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <SystemInit+0x44>)
 8001dd8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dda:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001de2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001dea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <SystemInit+0x48>)
 8001df2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001dfc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e02:	608b      	str	r3, [r1, #8]
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	24003010 	.word	0x24003010

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e1a:	e003      	b.n	8001e24 <LoopCopyDataInit>

08001e1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e22:	3104      	adds	r1, #4

08001e24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e24:	480b      	ldr	r0, [pc, #44]	; (8001e54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e2c:	d3f6      	bcc.n	8001e1c <CopyDataInit>
  ldr  r2, =_sbss
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e30:	e002      	b.n	8001e38 <LoopFillZerobss>

08001e32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e34:	f842 3b04 	str.w	r3, [r2], #4

08001e38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e3c:	d3f9      	bcc.n	8001e32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e3e:	f7ff ffc3 	bl	8001dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f000 f811 	bl	8001e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7ff fe4f 	bl	8001ae8 <main>
  bx  lr    
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e50:	08001f40 	.word	0x08001f40
  ldr  r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e58:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001e5c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001e60:	20000200 	.word	0x20000200

08001e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <__libc_init_array>:
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	4e0d      	ldr	r6, [pc, #52]	; (8001ea0 <__libc_init_array+0x38>)
 8001e6c:	4c0d      	ldr	r4, [pc, #52]	; (8001ea4 <__libc_init_array+0x3c>)
 8001e6e:	1ba4      	subs	r4, r4, r6
 8001e70:	10a4      	asrs	r4, r4, #2
 8001e72:	2500      	movs	r5, #0
 8001e74:	42a5      	cmp	r5, r4
 8001e76:	d109      	bne.n	8001e8c <__libc_init_array+0x24>
 8001e78:	4e0b      	ldr	r6, [pc, #44]	; (8001ea8 <__libc_init_array+0x40>)
 8001e7a:	4c0c      	ldr	r4, [pc, #48]	; (8001eac <__libc_init_array+0x44>)
 8001e7c:	f000 f818 	bl	8001eb0 <_init>
 8001e80:	1ba4      	subs	r4, r4, r6
 8001e82:	10a4      	asrs	r4, r4, #2
 8001e84:	2500      	movs	r5, #0
 8001e86:	42a5      	cmp	r5, r4
 8001e88:	d105      	bne.n	8001e96 <__libc_init_array+0x2e>
 8001e8a:	bd70      	pop	{r4, r5, r6, pc}
 8001e8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e90:	4798      	blx	r3
 8001e92:	3501      	adds	r5, #1
 8001e94:	e7ee      	b.n	8001e74 <__libc_init_array+0xc>
 8001e96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e9a:	4798      	blx	r3
 8001e9c:	3501      	adds	r5, #1
 8001e9e:	e7f2      	b.n	8001e86 <__libc_init_array+0x1e>
 8001ea0:	08001f38 	.word	0x08001f38
 8001ea4:	08001f38 	.word	0x08001f38
 8001ea8:	08001f38 	.word	0x08001f38
 8001eac:	08001f3c 	.word	0x08001f3c

08001eb0 <_init>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	bf00      	nop
 8001eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb6:	bc08      	pop	{r3}
 8001eb8:	469e      	mov	lr, r3
 8001eba:	4770      	bx	lr

08001ebc <_fini>:
 8001ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ebe:	bf00      	nop
 8001ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ec2:	bc08      	pop	{r3}
 8001ec4:	469e      	mov	lr, r3
 8001ec6:	4770      	bx	lr
