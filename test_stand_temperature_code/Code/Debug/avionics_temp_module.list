
avionics_temp_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080037dc  080037dc  000137dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  080037e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001fc  20000004  080037e8  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000200  080037e8  00020200  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   000151a1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000272a  00000000  00000000  000351d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c10  00000000  00000000  00037900  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b08  00000000  00000000  00038510  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000062a7  00000000  00000000  00039018  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003df4  00000000  00000000  0003f2bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000430b3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003284  00000000  00000000  00043130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003784 	.word	0x08003784

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	08003784 	.word	0x08003784

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f092 0f00 	teq	r2, #0
 80004f2:	bf14      	ite	ne
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e720      	b.n	800034c <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aedc 	beq.w	80002fa <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6c1      	b.n	80002fa <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_d2f>:
 8000578:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800057c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000580:	bf24      	itt	cs
 8000582:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000586:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800058a:	d90d      	bls.n	80005a8 <__aeabi_d2f+0x30>
 800058c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000590:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000594:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000598:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800059c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a0:	bf08      	it	eq
 80005a2:	f020 0001 	biceq.w	r0, r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005ac:	d121      	bne.n	80005f2 <__aeabi_d2f+0x7a>
 80005ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005b2:	bfbc      	itt	lt
 80005b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005b8:	4770      	bxlt	lr
 80005ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005c2:	f1c2 0218 	rsb	r2, r2, #24
 80005c6:	f1c2 0c20 	rsb	ip, r2, #32
 80005ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80005ce:	fa20 f002 	lsr.w	r0, r0, r2
 80005d2:	bf18      	it	ne
 80005d4:	f040 0001 	orrne.w	r0, r0, #1
 80005d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005e4:	ea40 000c 	orr.w	r0, r0, ip
 80005e8:	fa23 f302 	lsr.w	r3, r3, r2
 80005ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f0:	e7cc      	b.n	800058c <__aeabi_d2f+0x14>
 80005f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005f6:	d107      	bne.n	8000608 <__aeabi_d2f+0x90>
 80005f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005fc:	bf1e      	ittt	ne
 80005fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000602:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000606:	4770      	bxne	lr
 8000608:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800060c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000610:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <__aeabi_uldivmod>:
 8000618:	b953      	cbnz	r3, 8000630 <__aeabi_uldivmod+0x18>
 800061a:	b94a      	cbnz	r2, 8000630 <__aeabi_uldivmod+0x18>
 800061c:	2900      	cmp	r1, #0
 800061e:	bf08      	it	eq
 8000620:	2800      	cmpeq	r0, #0
 8000622:	bf1c      	itt	ne
 8000624:	f04f 31ff 	movne.w	r1, #4294967295
 8000628:	f04f 30ff 	movne.w	r0, #4294967295
 800062c:	f000 b97a 	b.w	8000924 <__aeabi_idiv0>
 8000630:	f1ad 0c08 	sub.w	ip, sp, #8
 8000634:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000638:	f000 f806 	bl	8000648 <__udivmoddi4>
 800063c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000644:	b004      	add	sp, #16
 8000646:	4770      	bx	lr

08000648 <__udivmoddi4>:
 8000648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800064c:	468c      	mov	ip, r1
 800064e:	460d      	mov	r5, r1
 8000650:	4604      	mov	r4, r0
 8000652:	9e08      	ldr	r6, [sp, #32]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d151      	bne.n	80006fc <__udivmoddi4+0xb4>
 8000658:	428a      	cmp	r2, r1
 800065a:	4617      	mov	r7, r2
 800065c:	d96d      	bls.n	800073a <__udivmoddi4+0xf2>
 800065e:	fab2 fe82 	clz	lr, r2
 8000662:	f1be 0f00 	cmp.w	lr, #0
 8000666:	d00b      	beq.n	8000680 <__udivmoddi4+0x38>
 8000668:	f1ce 0c20 	rsb	ip, lr, #32
 800066c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000670:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000674:	fa02 f70e 	lsl.w	r7, r2, lr
 8000678:	ea4c 0c05 	orr.w	ip, ip, r5
 800067c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000680:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000684:	0c25      	lsrs	r5, r4, #16
 8000686:	fbbc f8fa 	udiv	r8, ip, sl
 800068a:	fa1f f987 	uxth.w	r9, r7
 800068e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000692:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000696:	fb08 f309 	mul.w	r3, r8, r9
 800069a:	42ab      	cmp	r3, r5
 800069c:	d90a      	bls.n	80006b4 <__udivmoddi4+0x6c>
 800069e:	19ed      	adds	r5, r5, r7
 80006a0:	f108 32ff 	add.w	r2, r8, #4294967295
 80006a4:	f080 8123 	bcs.w	80008ee <__udivmoddi4+0x2a6>
 80006a8:	42ab      	cmp	r3, r5
 80006aa:	f240 8120 	bls.w	80008ee <__udivmoddi4+0x2a6>
 80006ae:	f1a8 0802 	sub.w	r8, r8, #2
 80006b2:	443d      	add	r5, r7
 80006b4:	1aed      	subs	r5, r5, r3
 80006b6:	b2a4      	uxth	r4, r4
 80006b8:	fbb5 f0fa 	udiv	r0, r5, sl
 80006bc:	fb0a 5510 	mls	r5, sl, r0, r5
 80006c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80006c4:	fb00 f909 	mul.w	r9, r0, r9
 80006c8:	45a1      	cmp	r9, r4
 80006ca:	d909      	bls.n	80006e0 <__udivmoddi4+0x98>
 80006cc:	19e4      	adds	r4, r4, r7
 80006ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80006d2:	f080 810a 	bcs.w	80008ea <__udivmoddi4+0x2a2>
 80006d6:	45a1      	cmp	r9, r4
 80006d8:	f240 8107 	bls.w	80008ea <__udivmoddi4+0x2a2>
 80006dc:	3802      	subs	r0, #2
 80006de:	443c      	add	r4, r7
 80006e0:	eba4 0409 	sub.w	r4, r4, r9
 80006e4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e8:	2100      	movs	r1, #0
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d061      	beq.n	80007b2 <__udivmoddi4+0x16a>
 80006ee:	fa24 f40e 	lsr.w	r4, r4, lr
 80006f2:	2300      	movs	r3, #0
 80006f4:	6034      	str	r4, [r6, #0]
 80006f6:	6073      	str	r3, [r6, #4]
 80006f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fc:	428b      	cmp	r3, r1
 80006fe:	d907      	bls.n	8000710 <__udivmoddi4+0xc8>
 8000700:	2e00      	cmp	r6, #0
 8000702:	d054      	beq.n	80007ae <__udivmoddi4+0x166>
 8000704:	2100      	movs	r1, #0
 8000706:	e886 0021 	stmia.w	r6, {r0, r5}
 800070a:	4608      	mov	r0, r1
 800070c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000710:	fab3 f183 	clz	r1, r3
 8000714:	2900      	cmp	r1, #0
 8000716:	f040 808e 	bne.w	8000836 <__udivmoddi4+0x1ee>
 800071a:	42ab      	cmp	r3, r5
 800071c:	d302      	bcc.n	8000724 <__udivmoddi4+0xdc>
 800071e:	4282      	cmp	r2, r0
 8000720:	f200 80fa 	bhi.w	8000918 <__udivmoddi4+0x2d0>
 8000724:	1a84      	subs	r4, r0, r2
 8000726:	eb65 0503 	sbc.w	r5, r5, r3
 800072a:	2001      	movs	r0, #1
 800072c:	46ac      	mov	ip, r5
 800072e:	2e00      	cmp	r6, #0
 8000730:	d03f      	beq.n	80007b2 <__udivmoddi4+0x16a>
 8000732:	e886 1010 	stmia.w	r6, {r4, ip}
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	b912      	cbnz	r2, 8000742 <__udivmoddi4+0xfa>
 800073c:	2701      	movs	r7, #1
 800073e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000742:	fab7 fe87 	clz	lr, r7
 8000746:	f1be 0f00 	cmp.w	lr, #0
 800074a:	d134      	bne.n	80007b6 <__udivmoddi4+0x16e>
 800074c:	1beb      	subs	r3, r5, r7
 800074e:	0c3a      	lsrs	r2, r7, #16
 8000750:	fa1f fc87 	uxth.w	ip, r7
 8000754:	2101      	movs	r1, #1
 8000756:	fbb3 f8f2 	udiv	r8, r3, r2
 800075a:	0c25      	lsrs	r5, r4, #16
 800075c:	fb02 3318 	mls	r3, r2, r8, r3
 8000760:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000764:	fb0c f308 	mul.w	r3, ip, r8
 8000768:	42ab      	cmp	r3, r5
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x134>
 800076c:	19ed      	adds	r5, r5, r7
 800076e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x132>
 8000774:	42ab      	cmp	r3, r5
 8000776:	f200 80d1 	bhi.w	800091c <__udivmoddi4+0x2d4>
 800077a:	4680      	mov	r8, r0
 800077c:	1aed      	subs	r5, r5, r3
 800077e:	b2a3      	uxth	r3, r4
 8000780:	fbb5 f0f2 	udiv	r0, r5, r2
 8000784:	fb02 5510 	mls	r5, r2, r0, r5
 8000788:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800078c:	fb0c fc00 	mul.w	ip, ip, r0
 8000790:	45a4      	cmp	ip, r4
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x15c>
 8000794:	19e4      	adds	r4, r4, r7
 8000796:	f100 33ff 	add.w	r3, r0, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x15a>
 800079c:	45a4      	cmp	ip, r4
 800079e:	f200 80b8 	bhi.w	8000912 <__udivmoddi4+0x2ca>
 80007a2:	4618      	mov	r0, r3
 80007a4:	eba4 040c 	sub.w	r4, r4, ip
 80007a8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007ac:	e79d      	b.n	80006ea <__udivmoddi4+0xa2>
 80007ae:	4631      	mov	r1, r6
 80007b0:	4630      	mov	r0, r6
 80007b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b6:	f1ce 0420 	rsb	r4, lr, #32
 80007ba:	fa05 f30e 	lsl.w	r3, r5, lr
 80007be:	fa07 f70e 	lsl.w	r7, r7, lr
 80007c2:	fa20 f804 	lsr.w	r8, r0, r4
 80007c6:	0c3a      	lsrs	r2, r7, #16
 80007c8:	fa25 f404 	lsr.w	r4, r5, r4
 80007cc:	ea48 0803 	orr.w	r8, r8, r3
 80007d0:	fbb4 f1f2 	udiv	r1, r4, r2
 80007d4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80007d8:	fb02 4411 	mls	r4, r2, r1, r4
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80007e4:	fb01 f30c 	mul.w	r3, r1, ip
 80007e8:	42ab      	cmp	r3, r5
 80007ea:	fa00 f40e 	lsl.w	r4, r0, lr
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x1bc>
 80007f0:	19ed      	adds	r5, r5, r7
 80007f2:	f101 30ff 	add.w	r0, r1, #4294967295
 80007f6:	f080 808a 	bcs.w	800090e <__udivmoddi4+0x2c6>
 80007fa:	42ab      	cmp	r3, r5
 80007fc:	f240 8087 	bls.w	800090e <__udivmoddi4+0x2c6>
 8000800:	3902      	subs	r1, #2
 8000802:	443d      	add	r5, r7
 8000804:	1aeb      	subs	r3, r5, r3
 8000806:	fa1f f588 	uxth.w	r5, r8
 800080a:	fbb3 f0f2 	udiv	r0, r3, r2
 800080e:	fb02 3310 	mls	r3, r2, r0, r3
 8000812:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000816:	fb00 f30c 	mul.w	r3, r0, ip
 800081a:	42ab      	cmp	r3, r5
 800081c:	d907      	bls.n	800082e <__udivmoddi4+0x1e6>
 800081e:	19ed      	adds	r5, r5, r7
 8000820:	f100 38ff 	add.w	r8, r0, #4294967295
 8000824:	d26f      	bcs.n	8000906 <__udivmoddi4+0x2be>
 8000826:	42ab      	cmp	r3, r5
 8000828:	d96d      	bls.n	8000906 <__udivmoddi4+0x2be>
 800082a:	3802      	subs	r0, #2
 800082c:	443d      	add	r5, r7
 800082e:	1aeb      	subs	r3, r5, r3
 8000830:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000834:	e78f      	b.n	8000756 <__udivmoddi4+0x10e>
 8000836:	f1c1 0720 	rsb	r7, r1, #32
 800083a:	fa22 f807 	lsr.w	r8, r2, r7
 800083e:	408b      	lsls	r3, r1
 8000840:	fa05 f401 	lsl.w	r4, r5, r1
 8000844:	ea48 0303 	orr.w	r3, r8, r3
 8000848:	fa20 fe07 	lsr.w	lr, r0, r7
 800084c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000850:	40fd      	lsrs	r5, r7
 8000852:	ea4e 0e04 	orr.w	lr, lr, r4
 8000856:	fbb5 f9fc 	udiv	r9, r5, ip
 800085a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800085e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000862:	fa1f f883 	uxth.w	r8, r3
 8000866:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800086a:	fb09 f408 	mul.w	r4, r9, r8
 800086e:	42ac      	cmp	r4, r5
 8000870:	fa02 f201 	lsl.w	r2, r2, r1
 8000874:	fa00 fa01 	lsl.w	sl, r0, r1
 8000878:	d908      	bls.n	800088c <__udivmoddi4+0x244>
 800087a:	18ed      	adds	r5, r5, r3
 800087c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000880:	d243      	bcs.n	800090a <__udivmoddi4+0x2c2>
 8000882:	42ac      	cmp	r4, r5
 8000884:	d941      	bls.n	800090a <__udivmoddi4+0x2c2>
 8000886:	f1a9 0902 	sub.w	r9, r9, #2
 800088a:	441d      	add	r5, r3
 800088c:	1b2d      	subs	r5, r5, r4
 800088e:	fa1f fe8e 	uxth.w	lr, lr
 8000892:	fbb5 f0fc 	udiv	r0, r5, ip
 8000896:	fb0c 5510 	mls	r5, ip, r0, r5
 800089a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800089e:	fb00 f808 	mul.w	r8, r0, r8
 80008a2:	45a0      	cmp	r8, r4
 80008a4:	d907      	bls.n	80008b6 <__udivmoddi4+0x26e>
 80008a6:	18e4      	adds	r4, r4, r3
 80008a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80008ac:	d229      	bcs.n	8000902 <__udivmoddi4+0x2ba>
 80008ae:	45a0      	cmp	r8, r4
 80008b0:	d927      	bls.n	8000902 <__udivmoddi4+0x2ba>
 80008b2:	3802      	subs	r0, #2
 80008b4:	441c      	add	r4, r3
 80008b6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008ba:	eba4 0408 	sub.w	r4, r4, r8
 80008be:	fba0 8902 	umull	r8, r9, r0, r2
 80008c2:	454c      	cmp	r4, r9
 80008c4:	46c6      	mov	lr, r8
 80008c6:	464d      	mov	r5, r9
 80008c8:	d315      	bcc.n	80008f6 <__udivmoddi4+0x2ae>
 80008ca:	d012      	beq.n	80008f2 <__udivmoddi4+0x2aa>
 80008cc:	b156      	cbz	r6, 80008e4 <__udivmoddi4+0x29c>
 80008ce:	ebba 030e 	subs.w	r3, sl, lr
 80008d2:	eb64 0405 	sbc.w	r4, r4, r5
 80008d6:	fa04 f707 	lsl.w	r7, r4, r7
 80008da:	40cb      	lsrs	r3, r1
 80008dc:	431f      	orrs	r7, r3
 80008de:	40cc      	lsrs	r4, r1
 80008e0:	6037      	str	r7, [r6, #0]
 80008e2:	6074      	str	r4, [r6, #4]
 80008e4:	2100      	movs	r1, #0
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	4618      	mov	r0, r3
 80008ec:	e6f8      	b.n	80006e0 <__udivmoddi4+0x98>
 80008ee:	4690      	mov	r8, r2
 80008f0:	e6e0      	b.n	80006b4 <__udivmoddi4+0x6c>
 80008f2:	45c2      	cmp	sl, r8
 80008f4:	d2ea      	bcs.n	80008cc <__udivmoddi4+0x284>
 80008f6:	ebb8 0e02 	subs.w	lr, r8, r2
 80008fa:	eb69 0503 	sbc.w	r5, r9, r3
 80008fe:	3801      	subs	r0, #1
 8000900:	e7e4      	b.n	80008cc <__udivmoddi4+0x284>
 8000902:	4628      	mov	r0, r5
 8000904:	e7d7      	b.n	80008b6 <__udivmoddi4+0x26e>
 8000906:	4640      	mov	r0, r8
 8000908:	e791      	b.n	800082e <__udivmoddi4+0x1e6>
 800090a:	4681      	mov	r9, r0
 800090c:	e7be      	b.n	800088c <__udivmoddi4+0x244>
 800090e:	4601      	mov	r1, r0
 8000910:	e778      	b.n	8000804 <__udivmoddi4+0x1bc>
 8000912:	3802      	subs	r0, #2
 8000914:	443c      	add	r4, r7
 8000916:	e745      	b.n	80007a4 <__udivmoddi4+0x15c>
 8000918:	4608      	mov	r0, r1
 800091a:	e708      	b.n	800072e <__udivmoddi4+0xe6>
 800091c:	f1a8 0802 	sub.w	r8, r8, #2
 8000920:	443d      	add	r5, r7
 8000922:	e72b      	b.n	800077c <__udivmoddi4+0x134>

08000924 <__aeabi_idiv0>:
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_Init+0x40>)
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_Init+0x40>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000938:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <HAL_Init+0x40>)
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_Init+0x40>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_Init+0x40>)
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_Init+0x40>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 fc97 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	2000      	movs	r0, #0
 8000958:	f000 f808 	bl	800096c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f002 fce2 	bl	8003324 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023c00 	.word	0x40023c00

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_InitTick+0x30>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <HAL_InitTick+0x34>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	099b      	lsrs	r3, r3, #6
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fca6 	bl	80012d2 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000986:	2200      	movs	r2, #0
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	f04f 30ff 	mov.w	r0, #4294967295
 800098e:	f000 fc84 	bl	800129a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000000 	.word	0x20000000
 80009a0:	10624dd3 	.word	0x10624dd3

080009a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick++;
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <HAL_IncTick+0x18>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	4a03      	ldr	r2, [pc, #12]	; (80009bc <HAL_IncTick+0x18>)
 80009b0:	6013      	str	r3, [r2, #0]
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	20000020 	.word	0x20000020

080009c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <HAL_GetTick+0x14>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000020 	.word	0x20000020

080009d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e0:	f7ff ffee 	bl	80009c0 <HAL_GetTick>
 80009e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f0:	d002      	beq.n	80009f8 <HAL_Delay+0x20>
  {
     wait++;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009f8:	bf00      	nop
 80009fa:	f7ff ffe1 	bl	80009c0 <HAL_GetTick>
 80009fe:	4602      	mov	r2, r0
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	1ad2      	subs	r2, r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d3f7      	bcc.n	80009fa <HAL_Delay+0x22>
  {
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b084      	sub	sp, #16
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d101      	bne.n	8000a28 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e033      	b.n	8000a90 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d109      	bne.n	8000a44 <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f002 fca2 	bl	8003388 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f003 0310 	and.w	r3, r3, #16
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d118      	bne.n	8000a82 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a58:	f023 0302 	bic.w	r3, r3, #2
 8000a5c:	f043 0202 	orr.w	r2, r3, #2
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f93f 	bl	8000ce8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f023 0303 	bic.w	r3, r3, #3
 8000a78:	f043 0201 	orr.w	r2, r3, #1
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a80:	e001      	b.n	8000a86 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000a98:	b490      	push	{r4, r7}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d101      	bne.n	8000ab4 <HAL_ADC_ConfigChannel+0x1c>
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	e109      	b.n	8000cc8 <HAL_ADC_ConfigChannel+0x230>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b09      	cmp	r3, #9
 8000ac2:	d926      	bls.n	8000b12 <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	68d9      	ldr	r1, [r3, #12]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4403      	add	r3, r0
 8000adc:	3b1e      	subs	r3, #30
 8000ade:	2007      	movs	r0, #7
 8000ae0:	fa00 f303 	lsl.w	r3, r0, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	400b      	ands	r3, r1
 8000ae8:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68d9      	ldr	r1, [r3, #12]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	6898      	ldr	r0, [r3, #8]
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	461c      	mov	r4, r3
 8000b00:	4623      	mov	r3, r4
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4423      	add	r3, r4
 8000b06:	3b1e      	subs	r3, #30
 8000b08:	fa00 f303 	lsl.w	r3, r0, r3
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	60d3      	str	r3, [r2, #12]
 8000b10:	e023      	b.n	8000b5a <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	6919      	ldr	r1, [r3, #16]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	4603      	mov	r3, r0
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4403      	add	r3, r0
 8000b2a:	2007      	movs	r0, #7
 8000b2c:	fa00 f303 	lsl.w	r3, r0, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	400b      	ands	r3, r1
 8000b34:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6919      	ldr	r1, [r3, #16]
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	6898      	ldr	r0, [r3, #8]
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	461c      	mov	r4, r3
 8000b4c:	4623      	mov	r3, r4
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	4423      	add	r3, r4
 8000b52:	fa00 f303 	lsl.w	r3, r0, r3
 8000b56:	430b      	orrs	r3, r1
 8000b58:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d824      	bhi.n	8000bac <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6819      	ldr	r1, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	4613      	mov	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	3b05      	subs	r3, #5
 8000b78:	221f      	movs	r2, #31
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	4003      	ands	r3, r0
 8000b82:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6819      	ldr	r1, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	461c      	mov	r4, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	3b05      	subs	r3, #5
 8000ba2:	fa04 f303 	lsl.w	r3, r4, r3
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	634b      	str	r3, [r1, #52]	; 0x34
 8000baa:	e04c      	b.n	8000c46 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b0c      	cmp	r3, #12
 8000bb2:	d824      	bhi.n	8000bfe <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6819      	ldr	r1, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4413      	add	r3, r2
 8000bc8:	3b23      	subs	r3, #35	; 0x23
 8000bca:	221f      	movs	r2, #31
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	4003      	ands	r3, r0
 8000bd4:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6819      	ldr	r1, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	461c      	mov	r4, r3
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	3b23      	subs	r3, #35	; 0x23
 8000bf4:	fa04 f303 	lsl.w	r3, r4, r3
 8000bf8:	4303      	orrs	r3, r0
 8000bfa:	630b      	str	r3, [r1, #48]	; 0x30
 8000bfc:	e023      	b.n	8000c46 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6819      	ldr	r1, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	3b41      	subs	r3, #65	; 0x41
 8000c14:	221f      	movs	r2, #31
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	4003      	ands	r3, r0
 8000c1e:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6819      	ldr	r1, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	461c      	mov	r4, r3
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	3b41      	subs	r3, #65	; 0x41
 8000c3e:	fa04 f303 	lsl.w	r3, r4, r3
 8000c42:	4303      	orrs	r3, r0
 8000c44:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <HAL_ADC_ConfigChannel+0x23c>)
 8000c48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <HAL_ADC_ConfigChannel+0x240>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d109      	bne.n	8000c68 <HAL_ADC_ConfigChannel+0x1d0>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b12      	cmp	r3, #18
 8000c5a:	d105      	bne.n	8000c68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a1a      	ldr	r2, [pc, #104]	; (8000cd8 <HAL_ADC_ConfigChannel+0x240>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d125      	bne.n	8000cbe <HAL_ADC_ConfigChannel+0x226>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_ADC_ConfigChannel+0x244>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d003      	beq.n	8000c84 <HAL_ADC_ConfigChannel+0x1ec>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b11      	cmp	r3, #17
 8000c82:	d11c      	bne.n	8000cbe <HAL_ADC_ConfigChannel+0x226>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <HAL_ADC_ConfigChannel+0x244>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d111      	bne.n	8000cbe <HAL_ADC_ConfigChannel+0x226>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_ADC_ConfigChannel+0x248>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <HAL_ADC_ConfigChannel+0x24c>)
 8000ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca4:	0c9a      	lsrs	r2, r3, #18
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000cb0:	e002      	b.n	8000cb8 <HAL_ADC_ConfigChannel+0x220>
      {
        counter--;
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f9      	bne.n	8000cb2 <HAL_ADC_ConfigChannel+0x21a>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc90      	pop	{r4, r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40012300 	.word	0x40012300
 8000cd8:	40012000 	.word	0x40012000
 8000cdc:	10000012 	.word	0x10000012
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	431bde83 	.word	0x431bde83

08000ce8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cf0:	4b78      	ldr	r3, [pc, #480]	; (8000ed4 <ADC_Init+0x1ec>)
 8000cf2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	6812      	ldr	r2, [r2, #0]
 8000d16:	6852      	ldr	r2, [r2, #4]
 8000d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6812      	ldr	r2, [r2, #0]
 8000d26:	6851      	ldr	r1, [r2, #4]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	6912      	ldr	r2, [r2, #16]
 8000d2c:	0212      	lsls	r2, r2, #8
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	6812      	ldr	r2, [r2, #0]
 8000d3a:	6852      	ldr	r2, [r2, #4]
 8000d3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	6851      	ldr	r1, [r2, #4]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	6892      	ldr	r2, [r2, #8]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6812      	ldr	r2, [r2, #0]
 8000d5c:	6892      	ldr	r2, [r2, #8]
 8000d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	6891      	ldr	r1, [r2, #8]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68d2      	ldr	r2, [r2, #12]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	4a57      	ldr	r2, [pc, #348]	; (8000ed8 <ADC_Init+0x1f0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d022      	beq.n	8000dc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	6812      	ldr	r2, [r2, #0]
 8000d88:	6892      	ldr	r2, [r2, #8]
 8000d8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	6891      	ldr	r1, [r2, #8]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	6892      	ldr	r2, [r2, #8]
 8000dac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	6812      	ldr	r2, [r2, #0]
 8000dba:	6891      	ldr	r1, [r2, #8]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	e00f      	b.n	8000de6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6812      	ldr	r2, [r2, #0]
 8000dce:	6892      	ldr	r2, [r2, #8]
 8000dd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	6812      	ldr	r2, [r2, #0]
 8000dde:	6892      	ldr	r2, [r2, #8]
 8000de0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000de4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	6892      	ldr	r2, [r2, #8]
 8000df0:	f022 0202 	bic.w	r2, r2, #2
 8000df4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6812      	ldr	r2, [r2, #0]
 8000dfe:	6891      	ldr	r1, [r2, #8]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6992      	ldr	r2, [r2, #24]
 8000e04:	0052      	lsls	r2, r2, #1
 8000e06:	430a      	orrs	r2, r1
 8000e08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a1b      	ldr	r3, [r3, #32]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d01b      	beq.n	8000e4a <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	6852      	ldr	r2, [r2, #4]
 8000e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e20:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	6812      	ldr	r2, [r2, #0]
 8000e2a:	6852      	ldr	r2, [r2, #4]
 8000e2c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e30:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	6851      	ldr	r1, [r2, #4]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e40:	3a01      	subs	r2, #1
 8000e42:	0352      	lsls	r2, r2, #13
 8000e44:	430a      	orrs	r2, r1
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	e007      	b.n	8000e5a <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	6812      	ldr	r2, [r2, #0]
 8000e52:	6852      	ldr	r2, [r2, #4]
 8000e54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e58:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	6812      	ldr	r2, [r2, #0]
 8000e62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e64:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	69d2      	ldr	r2, [r2, #28]
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	0512      	lsls	r2, r2, #20
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	6892      	ldr	r2, [r2, #8]
 8000e8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	6891      	ldr	r1, [r2, #8]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000e9e:	0252      	lsls	r2, r2, #9
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6812      	ldr	r2, [r2, #0]
 8000eac:	6892      	ldr	r2, [r2, #8]
 8000eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000eb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	6891      	ldr	r1, [r2, #8]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6952      	ldr	r2, [r2, #20]
 8000ec2:	0292      	lsls	r2, r2, #10
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	609a      	str	r2, [r3, #8]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40012300 	.word	0x40012300
 8000ed8:	0f000001 	.word	0x0f000001

08000edc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t InitStatus = CAN_INITSTATUS_FAILED;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_CAN_Init+0x1a>
  {
     return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e112      	b.n	800111c <HAL_CAN_Init+0x240>
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  

  if(hcan->State == HAL_CAN_STATE_RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d106      	bne.n	8000f10 <HAL_CAN_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f002 fab0 	bl	8003470 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2202      	movs	r2, #2
 8000f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	f022 0202 	bic.w	r2, r2, #2
 8000f26:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	f042 0201 	orr.w	r2, r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000f38:	f7ff fd42 	bl	80009c0 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]

  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000f3e:	e010      	b.n	8000f62 <HAL_CAN_Init+0x86>
  {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000f40:	f7ff fd3e 	bl	80009c0 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b0a      	cmp	r3, #10
 8000f4c:	d909      	bls.n	8000f62 <HAL_CAN_Init+0x86>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2203      	movs	r2, #3
 8000f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e0dc      	b.n	800111c <HAL_CAN_Init+0x240>
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d1e7      	bne.n	8000f40 <HAL_CAN_Init+0x64>
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	f040 80bd 	bne.w	80010fa <HAL_CAN_Init+0x21e>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d108      	bne.n	8000f9a <HAL_CAN_Init+0xbe>
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e007      	b.n	8000faa <HAL_CAN_Init+0xce>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d108      	bne.n	8000fc4 <HAL_CAN_Init+0xe8>
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e007      	b.n	8000fd4 <HAL_CAN_Init+0xf8>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	6812      	ldr	r2, [r2, #0]
 8000fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fd2:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d108      	bne.n	8000fee <HAL_CAN_Init+0x112>
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	f042 0220 	orr.w	r2, r2, #32
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_CAN_Init+0x122>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	f022 0220 	bic.w	r2, r2, #32
 8000ffc:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	2b01      	cmp	r3, #1
 8001004:	d108      	bne.n	8001018 <HAL_CAN_Init+0x13c>
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	f042 0210 	orr.w	r2, r2, #16
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e007      	b.n	8001028 <HAL_CAN_Init+0x14c>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	f022 0210 	bic.w	r2, r2, #16
 8001026:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	2b01      	cmp	r3, #1
 800102e:	d108      	bne.n	8001042 <HAL_CAN_Init+0x166>
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	f042 0208 	orr.w	r2, r2, #8
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e007      	b.n	8001052 <HAL_CAN_Init+0x176>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	6812      	ldr	r2, [r2, #0]
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	f022 0208 	bic.w	r2, r2, #8
 8001050:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <HAL_CAN_Init+0x190>
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6812      	ldr	r2, [r2, #0]
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	f042 0204 	orr.w	r2, r2, #4
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e007      	b.n	800107c <HAL_CAN_Init+0x1a0>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	f022 0204 	bic.w	r2, r2, #4
 800107a:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6891      	ldr	r1, [r2, #8]
                ((uint32_t)hcan->Init.SJW) | \
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68d2      	ldr	r2, [r2, #12]
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8001088:	4311      	orrs	r1, r2
                ((uint32_t)hcan->Init.BS1) | \
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6912      	ldr	r2, [r2, #16]
                ((uint32_t)hcan->Init.SJW) | \
 800108e:	4311      	orrs	r1, r2
                ((uint32_t)hcan->Init.BS2) | \
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6952      	ldr	r2, [r2, #20]
                ((uint32_t)hcan->Init.BS1) | \
 8001094:	4311      	orrs	r1, r2
               ((uint32_t)hcan->Init.Prescaler - 1U);
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	6852      	ldr	r2, [r2, #4]
 800109a:	3a01      	subs	r2, #1
                ((uint32_t)hcan->Init.BS2) | \
 800109c:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 800109e:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b0:	f7ff fc86 	bl	80009c0 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]

   /* Wait the acknowledge */
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80010b6:	e010      	b.n	80010da <HAL_CAN_Init+0x1fe>
   {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 80010b8:	f7ff fc82 	bl	80009c0 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b0a      	cmp	r3, #10
 80010c4:	d909      	bls.n	80010da <HAL_CAN_Init+0x1fe>
     {
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
       return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e020      	b.n	800111c <HAL_CAN_Init+0x240>
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d0e7      	beq.n	80010b8 <HAL_CAN_Init+0x1dc>
     }
   }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d001      	beq.n	80010fa <HAL_CAN_Init+0x21e>
    {
      InitStatus = CAN_INITSTATUS_SUCCESS;
 80010f6:	2301      	movs	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
    }
  }
 
  if(InitStatus == CAN_INITSTATUS_SUCCESS)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d108      	bne.n	8001112 <HAL_CAN_Init+0x236>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
    /* Return function status */
    return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e004      	b.n	800111c <HAL_CAN_Init+0x240>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2204      	movs	r2, #4
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Return function status */
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
  }
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	da0b      	bge.n	80011b4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	490d      	ldr	r1, [pc, #52]	; (80011d4 <NVIC_SetPriority+0x4c>)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	3b04      	subs	r3, #4
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b2:	e009      	b.n	80011c8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	4908      	ldr	r1, [pc, #32]	; (80011d8 <NVIC_SetPriority+0x50>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	e000e100 	.word	0xe000e100

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	2201      	movs	r2, #1
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	401a      	ands	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001222:	2101      	movs	r1, #1
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	1e59      	subs	r1, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff90 	bl	8001188 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff49 	bl	8001124 <NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff5e 	bl	800116c <NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffb0 	bl	8001240 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d106      	bne.n	8001308 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001306:	e005      	b.n	8001314 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001308:	4a05      	ldr	r2, [pc, #20]	; (8001320 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 0304 	bic.w	r3, r3, #4
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001328:	f000 f802 	bl	8001330 <HAL_SYSTICK_Callback>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e014      	b.n	800137a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	791b      	ldrb	r3, [r3, #4]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d105      	bne.n	8001366 <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	715a      	strb	r2, [r3, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f002 f8b7 	bl	80034d4 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2202      	movs	r2, #2
 800136a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001382:	b480      	push	{r7}
 8001384:	b087      	sub	sp, #28
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	795b      	ldrb	r3, [r3, #5]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_DAC_ConfigChannel+0x20>
 800139e:	2302      	movs	r3, #2
 80013a0:	e036      	b.n	8001410 <HAL_DAC_ConfigChannel+0x8e>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2201      	movs	r2, #1
 80013a6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2202      	movs	r2, #2
 80013ac:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80013b6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	4313      	orrs	r3, r2
 80013e0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	6811      	ldr	r1, [r2, #0]
 80013f4:	20c0      	movs	r0, #192	; 0xc0
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	fa00 f202 	lsl.w	r2, r0, r2
 80013fc:	43d2      	mvns	r2, r2
 80013fe:	400a      	ands	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2201      	movs	r2, #1
 8001406:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	e165      	b.n	8001704 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001438:	2201      	movs	r2, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	429a      	cmp	r2, r3
 8001452:	f040 8154 	bne.w	80016fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x4a>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b12      	cmp	r3, #18
 8001464:	d123      	bne.n	80014ae <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	691a      	ldr	r2, [r3, #16]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	08da      	lsrs	r2, r3, #3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3208      	adds	r2, #8
 80014a8:	69b9      	ldr	r1, [r7, #24]
 80014aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	2203      	movs	r2, #3
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0203 	and.w	r2, r3, #3
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d00b      	beq.n	8001502 <HAL_GPIO_Init+0xe6>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f6:	2b11      	cmp	r3, #17
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b12      	cmp	r3, #18
 8001500:	d130      	bne.n	8001564 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 0201 	and.w	r2, r3, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80ae 	beq.w	80016fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4a5c      	ldr	r2, [pc, #368]	; (8001718 <HAL_GPIO_Init+0x2fc>)
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2fc>)
 80015aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b59      	ldr	r3, [pc, #356]	; (8001718 <HAL_GPIO_Init+0x2fc>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015be:	4a57      	ldr	r2, [pc, #348]	; (800171c <HAL_GPIO_Init+0x300>)
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4e      	ldr	r2, [pc, #312]	; (8001720 <HAL_GPIO_Init+0x304>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d025      	beq.n	8001636 <HAL_GPIO_Init+0x21a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4d      	ldr	r2, [pc, #308]	; (8001724 <HAL_GPIO_Init+0x308>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d01f      	beq.n	8001632 <HAL_GPIO_Init+0x216>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4c      	ldr	r2, [pc, #304]	; (8001728 <HAL_GPIO_Init+0x30c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d019      	beq.n	800162e <HAL_GPIO_Init+0x212>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4b      	ldr	r2, [pc, #300]	; (800172c <HAL_GPIO_Init+0x310>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0x20e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4a      	ldr	r2, [pc, #296]	; (8001730 <HAL_GPIO_Init+0x314>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00d      	beq.n	8001626 <HAL_GPIO_Init+0x20a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a49      	ldr	r2, [pc, #292]	; (8001734 <HAL_GPIO_Init+0x318>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d007      	beq.n	8001622 <HAL_GPIO_Init+0x206>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a48      	ldr	r2, [pc, #288]	; (8001738 <HAL_GPIO_Init+0x31c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_GPIO_Init+0x202>
 800161a:	2306      	movs	r3, #6
 800161c:	e00c      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 800161e:	2307      	movs	r3, #7
 8001620:	e00a      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 8001622:	2305      	movs	r3, #5
 8001624:	e008      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 8001626:	2304      	movs	r3, #4
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 800162a:	2303      	movs	r3, #3
 800162c:	e004      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 800162e:	2302      	movs	r3, #2
 8001630:	e002      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 8001636:	2300      	movs	r3, #0
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	f002 0203 	and.w	r2, r2, #3
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	4093      	lsls	r3, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001648:	4934      	ldr	r1, [pc, #208]	; (800171c <HAL_GPIO_Init+0x300>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001656:	4b39      	ldr	r3, [pc, #228]	; (800173c <HAL_GPIO_Init+0x320>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800167a:	4a30      	ldr	r2, [pc, #192]	; (800173c <HAL_GPIO_Init+0x320>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <HAL_GPIO_Init+0x320>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016a4:	4a25      	ldr	r2, [pc, #148]	; (800173c <HAL_GPIO_Init+0x320>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_GPIO_Init+0x320>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ce:	4a1b      	ldr	r2, [pc, #108]	; (800173c <HAL_GPIO_Init+0x320>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_GPIO_Init+0x320>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f8:	4a10      	ldr	r2, [pc, #64]	; (800173c <HAL_GPIO_Init+0x320>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	f67f ae96 	bls.w	8001438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800170c:	bf00      	nop
 800170e:	3724      	adds	r7, #36	; 0x24
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40023800 	.word	0x40023800
 800171c:	40013800 	.word	0x40013800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400
 8001728:	40020800 	.word	0x40020800
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40021000 	.word	0x40021000
 8001734:	40021400 	.word	0x40021400
 8001738:	40021800 	.word	0x40021800
 800173c:	40013c00 	.word	0x40013c00

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800175c:	e003      	b.n	8001766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	041a      	lsls	r2, r3, #16
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	619a      	str	r2, [r3, #24]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0c8      	b.n	8001920 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d106      	bne.n	80017a8 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f001 fec4 	bl	8003530 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2224      	movs	r2, #36	; 0x24
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017c0:	f000 f9f6 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 80017c4:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	4a57      	ldr	r2, [pc, #348]	; (8001928 <HAL_I2C_Init+0x1b4>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	0c9b      	lsrs	r3, r3, #18
 80017d0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4952      	ldr	r1, [pc, #328]	; (800192c <HAL_I2C_Init+0x1b8>)
 80017e4:	428b      	cmp	r3, r1
 80017e6:	d802      	bhi.n	80017ee <HAL_I2C_Init+0x7a>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3301      	adds	r3, #1
 80017ec:	e009      	b.n	8001802 <HAL_I2C_Init+0x8e>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	494d      	ldr	r1, [pc, #308]	; (8001930 <HAL_I2C_Init+0x1bc>)
 80017fa:	fba1 1303 	umull	r1, r3, r1, r3
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	3301      	adds	r3, #1
 8001802:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6819      	ldr	r1, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a47      	ldr	r2, [pc, #284]	; (800192c <HAL_I2C_Init+0x1b8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d812      	bhi.n	8001838 <HAL_I2C_Init+0xc4>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001822:	2b03      	cmp	r3, #3
 8001824:	d906      	bls.n	8001834 <HAL_I2C_Init+0xc0>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	e045      	b.n	80018c0 <HAL_I2C_Init+0x14c>
 8001834:	2304      	movs	r3, #4
 8001836:	e043      	b.n	80018c0 <HAL_I2C_Init+0x14c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10f      	bne.n	8001860 <HAL_I2C_Init+0xec>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	e010      	b.n	8001882 <HAL_I2C_Init+0x10e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	009a      	lsls	r2, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	fbb2 f3f3 	udiv	r3, r2, r3
 8001874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Init+0x116>
 8001886:	2301      	movs	r3, #1
 8001888:	e01a      	b.n	80018c0 <HAL_I2C_Init+0x14c>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10a      	bne.n	80018a8 <HAL_I2C_Init+0x134>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a6:	e00b      	b.n	80018c0 <HAL_I2C_Init+0x14c>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009a      	lsls	r2, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018c0:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	69d1      	ldr	r1, [r2, #28]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6a12      	ldr	r2, [r2, #32]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6911      	ldr	r1, [r2, #16]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68d2      	ldr	r2, [r2, #12]
 80018de:	430a      	orrs	r2, r1
 80018e0:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6951      	ldr	r1, [r2, #20]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6992      	ldr	r2, [r2, #24]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	f042 0201 	orr.w	r2, r2, #1
 8001900:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2220      	movs	r2, #32
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	431bde83 	.word	0x431bde83
 800192c:	000186a0 	.word	0x000186a0
 8001930:	10624dd3 	.word	0x10624dd3

08001934 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001960:	f7ff f82e 	bl	80009c0 <HAL_GetTick>
 8001964:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001966:	e009      	b.n	800197c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001968:	f7ff f82a 	bl	80009c0 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001976:	d901      	bls.n	800197c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e01f      	b.n	80019bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_PWREx_EnableOverDrive+0x98>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d1ee      	bne.n	8001968 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001990:	f7ff f816 	bl	80009c0 <HAL_GetTick>
 8001994:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001996:	e009      	b.n	80019ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001998:	f7ff f812 	bl	80009c0 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019a6:	d901      	bls.n	80019ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e007      	b.n	80019bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_PWREx_EnableOverDrive+0x98>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019b8:	d1ee      	bne.n	8001998 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40023800 	.word	0x40023800
 80019c8:	420e0040 	.word	0x420e0040
 80019cc:	40007000 	.word	0x40007000
 80019d0:	420e0044 	.word	0x420e0044

080019d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0ca      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b67      	ldr	r3, [pc, #412]	; (8001b88 <HAL_RCC_ClockConfig+0x1b4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 020f 	and.w	r2, r3, #15
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d20c      	bcs.n	8001a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_RCC_ClockConfig+0x1b4>)
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b62      	ldr	r3, [pc, #392]	; (8001b88 <HAL_RCC_ClockConfig+0x1b4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 020f 	and.w	r2, r3, #15
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0b6      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a28:	4a58      	ldr	r2, [pc, #352]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a2a:	4b58      	ldr	r3, [pc, #352]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a40:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	4b52      	ldr	r3, [pc, #328]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a4c:	494f      	ldr	r1, [pc, #316]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a4e:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d044      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4b46      	ldr	r3, [pc, #280]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d119      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e07d      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e06d      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e065      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4936      	ldr	r1, [pc, #216]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 0203 	bic.w	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac4:	f7fe ff7c 	bl	80009c0 <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7fe ff78 	bl	80009c0 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e04d      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 020c 	and.w	r2, r3, #12
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1eb      	bne.n	8001acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_RCC_ClockConfig+0x1b4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 020f 	and.w	r2, r3, #15
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d90c      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_RCC_ClockConfig+0x1b4>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 020f 	and.w	r2, r3, #15
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e030      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b28:	4918      	ldr	r1, [pc, #96]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b46:	4911      	ldr	r1, [pc, #68]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b5a:	f000 f83d 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b5e:	4601      	mov	r1, r0
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	5cd3      	ldrb	r3, [r2, r3]
 8001b6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7fe fef8 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023c00 	.word	0x40023c00
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	080037bc 	.word	0x080037bc
 8001b94:	20000000 	.word	0x20000000

08001b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_RCC_GetHCLKFreq+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000

08001bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bb4:	f7ff fff0 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4601      	mov	r1, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0a9b      	lsrs	r3, r3, #10
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
 8001bc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	080037cc 	.word	0x080037cc

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bdc:	b0a1      	sub	sp, #132	; 0x84
 8001bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf4:	4ba0      	ldr	r3, [pc, #640]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	f200 8193 	bhi.w	8001f28 <HAL_RCC_GetSysClockFreq+0x350>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <HAL_RCC_GetSysClockFreq+0x30>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c3d 	.word	0x08001c3d
 8001c0c:	08001f29 	.word	0x08001f29
 8001c10:	08001f29 	.word	0x08001f29
 8001c14:	08001f29 	.word	0x08001f29
 8001c18:	08001c43 	.word	0x08001c43
 8001c1c:	08001f29 	.word	0x08001f29
 8001c20:	08001f29 	.word	0x08001f29
 8001c24:	08001f29 	.word	0x08001f29
 8001c28:	08001c49 	.word	0x08001c49
 8001c2c:	08001f29 	.word	0x08001f29
 8001c30:	08001f29 	.word	0x08001f29
 8001c34:	08001f29 	.word	0x08001f29
 8001c38:	08001dc5 	.word	0x08001dc5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4b8f      	ldr	r3, [pc, #572]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x2a4>)
 8001c3e:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8001c40:	e175      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c42:	4b8f      	ldr	r3, [pc, #572]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8001c44:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001c46:	e172      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c48:	4b8b      	ldr	r3, [pc, #556]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c50:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c52:	4b89      	ldr	r3, [pc, #548]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d056      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5e:	4b86      	ldr	r3, [pc, #536]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	099b      	lsrs	r3, r3, #6
 8001c64:	f04f 0400 	mov.w	r4, #0
 8001c68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	ea01 0103 	and.w	r1, r1, r3
 8001c74:	ea02 0204 	and.w	r2, r2, r4
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4614      	mov	r4, r2
 8001c7c:	0160      	lsls	r0, r4, #5
 8001c7e:	6678      	str	r0, [r7, #100]	; 0x64
 8001c80:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001c82:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001c86:	6678      	str	r0, [r7, #100]	; 0x64
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8001c8c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001c90:	1a5b      	subs	r3, r3, r1
 8001c92:	eb64 0402 	sbc.w	r4, r4, r2
 8001c96:	01a0      	lsls	r0, r4, #6
 8001c98:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001c9a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c9c:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8001ca0:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001ca2:	0198      	lsls	r0, r3, #6
 8001ca4:	65b8      	str	r0, [r7, #88]	; 0x58
 8001ca6:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8001caa:	1aed      	subs	r5, r5, r3
 8001cac:	eb66 0604 	sbc.w	r6, r6, r4
 8001cb0:	4633      	mov	r3, r6
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	657b      	str	r3, [r7, #84]	; 0x54
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb8:	4628      	mov	r0, r5
 8001cba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	653b      	str	r3, [r7, #80]	; 0x50
 8001cc6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001cca:	461d      	mov	r5, r3
 8001ccc:	4626      	mov	r6, r4
 8001cce:	186b      	adds	r3, r5, r1
 8001cd0:	eb46 0402 	adc.w	r4, r6, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	460b      	mov	r3, r1
 8001cda:	025b      	lsls	r3, r3, #9
 8001cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8001ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ce8:	4603      	mov	r3, r0
 8001cea:	025b      	lsls	r3, r3, #9
 8001cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cee:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cf8:	f04f 0400 	mov.w	r4, #0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	f7fe fc8a 	bl	8000618 <__aeabi_uldivmod>
 8001d04:	4603      	mov	r3, r0
 8001d06:	460c      	mov	r4, r1
 8001d08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d0a:	e04d      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0c:	4b5a      	ldr	r3, [pc, #360]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	f04f 0400 	mov.w	r4, #0
 8001d16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	ea01 0103 	and.w	r1, r1, r3
 8001d22:	ea02 0204 	and.w	r2, r2, r4
 8001d26:	460b      	mov	r3, r1
 8001d28:	4614      	mov	r4, r2
 8001d2a:	0160      	lsls	r0, r4, #5
 8001d2c:	6478      	str	r0, [r7, #68]	; 0x44
 8001d2e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001d30:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001d34:	6478      	str	r0, [r7, #68]	; 0x44
 8001d36:	015b      	lsls	r3, r3, #5
 8001d38:	643b      	str	r3, [r7, #64]	; 0x40
 8001d3a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001d3e:	1a5b      	subs	r3, r3, r1
 8001d40:	eb64 0402 	sbc.w	r4, r4, r2
 8001d44:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8001d48:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8001d4c:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8001d50:	ebba 0a03 	subs.w	sl, sl, r3
 8001d54:	eb6b 0b04 	sbc.w	fp, fp, r4
 8001d58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d66:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d6c:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001d70:	eb1a 0a01 	adds.w	sl, sl, r1
 8001d74:	eb4b 0b02 	adc.w	fp, fp, r2
 8001d78:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d80:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
 8001d86:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001d90:	4650      	mov	r0, sl
 8001d92:	4659      	mov	r1, fp
 8001d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d96:	f04f 0400 	mov.w	r4, #0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4623      	mov	r3, r4
 8001d9e:	f7fe fc3b 	bl	8000618 <__aeabi_uldivmod>
 8001da2:	4603      	mov	r3, r0
 8001da4:	460c      	mov	r4, r1
 8001da6:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da8:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	3301      	adds	r3, #1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8001db8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001dc2:	e0b4      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc4:	4b2c      	ldr	r3, [pc, #176]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dcc:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d054      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	099b      	lsrs	r3, r3, #6
 8001de0:	f04f 0400 	mov.w	r4, #0
 8001de4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	ea01 0103 	and.w	r1, r1, r3
 8001df0:	ea02 0204 	and.w	r2, r2, r4
 8001df4:	460b      	mov	r3, r1
 8001df6:	4614      	mov	r4, r2
 8001df8:	0160      	lsls	r0, r4, #5
 8001dfa:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001dfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dfe:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001e02:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001e04:	015b      	lsls	r3, r3, #5
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e08:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001e0c:	1a5b      	subs	r3, r3, r1
 8001e0e:	eb64 0402 	sbc.w	r4, r4, r2
 8001e12:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001e16:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001e1a:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001e1e:	ebb8 0803 	subs.w	r8, r8, r3
 8001e22:	eb69 0904 	sbc.w	r9, r9, r4
 8001e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
 8001e34:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001e38:	623b      	str	r3, [r7, #32]
 8001e3a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e3e:	eb18 0801 	adds.w	r8, r8, r1
 8001e42:	eb49 0902 	adc.w	r9, r9, r2
 8001e46:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001e5e:	4640      	mov	r0, r8
 8001e60:	4649      	mov	r1, r9
 8001e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e64:	f04f 0400 	mov.w	r4, #0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	f7fe fbd4 	bl	8000618 <__aeabi_uldivmod>
 8001e70:	4603      	mov	r3, r0
 8001e72:	460c      	mov	r4, r1
 8001e74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e76:	e04b      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x338>
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	00f42400 	.word	0x00f42400
 8001e80:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x364>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	f04f 0400 	mov.w	r4, #0
 8001e8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	ea01 0103 	and.w	r1, r1, r3
 8001e9a:	ea02 0204 	and.w	r2, r2, r4
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4614      	mov	r4, r2
 8001ea2:	0160      	lsls	r0, r4, #5
 8001ea4:	6178      	str	r0, [r7, #20]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001eac:	6178      	str	r0, [r7, #20]
 8001eae:	015b      	lsls	r3, r3, #5
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001eb6:	1a5b      	subs	r3, r3, r1
 8001eb8:	eb64 0402 	sbc.w	r4, r4, r2
 8001ebc:	01a6      	lsls	r6, r4, #6
 8001ebe:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001ec2:	019d      	lsls	r5, r3, #6
 8001ec4:	1aed      	subs	r5, r5, r3
 8001ec6:	eb66 0604 	sbc.w	r6, r6, r4
 8001eca:	00f3      	lsls	r3, r6, #3
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	00eb      	lsls	r3, r5, #3
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001ede:	186d      	adds	r5, r5, r1
 8001ee0:	eb46 0602 	adc.w	r6, r6, r2
 8001ee4:	02b3      	lsls	r3, r6, #10
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	02ab      	lsls	r3, r5, #10
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001ef8:	4628      	mov	r0, r5
 8001efa:	4631      	mov	r1, r6
 8001efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001efe:	f04f 0400 	mov.w	r4, #0
 8001f02:	461a      	mov	r2, r3
 8001f04:	4623      	mov	r3, r4
 8001f06:	f7fe fb87 	bl	8000618 <__aeabi_uldivmod>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	460c      	mov	r4, r1
 8001f0e:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x364>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	0f1b      	lsrs	r3, r3, #28
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001f1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001f26:	e002      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x368>)
 8001f2a:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3784      	adds	r7, #132	; 0x84
 8001f34:	46bd      	mov	sp, r7
 8001f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	00f42400 	.word	0x00f42400

08001f44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8083 	beq.w	8002064 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f5e:	4b95      	ldr	r3, [pc, #596]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d019      	beq.n	8001f9e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f6a:	4b92      	ldr	r3, [pc, #584]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d106      	bne.n	8001f84 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f76:	4b8f      	ldr	r3, [pc, #572]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f82:	d00c      	beq.n	8001f9e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f84:	4b8b      	ldr	r3, [pc, #556]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f8c:	2b0c      	cmp	r3, #12
 8001f8e:	d112      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f90:	4b88      	ldr	r3, [pc, #544]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9e:	4b85      	ldr	r3, [pc, #532]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d05b      	beq.n	8002062 <HAL_RCC_OscConfig+0x11e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d157      	bne.n	8002062 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1fc      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x8a>
 8001fc0:	4a7c      	ldr	r2, [pc, #496]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fc2:	4b7c      	ldr	r3, [pc, #496]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	e01d      	b.n	800200a <HAL_RCC_OscConfig+0xc6>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_OscConfig+0xae>
 8001fd8:	4a76      	ldr	r2, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4a73      	ldr	r2, [pc, #460]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	e00b      	b.n	800200a <HAL_RCC_OscConfig+0xc6>
 8001ff2:	4a70      	ldr	r2, [pc, #448]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001ff4:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4a6d      	ldr	r2, [pc, #436]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002000:	4b6c      	ldr	r3, [pc, #432]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d013      	beq.n	800203a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7fe fcd5 	bl	80009c0 <HAL_GetTick>
 8002016:	60f8      	str	r0, [r7, #12]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201a:	f7fe fcd1 	bl	80009c0 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b64      	cmp	r3, #100	; 0x64
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1c1      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202c:	4b61      	ldr	r3, [pc, #388]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0xd6>
 8002038:	e014      	b.n	8002064 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7fe fcc1 	bl	80009c0 <HAL_GetTick>
 800203e:	60f8      	str	r0, [r7, #12]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002042:	f7fe fcbd 	bl	80009c0 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b64      	cmp	r3, #100	; 0x64
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e1ad      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002054:	4b57      	ldr	r3, [pc, #348]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0xfe>
 8002060:	e000      	b.n	8002064 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002062:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d06f      	beq.n	8002150 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002070:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b00      	cmp	r3, #0
 800207a:	d017      	beq.n	80020ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800207c:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002084:	2b08      	cmp	r3, #8
 8002086:	d105      	bne.n	8002094 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002088:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00b      	beq.n	80020ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002094:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800209c:	2b0c      	cmp	r3, #12
 800209e:	d11c      	bne.n	80020da <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a0:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d116      	bne.n	80020da <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ac:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_OscConfig+0x180>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e175      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c4:	493b      	ldr	r1, [pc, #236]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 80020c6:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d8:	e03a      	b.n	8002150 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d020      	beq.n	8002124 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e2:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7fe fc6a 	bl	80009c0 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f0:	f7fe fc66 	bl	80009c0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e156      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4929      	ldr	r1, [pc, #164]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002110:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
 8002122:	e015      	b.n	8002150 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_RCC_OscConfig+0x274>)
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7fe fc49 	bl	80009c0 <HAL_GetTick>
 800212e:	60f8      	str	r0, [r7, #12]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002132:	f7fe fc45 	bl	80009c0 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e135      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d037      	beq.n	80021cc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d016      	beq.n	8002192 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_RCC_OscConfig+0x278>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7fe fc29 	bl	80009c0 <HAL_GetTick>
 800216e:	60f8      	str	r0, [r7, #12]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002172:	f7fe fc25 	bl	80009c0 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e115      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x270>)
 8002186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x22e>
 8002190:	e01c      	b.n	80021cc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCC_OscConfig+0x278>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7fe fc12 	bl	80009c0 <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219e:	e00f      	b.n	80021c0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe fc0e 	bl	80009c0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d908      	bls.n	80021c0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0fe      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	42470000 	.word	0x42470000
 80021bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	4b7d      	ldr	r3, [pc, #500]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 80021c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e9      	bne.n	80021a0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d07d      	beq.n	80022d4 <HAL_RCC_OscConfig+0x390>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	4a76      	ldr	r2, [pc, #472]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
 80021e8:	4b73      	ldr	r3, [pc, #460]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021f4:	4a71      	ldr	r2, [pc, #452]	; (80023bc <HAL_RCC_OscConfig+0x478>)
 80021f6:	4b71      	ldr	r3, [pc, #452]	; (80023bc <HAL_RCC_OscConfig+0x478>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002200:	f7fe fbde 	bl	80009c0 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x2d6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002208:	f7fe fbda 	bl	80009c0 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x2d6>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0ca      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800221a:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_OscConfig+0x478>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x2c4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d106      	bne.n	800223c <HAL_RCC_OscConfig+0x2f8>
 800222e:	4a62      	ldr	r2, [pc, #392]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 8002230:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
 800223a:	e01c      	b.n	8002276 <HAL_RCC_OscConfig+0x332>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b05      	cmp	r3, #5
 8002242:	d10c      	bne.n	800225e <HAL_RCC_OscConfig+0x31a>
 8002244:	4a5c      	ldr	r2, [pc, #368]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 8002246:	4b5c      	ldr	r3, [pc, #368]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
 8002250:	4a59      	ldr	r2, [pc, #356]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 8002252:	4b59      	ldr	r3, [pc, #356]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6713      	str	r3, [r2, #112]	; 0x70
 800225c:	e00b      	b.n	8002276 <HAL_RCC_OscConfig+0x332>
 800225e:	4a56      	ldr	r2, [pc, #344]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 8002260:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	6713      	str	r3, [r2, #112]	; 0x70
 800226a:	4a53      	ldr	r2, [pc, #332]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 800226c:	4b52      	ldr	r3, [pc, #328]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	f023 0304 	bic.w	r3, r3, #4
 8002274:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d015      	beq.n	80022aa <HAL_RCC_OscConfig+0x366>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7fe fb9f 	bl	80009c0 <HAL_GetTick>
 8002282:	60f8      	str	r0, [r7, #12]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x358>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7fe fb9b 	bl	80009c0 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x358>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e089      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ee      	beq.n	8002286 <HAL_RCC_OscConfig+0x342>
 80022a8:	e014      	b.n	80022d4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022aa:	f7fe fb89 	bl	80009c0 <HAL_GetTick>
 80022ae:	60f8      	str	r0, [r7, #12]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_OscConfig+0x384>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7fe fb85 	bl	80009c0 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x384>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e073      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1ee      	bne.n	80022b2 <HAL_RCC_OscConfig+0x36e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d068      	beq.n	80023ae <HAL_RCC_OscConfig+0x46a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d060      	beq.n	80023aa <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d145      	bne.n	800237c <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b33      	ldr	r3, [pc, #204]	; (80023c0 <HAL_RCC_OscConfig+0x47c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe fb63 	bl	80009c0 <HAL_GetTick>
 80022fa:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fe:	f7fe fb5f 	bl	80009c0 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e04f      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002310:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800231c:	4926      	ldr	r1, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69da      	ldr	r2, [r3, #28]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	019b      	lsls	r3, r3, #6
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	3b01      	subs	r3, #1
 8002338:	041b      	lsls	r3, r3, #16
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	061b      	lsls	r3, r3, #24
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	071b      	lsls	r3, r3, #28
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800234e:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <HAL_RCC_OscConfig+0x47c>)
 8002350:	2201      	movs	r2, #1
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fb34 	bl	80009c0 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235c:	f7fe fb30 	bl	80009c0 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e020      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x418>
 800237a:	e018      	b.n	80023ae <HAL_RCC_OscConfig+0x46a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237c:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <HAL_RCC_OscConfig+0x47c>)
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7fe fb1d 	bl	80009c0 <HAL_GetTick>
 8002386:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238a:	f7fe fb19 	bl	80009c0 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e009      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f0      	bne.n	800238a <HAL_RCC_OscConfig+0x446>
 80023a8:	e001      	b.n	80023ae <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_RCC_OscConfig+0x46c>
    }
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000
 80023c0:	42470060 	.word	0x42470060

080023c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e055      	b.n	8002482 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d106      	bne.n	80023f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f001 f8cf 	bl	8003594 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800240c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6851      	ldr	r1, [r2, #4]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6892      	ldr	r2, [r2, #8]
 800241a:	4311      	orrs	r1, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68d2      	ldr	r2, [r2, #12]
 8002420:	4311      	orrs	r1, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6912      	ldr	r2, [r2, #16]
 8002426:	4311      	orrs	r1, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6952      	ldr	r2, [r2, #20]
 800242c:	4311      	orrs	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6992      	ldr	r2, [r2, #24]
 8002432:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002436:	4311      	orrs	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	69d2      	ldr	r2, [r2, #28]
 800243c:	4311      	orrs	r1, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6a12      	ldr	r2, [r2, #32]
 8002442:	4311      	orrs	r1, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6992      	ldr	r2, [r2, #24]
 8002454:	0c12      	lsrs	r2, r2, #16
 8002456:	f002 0104 	and.w	r1, r2, #4
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	69d2      	ldr	r2, [r2, #28]
 800246c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002470:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b08c      	sub	sp, #48	; 0x30
 800248e:	af02      	add	r7, sp, #8
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80024a4:	2301      	movs	r3, #1
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_SPI_TransmitReceive+0x32>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e181      	b.n	80027c0 <HAL_SPI_TransmitReceive+0x336>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024c4:	f7fe fa7c 	bl	80009c0 <HAL_GetTick>
 80024c8:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d00e      	beq.n	80024fe <HAL_SPI_TransmitReceive+0x74>
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e6:	d106      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x6c>
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d003      	beq.n	80024fe <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
 80024f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80024fc:	e156      	b.n	80027ac <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x86>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x86>
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d103      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002516:	e149      	b.n	80027ac <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d103      	bne.n	800252c <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2205      	movs	r2, #5
 8002528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	887a      	ldrh	r2, [r7, #2]
 8002542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	887a      	ldrh	r2, [r7, #2]
 800254e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d007      	beq.n	8002580 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002588:	d171      	bne.n	800266e <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d004      	beq.n	800259c <HAL_SPI_TransmitReceive+0x112>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d15d      	bne.n	8002658 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	8812      	ldrh	r2, [r2, #0]
 80025a4:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3302      	adds	r3, #2
 80025aa:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ba:	e04d      	b.n	8002658 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d01c      	beq.n	80025fc <HAL_SPI_TransmitReceive+0x172>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d017      	beq.n	80025fc <HAL_SPI_TransmitReceive+0x172>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d110      	bne.n	80025fc <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	8812      	ldrh	r2, [r2, #0]
 80025e2:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	3302      	adds	r3, #2
 80025e8:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d018      	beq.n	8002638 <HAL_SPI_TransmitReceive+0x1ae>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	d111      	bne.n	8002638 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	b29a      	uxth	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3302      	adds	r3, #2
 8002624:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8002634:	2301      	movs	r3, #1
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d00b      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x1ce>
 8002640:	f7fe f9be 	bl	80009c0 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	1ad2      	subs	r2, r2, r3
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	429a      	cmp	r2, r3
 800264e:	d303      	bcc.n	8002658 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002656:	e0a9      	b.n	80027ac <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ac      	bne.n	80025bc <HAL_SPI_TransmitReceive+0x132>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1a7      	bne.n	80025bc <HAL_SPI_TransmitReceive+0x132>
 800266c:	e071      	b.n	8002752 <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <HAL_SPI_TransmitReceive+0x1f6>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d15e      	bne.n	800273e <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	330c      	adds	r3, #12
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	7812      	ldrb	r2, [r2, #0]
 800268a:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	3301      	adds	r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a0:	e04d      	b.n	800273e <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01d      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0x25a>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d018      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0x25a>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d111      	bne.n	80026e4 <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f103 020c 	add.w	r2, r3, #12
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	1c59      	adds	r1, r3, #1
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d017      	beq.n	800271e <HAL_SPI_TransmitReceive+0x294>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d110      	bne.n	800271e <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	68d2      	ldr	r2, [r2, #12]
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800271a:	2301      	movs	r3, #1
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d00b      	beq.n	800273e <HAL_SPI_TransmitReceive+0x2b4>
 8002726:	f7fe f94b 	bl	80009c0 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	1ad2      	subs	r2, r2, r3
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	429a      	cmp	r2, r3
 8002734:	d303      	bcc.n	800273e <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800273c:	e036      	b.n	80027ac <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ac      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x218>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1a7      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x218>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	2201      	movs	r2, #1
 800275a:	2102      	movs	r1, #2
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f833 	bl	80027c8 <SPI_WaitFlagStateUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800276e:	e01d      	b.n	80027ac <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f890 	bl	800289a <SPI_CheckFlag_BSY>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800278c:	e00e      	b.n	80027ac <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3728      	adds	r7, #40	; 0x28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80027d6:	e04d      	b.n	8002874 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027de:	d049      	beq.n	8002874 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80027e6:	f7fe f8eb 	bl	80009c0 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	1ad2      	subs	r2, r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d33e      	bcc.n	8002874 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	6852      	ldr	r2, [r2, #4]
 8002800:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002804:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800280e:	d111      	bne.n	8002834 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002818:	d004      	beq.n	8002824 <SPI_WaitFlagStateUntilTimeout+0x5c>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002822:	d107      	bne.n	8002834 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002832:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283c:	d110      	bne.n	8002860 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6819      	ldr	r1, [r3, #0]
 8002848:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800284c:	400b      	ands	r3, r1
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800285e:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e00e      	b.n	8002892 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	401a      	ands	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	429a      	cmp	r2, r3
 8002882:	d101      	bne.n	8002888 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002884:	2201      	movs	r2, #1
 8002886:	e000      	b.n	800288a <SPI_WaitFlagStateUntilTimeout+0xc2>
 8002888:	2200      	movs	r2, #0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	d1a3      	bne.n	80027d8 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af02      	add	r7, sp, #8
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2180      	movs	r1, #128	; 0x80
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff ff89 	bl	80027c8 <SPI_WaitFlagStateUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e000      	b.n	80028ce <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <main>:
}

/* USER CODE END 0 */

int main(void)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b09b      	sub	sp, #108	; 0x6c
 80028dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028de:	f7fe f823 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028e2:	f000 f959 	bl	8002b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e6:	f000 fbb9 	bl	800305c <MX_GPIO_Init>
  MX_ADC1_Init();
 80028ea:	f000 f9d9 	bl	8002ca0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80028ee:	f000 fa29 	bl	8002d44 <MX_ADC2_Init>
  MX_ADC3_Init();
 80028f2:	f000 fa79 	bl	8002de8 <MX_ADC3_Init>
  MX_CAN1_Init();
 80028f6:	f000 fac9 	bl	8002e8c <MX_CAN1_Init>
  MX_DAC_Init();
 80028fa:	f000 fb03 	bl	8002f04 <MX_DAC_Init>
  MX_I2C1_Init();
 80028fe:	f000 fb3d 	bl	8002f7c <MX_I2C1_Init>
  MX_SPI1_Init();
 8002902:	f000 fb6f 	bl	8002fe4 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */
  Init_MyCAN();
 8002906:	f000 fc2b 	bl	8003160 <Init_MyCAN>

  uint8_t test[2] = {0x01, 0};
 800290a:	2301      	movs	r3, #1
 800290c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8002910:	2300      	movs	r3, #0
 8002912:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  uint8_t start_conversion[2] = {0x80, 0b1000000};
 8002916:	4b9a      	ldr	r3, [pc, #616]	; (8002b80 <main+0x2a8>)
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  uint8_t received_data[2];

  uint8_t temp_address[5] = {0x0C, 0, 0, 0, 0};
 800291e:	230c      	movs	r3, #12
 8002920:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002924:	2300      	movs	r3, #0
 8002926:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800292a:	2300      	movs	r3, #0
 800292c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002930:	2300      	movs	r3, #0
 8002932:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002936:	2300      	movs	r3, #0
 8002938:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  uint8_t received_temp[5] = {0};
 800293c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	711a      	strb	r2, [r3, #4]

  uint8_t reg_check[12] = {0, 0,0,0,0,0,0,0,0,0,0,0};
 8002946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
  uint8_t reg_vals[12] = {0};
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800295e:	2201      	movs	r2, #1
 8002960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002964:	4887      	ldr	r0, [pc, #540]	; (8002b84 <main+0x2ac>)
 8002966:	f7fe feeb 	bl	8001740 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, 1);
 800296a:	2201      	movs	r2, #1
 800296c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002970:	4884      	ldr	r0, [pc, #528]	; (8002b84 <main+0x2ac>)
 8002972:	f7fe fee5 	bl	8001740 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, 1);
 8002976:	2201      	movs	r2, #1
 8002978:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800297c:	4881      	ldr	r0, [pc, #516]	; (8002b84 <main+0x2ac>)
 800297e:	f7fe fedf 	bl	8001740 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, 1);
 8002982:	2201      	movs	r2, #1
 8002984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002988:	487e      	ldr	r0, [pc, #504]	; (8002b84 <main+0x2ac>)
 800298a:	f7fe fed9 	bl	8001740 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS5_GPIO_Port, CS5_Pin, 1);
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002994:	487b      	ldr	r0, [pc, #492]	; (8002b84 <main+0x2ac>)
 8002996:	f7fe fed3 	bl	8001740 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS6_GPIO_Port, CS6_Pin, 1);
 800299a:	2201      	movs	r2, #1
 800299c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029a0:	4878      	ldr	r0, [pc, #480]	; (8002b84 <main+0x2ac>)
 80029a2:	f7fe fecd 	bl	8001740 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS7_GPIO_Port, CS7_Pin, 1);
 80029a6:	2201      	movs	r2, #1
 80029a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029ac:	4875      	ldr	r0, [pc, #468]	; (8002b84 <main+0x2ac>)
 80029ae:	f7fe fec7 	bl	8001740 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS8_GPIO_Port, CS8_Pin, 1);
 80029b2:	2201      	movs	r2, #1
 80029b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029b8:	4872      	ldr	r0, [pc, #456]	; (8002b84 <main+0x2ac>)
 80029ba:	f7fe fec1 	bl	8001740 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS9_GPIO_Port, CS9_Pin, 1);
 80029be:	2201      	movs	r2, #1
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	4870      	ldr	r0, [pc, #448]	; (8002b84 <main+0x2ac>)
 80029c4:	f7fe febc 	bl	8001740 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS10_GPIO_Port, CS10_Pin, 1);
 80029c8:	2201      	movs	r2, #1
 80029ca:	2102      	movs	r1, #2
 80029cc:	486e      	ldr	r0, [pc, #440]	; (8002b88 <main+0x2b0>)
 80029ce:	f7fe feb7 	bl	8001740 <HAL_GPIO_WritePin>
  //init_max(1);

  while (1)
  {

	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029d8:	486a      	ldr	r0, [pc, #424]	; (8002b84 <main+0x2ac>)
 80029da:	f7fe feb1 	bl	8001740 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) test, (uint8_t *) received_data, 2, HAL_MAX_DELAY);
 80029de:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80029e2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2302      	movs	r3, #2
 80029ee:	4867      	ldr	r0, [pc, #412]	; (8002b8c <main+0x2b4>)
 80029f0:	f7ff fd4b 	bl	800248a <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80029f4:	2201      	movs	r2, #1
 80029f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029fa:	4862      	ldr	r0, [pc, #392]	; (8002b84 <main+0x2ac>)
 80029fc:	f7fe fea0 	bl	8001740 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8002a00:	2096      	movs	r0, #150	; 0x96
 8002a02:	f7fd ffe9 	bl	80009d8 <HAL_Delay>



	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a0c:	485d      	ldr	r0, [pc, #372]	; (8002b84 <main+0x2ac>)
 8002a0e:	f7fe fe97 	bl	8001740 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) start_conversion, (uint8_t *) received_data, 2, HAL_MAX_DELAY);
 8002a12:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002a16:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2302      	movs	r3, #2
 8002a22:	485a      	ldr	r0, [pc, #360]	; (8002b8c <main+0x2b4>)
 8002a24:	f7ff fd31 	bl	800248a <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a2e:	4855      	ldr	r0, [pc, #340]	; (8002b84 <main+0x2ac>)
 8002a30:	f7fe fe86 	bl	8001740 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8002a34:	20fa      	movs	r0, #250	; 0xfa
 8002a36:	f7fd ffcf 	bl	80009d8 <HAL_Delay>

	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a40:	4850      	ldr	r0, [pc, #320]	; (8002b84 <main+0x2ac>)
 8002a42:	f7fe fe7d 	bl	8001740 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) temp_address, (uint8_t *) received_temp, 5, HAL_MAX_DELAY);
 8002a46:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a4a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2305      	movs	r3, #5
 8002a56:	484d      	ldr	r0, [pc, #308]	; (8002b8c <main+0x2b4>)
 8002a58:	f7ff fd17 	bl	800248a <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a62:	4848      	ldr	r0, [pc, #288]	; (8002b84 <main+0x2ac>)
 8002a64:	f7fe fe6c 	bl	8001740 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8002a68:	2096      	movs	r0, #150	; 0x96
 8002a6a:	f7fd ffb5 	bl	80009d8 <HAL_Delay>

	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a74:	4843      	ldr	r0, [pc, #268]	; (8002b84 <main+0x2ac>)
 8002a76:	f7fe fe63 	bl	8001740 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) reg_check, (uint8_t *) reg_vals, 12, HAL_MAX_DELAY);
 8002a7a:	f107 021c 	add.w	r2, r7, #28
 8002a7e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	230c      	movs	r3, #12
 8002a8a:	4840      	ldr	r0, [pc, #256]	; (8002b8c <main+0x2b4>)
 8002a8c:	f7ff fcfd 	bl	800248a <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002a90:	2201      	movs	r2, #1
 8002a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a96:	483b      	ldr	r0, [pc, #236]	; (8002b84 <main+0x2ac>)
 8002a98:	f7fe fe52 	bl	8001740 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8002a9c:	2096      	movs	r0, #150	; 0x96
 8002a9e:	f7fd ff9b 	bl	80009d8 <HAL_Delay>

	  int32_t temp24 = received_temp[1] << 16 | received_temp[2] << 8 | received_temp[3];
 8002aa2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002aa6:	041a      	lsls	r2, r3, #16
 8002aa8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
	  if (temp24 & 0x800000)
 8002ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <main+0x1f2>
	  {
		  temp24 |= 0xFF000000; //fix sign
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
	  }

	  temp24 >>= 5;
 8002aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002acc:	115b      	asrs	r3, r3, #5
 8002ace:	65fb      	str	r3, [r7, #92]	; 0x5c

	  float tempfloat = temp24;
 8002ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ada:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	  tempfloat *= 0.0078125;
 8002ade:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ae2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002b90 <main+0x2b8>
 8002ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aea:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	  tempfloat += 273.15;
 8002aee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002af0:	f7fd fcee 	bl	80004d0 <__aeabi_f2d>
 8002af4:	a320      	add	r3, pc, #128	; (adr r3, 8002b78 <main+0x2a0>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	f7fd fb8b 	bl	8000214 <__adddf3>
 8002afe:	4603      	mov	r3, r0
 8002b00:	460c      	mov	r4, r1
 8002b02:	4618      	mov	r0, r3
 8002b04:	4621      	mov	r1, r4
 8002b06:	f7fd fd37 	bl	8000578 <__aeabi_d2f>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	65bb      	str	r3, [r7, #88]	; 0x58

	  int sensorNum = 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	657b      	str	r3, [r7, #84]	; 0x54
	  uint16_t msgID = create_ID(BOARD_ID, sensorNum);
 8002b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	4619      	mov	r1, r3
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f000 fb49 	bl	80031b0 <create_ID>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	  can_msg_t msg;

	  uint16_t value = tempfloat*32;
 8002b24:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b28:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002b94 <main+0x2bc>
 8002b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b34:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b38:	88bb      	ldrh	r3, [r7, #4]
 8002b3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	  CAN_short_msg(&msg, msgID, value);
 8002b3e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002b42:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 8002b46:	f107 0310 	add.w	r3, r7, #16
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fb66 	bl	800321c <CAN_short_msg>

	  while(!CAN_can_transmit()){};
 8002b50:	bf00      	nop
 8002b52:	f000 fb4b 	bl	80031ec <CAN_can_transmit>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f083 0301 	eor.w	r3, r3, #1
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f7      	bne.n	8002b52 <main+0x27a>

	  CAN_queue_transmit(&msg);
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fb72 	bl	8003250 <CAN_queue_transmit>


	  volatile int var = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  {
 8002b70:	e72f      	b.n	80029d2 <main+0xfa>
 8002b72:	bf00      	nop
 8002b74:	f3af 8000 	nop.w
 8002b78:	66666666 	.word	0x66666666
 8002b7c:	40711266 	.word	0x40711266
 8002b80:	080037a8 	.word	0x080037a8
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	20000164 	.word	0x20000164
 8002b90:	3c000000 	.word	0x3c000000
 8002b94:	42000000 	.word	0x42000000

08002b98 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b094      	sub	sp, #80	; 0x50
 8002b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	4a3b      	ldr	r2, [pc, #236]	; (8002c90 <SystemClock_Config+0xf8>)
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <SystemClock_Config+0xf8>)
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <SystemClock_Config+0xf8>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4a35      	ldr	r2, [pc, #212]	; (8002c94 <SystemClock_Config+0xfc>)
 8002bc0:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <SystemClock_Config+0xfc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b32      	ldr	r3, [pc, #200]	; (8002c94 <SystemClock_Config+0xfc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002be0:	2302      	movs	r3, #2
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002be4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002be8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002bea:	2304      	movs	r3, #4
 8002bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002bee:	23b4      	movs	r3, #180	; 0xb4
 8002bf0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bfe:	f107 031c 	add.w	r3, r7, #28
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff f99e 	bl	8001f44 <HAL_RCC_OscConfig>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <SystemClock_Config+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c0e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002c12:	4821      	ldr	r0, [pc, #132]	; (8002c98 <SystemClock_Config+0x100>)
 8002c14:	f000 fa9e 	bl	8003154 <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c18:	f7fe fe8c 	bl	8001934 <HAL_PWREx_EnableOverDrive>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <SystemClock_Config+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c22:	f240 110d 	movw	r1, #269	; 0x10d
 8002c26:	481c      	ldr	r0, [pc, #112]	; (8002c98 <SystemClock_Config+0x100>)
 8002c28:	f000 fa94 	bl	8003154 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c2c:	230f      	movs	r3, #15
 8002c2e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c30:	2302      	movs	r3, #2
 8002c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c44:	f107 0308 	add.w	r3, r7, #8
 8002c48:	2105      	movs	r1, #5
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fec2 	bl	80019d4 <HAL_RCC_ClockConfig>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d004      	beq.n	8002c60 <SystemClock_Config+0xc8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c56:	f240 111b 	movw	r1, #283	; 0x11b
 8002c5a:	480f      	ldr	r0, [pc, #60]	; (8002c98 <SystemClock_Config+0x100>)
 8002c5c:	f000 fa7a 	bl	8003154 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002c60:	f7fe ff9a 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <SystemClock_Config+0x104>)
 8002c68:	fba3 2302 	umull	r2, r3, r3, r2
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe fb2f 	bl	80012d2 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002c74:	2004      	movs	r0, #4
 8002c76:	f7fe fb39 	bl	80012ec <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c82:	f7fe fb0a 	bl	800129a <HAL_NVIC_SetPriority>
}
 8002c86:	bf00      	nop
 8002c88:	3750      	adds	r7, #80	; 0x50
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40007000 	.word	0x40007000
 8002c98:	080037ac 	.word	0x080037ac
 8002c9c:	10624dd3 	.word	0x10624dd3

08002ca0 <MX_ADC1_Init>:

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002ca8:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <MX_ADC1_Init+0x98>)
 8002caa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002cac:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002cae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002cba:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cd2:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <MX_ADC1_Init+0x9c>)
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cd8:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002cde:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ce4:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cf0:	4810      	ldr	r0, [pc, #64]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002cf2:	f7fd fe8e 	bl	8000a12 <HAL_ADC_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d004      	beq.n	8002d06 <MX_ADC1_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002cfc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002d00:	480f      	ldr	r0, [pc, #60]	; (8002d40 <MX_ADC1_Init+0xa0>)
 8002d02:	f000 fa27 	bl	8003154 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d12:	463b      	mov	r3, r7
 8002d14:	4619      	mov	r1, r3
 8002d16:	4807      	ldr	r0, [pc, #28]	; (8002d34 <MX_ADC1_Init+0x94>)
 8002d18:	f7fd febe 	bl	8000a98 <HAL_ADC_ConfigChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d004      	beq.n	8002d2c <MX_ADC1_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002d22:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002d26:	4806      	ldr	r0, [pc, #24]	; (8002d40 <MX_ADC1_Init+0xa0>)
 8002d28:	f000 fa14 	bl	8003154 <_Error_Handler>
  }

}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200000c0 	.word	0x200000c0
 8002d38:	40012000 	.word	0x40012000
 8002d3c:	0f000001 	.word	0x0f000001
 8002d40:	080037ac 	.word	0x080037ac

08002d44 <MX_ADC2_Init>:

/* ADC2 init function */
static void MX_ADC2_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc2.Instance = ADC2;
 8002d4a:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d4c:	4a23      	ldr	r2, [pc, #140]	; (8002ddc <MX_ADC2_Init+0x98>)
 8002d4e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d56:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002d58:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	621a      	str	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d78:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <MX_ADC2_Init+0x9c>)
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d8e:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002d94:	4810      	ldr	r0, [pc, #64]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002d96:	f7fd fe3c 	bl	8000a12 <HAL_ADC_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <MX_ADC2_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002da0:	f240 1165 	movw	r1, #357	; 0x165
 8002da4:	480f      	ldr	r0, [pc, #60]	; (8002de4 <MX_ADC2_Init+0xa0>)
 8002da6:	f000 f9d5 	bl	8003154 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8002daa:	2302      	movs	r3, #2
 8002dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002db6:	463b      	mov	r3, r7
 8002db8:	4619      	mov	r1, r3
 8002dba:	4807      	ldr	r0, [pc, #28]	; (8002dd8 <MX_ADC2_Init+0x94>)
 8002dbc:	f7fd fe6c 	bl	8000a98 <HAL_ADC_ConfigChannel>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <MX_ADC2_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002dc6:	f240 116f 	movw	r1, #367	; 0x16f
 8002dca:	4806      	ldr	r0, [pc, #24]	; (8002de4 <MX_ADC2_Init+0xa0>)
 8002dcc:	f000 f9c2 	bl	8003154 <_Error_Handler>
  }

}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000024 	.word	0x20000024
 8002ddc:	40012100 	.word	0x40012100
 8002de0:	0f000001 	.word	0x0f000001
 8002de4:	080037ac 	.word	0x080037ac

08002de8 <MX_ADC3_Init>:

/* ADC3 init function */
static void MX_ADC3_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc3.Instance = ADC3;
 8002dee:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002df0:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <MX_ADC3_Init+0x98>)
 8002df2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002df4:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002df6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dfa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002e08:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <MX_ADC3_Init+0x9c>)
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002e38:	4810      	ldr	r0, [pc, #64]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002e3a:	f7fd fdea 	bl	8000a12 <HAL_ADC_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <MX_ADC3_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e44:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8002e48:	480f      	ldr	r0, [pc, #60]	; (8002e88 <MX_ADC3_Init+0xa0>)
 8002e4a:	f000 f983 	bl	8003154 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8002e4e:	230a      	movs	r3, #10
 8002e50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4807      	ldr	r0, [pc, #28]	; (8002e7c <MX_ADC3_Init+0x94>)
 8002e60:	f7fd fe1a 	bl	8000a98 <HAL_ADC_ConfigChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <MX_ADC3_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e6a:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8002e6e:	4806      	ldr	r0, [pc, #24]	; (8002e88 <MX_ADC3_Init+0xa0>)
 8002e70:	f000 f970 	bl	8003154 <_Error_Handler>
  }

}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000108 	.word	0x20000108
 8002e80:	40012200 	.word	0x40012200
 8002e84:	0f000001 	.word	0x0f000001
 8002e88:	080037ac 	.word	0x080037ac

08002e8c <MX_CAN1_Init>:

/* CAN1 init function */
static void MX_CAN1_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002e92:	4a1a      	ldr	r2, [pc, #104]	; (8002efc <MX_CAN1_Init+0x70>)
 8002e94:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8002e96:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002e98:	2215      	movs	r2, #21
 8002e9a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002e9c:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SJW = CAN_SJW_1TQ;
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	60da      	str	r2, [r3, #12]
  hcan1.Init.BS1 = CAN_BS1_2TQ;
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002eaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002eae:	611a      	str	r2, [r3, #16]
  hcan1.Init.BS2 = CAN_BS2_2TQ;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002eb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002eb6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TTCM = DISABLE;
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	619a      	str	r2, [r3, #24]
  hcan1.Init.ABOM = DISABLE;
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	61da      	str	r2, [r3, #28]
  hcan1.Init.AWUM = DISABLE;
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	621a      	str	r2, [r3, #32]
  hcan1.Init.NART = DISABLE;
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	629a      	str	r2, [r3, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002edc:	4806      	ldr	r0, [pc, #24]	; (8002ef8 <MX_CAN1_Init+0x6c>)
 8002ede:	f7fd fffd 	bl	8000edc <HAL_CAN_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d004      	beq.n	8002ef2 <MX_CAN1_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ee8:	f240 11ab 	movw	r1, #427	; 0x1ab
 8002eec:	4804      	ldr	r0, [pc, #16]	; (8002f00 <MX_CAN1_Init+0x74>)
 8002eee:	f000 f931 	bl	8003154 <_Error_Handler>
  }

}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200001bc 	.word	0x200001bc
 8002efc:	40006400 	.word	0x40006400
 8002f00:	080037ac 	.word	0x080037ac

08002f04 <MX_DAC_Init>:

/* DAC init function */
static void MX_DAC_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 8002f0a:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <MX_DAC_Init+0x6c>)
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <MX_DAC_Init+0x70>)
 8002f0e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002f10:	4817      	ldr	r0, [pc, #92]	; (8002f70 <MX_DAC_Init+0x6c>)
 8002f12:	f7fe fa14 	bl	800133e <HAL_DAC_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d004      	beq.n	8002f26 <MX_DAC_Init+0x22>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002f1c:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002f20:	4815      	ldr	r0, [pc, #84]	; (8002f78 <MX_DAC_Init+0x74>)
 8002f22:	f000 f917 	bl	8003154 <_Error_Handler>
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002f2e:	463b      	mov	r3, r7
 8002f30:	2200      	movs	r2, #0
 8002f32:	4619      	mov	r1, r3
 8002f34:	480e      	ldr	r0, [pc, #56]	; (8002f70 <MX_DAC_Init+0x6c>)
 8002f36:	f7fe fa24 	bl	8001382 <HAL_DAC_ConfigChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d004      	beq.n	8002f4a <MX_DAC_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002f40:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002f44:	480c      	ldr	r0, [pc, #48]	; (8002f78 <MX_DAC_Init+0x74>)
 8002f46:	f000 f905 	bl	8003154 <_Error_Handler>
  }

    /**DAC channel OUT2 config 
    */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002f4a:	463b      	mov	r3, r7
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4807      	ldr	r0, [pc, #28]	; (8002f70 <MX_DAC_Init+0x6c>)
 8002f52:	f7fe fa16 	bl	8001382 <HAL_DAC_ConfigChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d004      	beq.n	8002f66 <MX_DAC_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002f5c:	f240 11cb 	movw	r1, #459	; 0x1cb
 8002f60:	4805      	ldr	r0, [pc, #20]	; (8002f78 <MX_DAC_Init+0x74>)
 8002f62:	f000 f8f7 	bl	8003154 <_Error_Handler>
  }

}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000150 	.word	0x20000150
 8002f74:	40007400 	.word	0x40007400
 8002f78:	080037ac 	.word	0x080037ac

08002f7c <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <MX_I2C1_Init+0x58>)
 8002f82:	4a15      	ldr	r2, [pc, #84]	; (8002fd8 <MX_I2C1_Init+0x5c>)
 8002f84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <MX_I2C1_Init+0x58>)
 8002f88:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <MX_I2C1_Init+0x60>)
 8002f8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <MX_I2C1_Init+0x58>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <MX_I2C1_Init+0x58>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <MX_I2C1_Init+0x58>)
 8002f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <MX_I2C1_Init+0x58>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <MX_I2C1_Init+0x58>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <MX_I2C1_Init+0x58>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <MX_I2C1_Init+0x58>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fb8:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <MX_I2C1_Init+0x58>)
 8002fba:	f7fe fbdb 	bl	8001774 <HAL_I2C_Init>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <MX_I2C1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002fc4:	f240 11df 	movw	r1, #479	; 0x1df
 8002fc8:	4805      	ldr	r0, [pc, #20]	; (8002fe0 <MX_I2C1_Init+0x64>)
 8002fca:	f000 f8c3 	bl	8003154 <_Error_Handler>
  }

}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	2000006c 	.word	0x2000006c
 8002fd8:	40005400 	.word	0x40005400
 8002fdc:	000186a0 	.word	0x000186a0
 8002fe0:	080037ac 	.word	0x080037ac

08002fe4 <MX_SPI1_Init>:

/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <MX_SPI1_Init+0x6c>)
 8002fea:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <MX_SPI1_Init+0x70>)
 8002fec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fee:	4b18      	ldr	r3, [pc, #96]	; (8003050 <MX_SPI1_Init+0x6c>)
 8002ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ff4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <MX_SPI1_Init+0x6c>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <MX_SPI1_Init+0x6c>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003002:	4b13      	ldr	r3, [pc, #76]	; (8003050 <MX_SPI1_Init+0x6c>)
 8003004:	2200      	movs	r2, #0
 8003006:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <MX_SPI1_Init+0x6c>)
 800300a:	2201      	movs	r2, #1
 800300c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800300e:	4b10      	ldr	r3, [pc, #64]	; (8003050 <MX_SPI1_Init+0x6c>)
 8003010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003014:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003016:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <MX_SPI1_Init+0x6c>)
 8003018:	2220      	movs	r2, #32
 800301a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <MX_SPI1_Init+0x6c>)
 800301e:	2200      	movs	r2, #0
 8003020:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <MX_SPI1_Init+0x6c>)
 8003024:	2200      	movs	r2, #0
 8003026:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <MX_SPI1_Init+0x6c>)
 800302a:	2200      	movs	r2, #0
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <MX_SPI1_Init+0x6c>)
 8003030:	220a      	movs	r2, #10
 8003032:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003034:	4806      	ldr	r0, [pc, #24]	; (8003050 <MX_SPI1_Init+0x6c>)
 8003036:	f7ff f9c5 	bl	80023c4 <HAL_SPI_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <MX_SPI1_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003040:	f240 11f7 	movw	r1, #503	; 0x1f7
 8003044:	4804      	ldr	r0, [pc, #16]	; (8003058 <MX_SPI1_Init+0x74>)
 8003046:	f000 f885 	bl	8003154 <_Error_Handler>
  }

}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000164 	.word	0x20000164
 8003054:	40013000 	.word	0x40013000
 8003058:	080037ac 	.word	0x080037ac

0800305c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	4a38      	ldr	r2, [pc, #224]	; (8003148 <MX_GPIO_Init+0xec>)
 8003068:	4b37      	ldr	r3, [pc, #220]	; (8003148 <MX_GPIO_Init+0xec>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b35      	ldr	r3, [pc, #212]	; (8003148 <MX_GPIO_Init+0xec>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4a31      	ldr	r2, [pc, #196]	; (8003148 <MX_GPIO_Init+0xec>)
 8003084:	4b30      	ldr	r3, [pc, #192]	; (8003148 <MX_GPIO_Init+0xec>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f043 0304 	orr.w	r3, r3, #4
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <MX_GPIO_Init+0xec>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <MX_GPIO_Init+0xec>)
 80030a0:	4b29      	ldr	r3, [pc, #164]	; (8003148 <MX_GPIO_Init+0xec>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b27      	ldr	r3, [pc, #156]	; (8003148 <MX_GPIO_Init+0xec>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	4a23      	ldr	r2, [pc, #140]	; (8003148 <MX_GPIO_Init+0xec>)
 80030bc:	4b22      	ldr	r3, [pc, #136]	; (8003148 <MX_GPIO_Init+0xec>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <MX_GPIO_Init+0xec>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	4a1c      	ldr	r2, [pc, #112]	; (8003148 <MX_GPIO_Init+0xec>)
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <MX_GPIO_Init+0xec>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	f043 0310 	orr.w	r3, r3, #16
 80030e0:	6313      	str	r3, [r2, #48]	; 0x30
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <MX_GPIO_Init+0xec>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS10_GPIO_Port, CS10_Pin, GPIO_PIN_SET);
 80030ee:	2201      	movs	r2, #1
 80030f0:	2102      	movs	r1, #2
 80030f2:	4816      	ldr	r0, [pc, #88]	; (800314c <MX_GPIO_Init+0xf0>)
 80030f4:	f7fe fb24 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS9_Pin|CS8_Pin|CS7_Pin|CS6_Pin 
 80030f8:	2201      	movs	r2, #1
 80030fa:	f64f 7180 	movw	r1, #65408	; 0xff80
 80030fe:	4814      	ldr	r0, [pc, #80]	; (8003150 <MX_GPIO_Init+0xf4>)
 8003100:	f7fe fb1e 	bl	8001740 <HAL_GPIO_WritePin>
                          |CS5_Pin|CS4_Pin|CS3_Pin|CS2_Pin 
                          |CS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : CS10_Pin */
  GPIO_InitStruct.Pin = CS10_Pin;
 8003104:	2302      	movs	r3, #2
 8003106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003108:	2301      	movs	r3, #1
 800310a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003110:	2300      	movs	r3, #0
 8003112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS10_GPIO_Port, &GPIO_InitStruct);
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	4619      	mov	r1, r3
 800311a:	480c      	ldr	r0, [pc, #48]	; (800314c <MX_GPIO_Init+0xf0>)
 800311c:	f7fe f97e 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS9_Pin CS8_Pin CS7_Pin CS6_Pin 
                           CS5_Pin CS4_Pin CS3_Pin CS2_Pin 
                           CS1_Pin */
  GPIO_InitStruct.Pin = CS9_Pin|CS8_Pin|CS7_Pin|CS6_Pin 
 8003120:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003124:	617b      	str	r3, [r7, #20]
                          |CS5_Pin|CS4_Pin|CS3_Pin|CS2_Pin 
                          |CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003126:	2301      	movs	r3, #1
 8003128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003132:	f107 0314 	add.w	r3, r7, #20
 8003136:	4619      	mov	r1, r3
 8003138:	4805      	ldr	r0, [pc, #20]	; (8003150 <MX_GPIO_Init+0xf4>)
 800313a:	f7fe f96f 	bl	800141c <HAL_GPIO_Init>

}
 800313e:	bf00      	nop
 8003140:	3728      	adds	r7, #40	; 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
 800314c:	40020400 	.word	0x40020400
 8003150:	40021000 	.word	0x40021000

08003154 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 800315e:	e7fe      	b.n	800315e <_Error_Handler+0xa>

08003160 <Init_MyCAN>:
#include "stm32f4xx_hal.h"

#include "mycan.h"

void Init_MyCAN()
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
	CAN1->MCR &= ~1;
 8003164:	4a11      	ldr	r2, [pc, #68]	; (80031ac <Init_MyCAN+0x4c>)
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <Init_MyCAN+0x4c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	6013      	str	r3, [r2, #0]
  	CAN1->sFilterRegister[0].FR1 = 0;
 8003170:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <Init_MyCAN+0x4c>)
 8003172:	2200      	movs	r2, #0
 8003174:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 	CAN1->sFilterRegister[0].FR2 = 0;
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <Init_MyCAN+0x4c>)
 800317a:	2200      	movs	r2, #0
 800317c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 	CAN1->FA1R = 1;
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <Init_MyCAN+0x4c>)
 8003182:	2201      	movs	r2, #1
 8003184:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 	CAN1->FS1R = 1;
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <Init_MyCAN+0x4c>)
 800318a:	2201      	movs	r2, #1
 800318c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 	CAN1->FMR &= ~1;
 8003190:	4a06      	ldr	r2, [pc, #24]	; (80031ac <Init_MyCAN+0x4c>)
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <Init_MyCAN+0x4c>)
 8003194:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40006400 	.word	0x40006400

080031b0 <create_ID>:

uint16_t create_ID(uint16_t board, uint16_t type)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	460a      	mov	r2, r1
 80031ba:	80fb      	strh	r3, [r7, #6]
 80031bc:	4613      	mov	r3, r2
 80031be:	80bb      	strh	r3, [r7, #4]
	return (((uint16_t)(board << 6) & 0b0000011111000000) | ((uint16_t)type & 0b00111111));
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	019b      	lsls	r3, r3, #6
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	b21b      	sxth	r3, r3
 80031c8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80031cc:	b21a      	sxth	r2, r3
 80031ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80031d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d6:	b21b      	sxth	r3, r3
 80031d8:	4313      	orrs	r3, r2
 80031da:	b21b      	sxth	r3, r3
 80031dc:	b29b      	uxth	r3, r3
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <CAN_can_transmit>:
    uint16_t identifier = create_ID(board, MID_ACKNOWLEDGE);
    uint16_t payload = id;
    CAN_short_msg(msg, identifier, payload);
}*/

bool CAN_can_transmit() {
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
	// Retrieve mailbox empty bits from CAN transmit register
	int empty_flags = (CAN1->TSR >> 26) & 0x07;
 80031f2:	4b09      	ldr	r3, [pc, #36]	; (8003218 <CAN_can_transmit+0x2c>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	0e9b      	lsrs	r3, r3, #26
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	607b      	str	r3, [r7, #4]

	// Check that at least one mailbox is empty
	return (empty_flags != 0x00);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf14      	ite	ne
 8003204:	2301      	movne	r3, #1
 8003206:	2300      	moveq	r3, #0
 8003208:	b2db      	uxtb	r3, r3
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40006400 	.word	0x40006400

0800321c <CAN_short_msg>:
void CAN_byte_msg(can_msg_t *msg, uint16_t identifier, uint8_t data) {
	msg->identifier = identifier;
	msg->data_length = 1;
	*(uint8_t*)(msg->data + 7) = data;
}
void CAN_short_msg(can_msg_t *msg, uint16_t identifier, uint16_t data) {
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
 8003228:	4613      	mov	r3, r2
 800322a:	803b      	strh	r3, [r7, #0]
	msg->identifier = identifier;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	805a      	strh	r2, [r3, #2]
	msg->data_length = 2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2202      	movs	r2, #2
 8003236:	701a      	strb	r2, [r3, #0]
	*(uint16_t*)(msg->data + 6) = data;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	3306      	adds	r3, #6
 800323e:	883a      	ldrh	r2, [r7, #0]
 8003240:	801a      	strh	r2, [r3, #0]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <CAN_queue_transmit>:
}
uint32_t CAN_decode_long(can_msg_t *msg) {
 return (msg->data[4] << 24) | (msg->data[5] << 16) | (msg->data[6] << 8) | msg->data[7];
}

bool CAN_queue_transmit(can_msg_t *msg) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	// Check if at least one mailbox is available
	if (CAN_can_transmit()) {
 8003258:	f7ff ffc8 	bl	80031ec <CAN_can_transmit>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d059      	beq.n	8003316 <CAN_queue_transmit+0xc6>

		// Find an available mailbox
		int mailbox = (CAN1->TSR >> 24) & 0x03;
 8003262:	4b2f      	ldr	r3, [pc, #188]	; (8003320 <CAN_queue_transmit+0xd0>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	0e1b      	lsrs	r3, r3, #24
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	61fb      	str	r3, [r7, #28]

		int identifier_reg = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
		int dat_len_reg = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
		int dat_low_reg = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
		int dat_high_reg = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]

		// Setup transmit register for data frame with standard identifier
		identifier_reg |= (msg->identifier << 21);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	885b      	ldrh	r3, [r3, #2]
 8003282:	055b      	lsls	r3, r3, #21
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
		// Request start of transmission
		identifier_reg |= 0x01;
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	61bb      	str	r3, [r7, #24]

		// Setup data length register with no timestamp
		dat_len_reg = msg->data_length;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	617b      	str	r3, [r7, #20]

		// Setup low data register with data[4] & data[5] & data[6] & data[7] (concat)
		dat_low_reg = (msg->data[4] << 24) | (msg->data[5] << 16) | (msg->data[6] << 8) | (msg->data[7]);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7a1b      	ldrb	r3, [r3, #8]
 800329c:	061a      	lsls	r2, r3, #24
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	7a5b      	ldrb	r3, [r3, #9]
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7a9b      	ldrb	r3, [r3, #10]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	4313      	orrs	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	7ad2      	ldrb	r2, [r2, #11]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
		// Setup high data register with data[0] & data[1] & data[2] & data[3] (concat)
		dat_high_reg = (msg->data[0] << 24) | (msg->data[1] << 16) | (msg->data[2] << 8) | (msg->data[3]);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	791b      	ldrb	r3, [r3, #4]
 80032ba:	061a      	lsls	r2, r3, #24
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	795b      	ldrb	r3, [r3, #5]
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	799b      	ldrb	r3, [r3, #6]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	4313      	orrs	r3, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	79d2      	ldrb	r2, [r2, #7]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]

		CAN1->sTxMailBox[mailbox].TDLR = dat_low_reg;
 80032d4:	4912      	ldr	r1, [pc, #72]	; (8003320 <CAN_queue_transmit+0xd0>)
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	440b      	add	r3, r1
 80032de:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80032e2:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mailbox].TDHR = dat_high_reg;
 80032e4:	490e      	ldr	r1, [pc, #56]	; (8003320 <CAN_queue_transmit+0xd0>)
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	440b      	add	r3, r1
 80032ee:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80032f2:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mailbox].TDTR = dat_len_reg;
 80032f4:	490a      	ldr	r1, [pc, #40]	; (8003320 <CAN_queue_transmit+0xd0>)
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	3318      	adds	r3, #24
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	440b      	add	r3, r1
 8003300:	3304      	adds	r3, #4
 8003302:	601a      	str	r2, [r3, #0]

		// Set the identifier register to start the transaction
		CAN1->sTxMailBox[mailbox].TIR = identifier_reg;
 8003304:	4906      	ldr	r1, [pc, #24]	; (8003320 <CAN_queue_transmit+0xd0>)
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	3318      	adds	r3, #24
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	440b      	add	r3, r1
 8003310:	601a      	str	r2, [r3, #0]

		return true;
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <CAN_queue_transmit+0xc8>

	} else {
		return false;
 8003316:	2300      	movs	r3, #0
	}
}
 8003318:	4618      	mov	r0, r3
 800331a:	3720      	adds	r7, #32
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40006400 	.word	0x40006400

08003324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003328:	2003      	movs	r0, #3
 800332a:	f7fd ffab 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800332e:	2200      	movs	r2, #0
 8003330:	2100      	movs	r1, #0
 8003332:	f06f 000b 	mvn.w	r0, #11
 8003336:	f7fd ffb0 	bl	800129a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800333a:	2200      	movs	r2, #0
 800333c:	2100      	movs	r1, #0
 800333e:	f06f 000a 	mvn.w	r0, #10
 8003342:	f7fd ffaa 	bl	800129a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	f06f 0009 	mvn.w	r0, #9
 800334e:	f7fd ffa4 	bl	800129a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003352:	2200      	movs	r2, #0
 8003354:	2100      	movs	r1, #0
 8003356:	f06f 0004 	mvn.w	r0, #4
 800335a:	f7fd ff9e 	bl	800129a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800335e:	2200      	movs	r2, #0
 8003360:	2100      	movs	r1, #0
 8003362:	f06f 0003 	mvn.w	r0, #3
 8003366:	f7fd ff98 	bl	800129a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800336a:	2200      	movs	r2, #0
 800336c:	2100      	movs	r1, #0
 800336e:	f06f 0001 	mvn.w	r0, #1
 8003372:	f7fd ff92 	bl	800129a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003376:	2200      	movs	r2, #0
 8003378:	2100      	movs	r1, #0
 800337a:	f04f 30ff 	mov.w	r0, #4294967295
 800337e:	f7fd ff8c 	bl	800129a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a30      	ldr	r2, [pc, #192]	; (8003458 <HAL_ADC_MspInit+0xd0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d11a      	bne.n	80033d0 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	4a2f      	ldr	r2, [pc, #188]	; (800345c <HAL_ADC_MspInit+0xd4>)
 80033a0:	4b2e      	ldr	r3, [pc, #184]	; (800345c <HAL_ADC_MspInit+0xd4>)
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a8:	6453      	str	r3, [r2, #68]	; 0x44
 80033aa:	4b2c      	ldr	r3, [pc, #176]	; (800345c <HAL_ADC_MspInit+0xd4>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	693b      	ldr	r3, [r7, #16]
  
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033b6:	2303      	movs	r3, #3
 80033b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ba:	2303      	movs	r3, #3
 80033bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c2:	f107 0314 	add.w	r3, r7, #20
 80033c6:	4619      	mov	r1, r3
 80033c8:	4825      	ldr	r0, [pc, #148]	; (8003460 <HAL_ADC_MspInit+0xd8>)
 80033ca:	f7fe f827 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80033ce:	e03e      	b.n	800344e <HAL_ADC_MspInit+0xc6>
  else if(hadc->Instance==ADC2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a23      	ldr	r2, [pc, #140]	; (8003464 <HAL_ADC_MspInit+0xdc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d11a      	bne.n	8003410 <HAL_ADC_MspInit+0x88>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4a1f      	ldr	r2, [pc, #124]	; (800345c <HAL_ADC_MspInit+0xd4>)
 80033e0:	4b1e      	ldr	r3, [pc, #120]	; (800345c <HAL_ADC_MspInit+0xd4>)
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ea:	4b1c      	ldr	r3, [pc, #112]	; (800345c <HAL_ADC_MspInit+0xd4>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033f6:	230c      	movs	r3, #12
 80033f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033fa:	2303      	movs	r3, #3
 80033fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	4619      	mov	r1, r3
 8003408:	4815      	ldr	r0, [pc, #84]	; (8003460 <HAL_ADC_MspInit+0xd8>)
 800340a:	f7fe f807 	bl	800141c <HAL_GPIO_Init>
}
 800340e:	e01e      	b.n	800344e <HAL_ADC_MspInit+0xc6>
  else if(hadc->Instance==ADC3)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <HAL_ADC_MspInit+0xe0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d119      	bne.n	800344e <HAL_ADC_MspInit+0xc6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	4a0f      	ldr	r2, [pc, #60]	; (800345c <HAL_ADC_MspInit+0xd4>)
 8003420:	4b0e      	ldr	r3, [pc, #56]	; (800345c <HAL_ADC_MspInit+0xd4>)
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003428:	6453      	str	r3, [r2, #68]	; 0x44
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <HAL_ADC_MspInit+0xd4>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003436:	2303      	movs	r3, #3
 8003438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800343a:	2303      	movs	r3, #3
 800343c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	4619      	mov	r1, r3
 8003448:	4808      	ldr	r0, [pc, #32]	; (800346c <HAL_ADC_MspInit+0xe4>)
 800344a:	f7fd ffe7 	bl	800141c <HAL_GPIO_Init>
}
 800344e:	bf00      	nop
 8003450:	3728      	adds	r7, #40	; 0x28
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40012000 	.word	0x40012000
 800345c:	40023800 	.word	0x40023800
 8003460:	40020000 	.word	0x40020000
 8003464:	40012100 	.word	0x40012100
 8003468:	40012200 	.word	0x40012200
 800346c:	40020800 	.word	0x40020800

08003470 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a12      	ldr	r2, [pc, #72]	; (80034c8 <HAL_CAN_MspInit+0x58>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d11e      	bne.n	80034c0 <HAL_CAN_MspInit+0x50>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	4a11      	ldr	r2, [pc, #68]	; (80034cc <HAL_CAN_MspInit+0x5c>)
 8003488:	4b10      	ldr	r3, [pc, #64]	; (80034cc <HAL_CAN_MspInit+0x5c>)
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <HAL_CAN_MspInit+0x5c>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
  
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800349e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80034a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ac:	2303      	movs	r3, #3
 80034ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80034b0:	2309      	movs	r3, #9
 80034b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b4:	f107 030c 	add.w	r3, r7, #12
 80034b8:	4619      	mov	r1, r3
 80034ba:	4805      	ldr	r0, [pc, #20]	; (80034d0 <HAL_CAN_MspInit+0x60>)
 80034bc:	f7fd ffae 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80034c0:	bf00      	nop
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40006400 	.word	0x40006400
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40020000 	.word	0x40020000

080034d4 <HAL_DAC_MspInit>:
  }

}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a10      	ldr	r2, [pc, #64]	; (8003524 <HAL_DAC_MspInit+0x50>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d119      	bne.n	800351a <HAL_DAC_MspInit+0x46>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <HAL_DAC_MspInit+0x54>)
 80034ec:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <HAL_DAC_MspInit+0x54>)
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <HAL_DAC_MspInit+0x54>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003502:	2330      	movs	r3, #48	; 0x30
 8003504:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003506:	2303      	movs	r3, #3
 8003508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350e:	f107 030c 	add.w	r3, r7, #12
 8003512:	4619      	mov	r1, r3
 8003514:	4805      	ldr	r0, [pc, #20]	; (800352c <HAL_DAC_MspInit+0x58>)
 8003516:	f7fd ff81 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800351a:	bf00      	nop
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40007400 	.word	0x40007400
 8003528:	40023800 	.word	0x40023800
 800352c:	40020000 	.word	0x40020000

08003530 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a12      	ldr	r2, [pc, #72]	; (8003588 <HAL_I2C_MspInit+0x58>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d11d      	bne.n	800357e <HAL_I2C_MspInit+0x4e>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003542:	23c0      	movs	r3, #192	; 0xc0
 8003544:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003546:	2312      	movs	r3, #18
 8003548:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800354a:	2301      	movs	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354e:	2303      	movs	r3, #3
 8003550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003552:	2304      	movs	r3, #4
 8003554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003556:	f107 030c 	add.w	r3, r7, #12
 800355a:	4619      	mov	r1, r3
 800355c:	480b      	ldr	r0, [pc, #44]	; (800358c <HAL_I2C_MspInit+0x5c>)
 800355e:	f7fd ff5d 	bl	800141c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <HAL_I2C_MspInit+0x60>)
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_I2C_MspInit+0x60>)
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003570:	6413      	str	r3, [r2, #64]	; 0x40
 8003572:	4b07      	ldr	r3, [pc, #28]	; (8003590 <HAL_I2C_MspInit+0x60>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800357e:	bf00      	nop
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40005400 	.word	0x40005400
 800358c:	40020400 	.word	0x40020400
 8003590:	40023800 	.word	0x40023800

08003594 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1a      	ldr	r2, [pc, #104]	; (800360c <HAL_SPI_MspInit+0x78>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d12d      	bne.n	8003602 <HAL_SPI_MspInit+0x6e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_SPI_MspInit+0x7c>)
 80035ac:	4b18      	ldr	r3, [pc, #96]	; (8003610 <HAL_SPI_MspInit+0x7c>)
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035b4:	6453      	str	r3, [r2, #68]	; 0x44
 80035b6:	4b16      	ldr	r3, [pc, #88]	; (8003610 <HAL_SPI_MspInit+0x7c>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035c2:	23c0      	movs	r3, #192	; 0xc0
 80035c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035d2:	2305      	movs	r3, #5
 80035d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d6:	f107 030c 	add.w	r3, r7, #12
 80035da:	4619      	mov	r1, r3
 80035dc:	480d      	ldr	r0, [pc, #52]	; (8003614 <HAL_SPI_MspInit+0x80>)
 80035de:	f7fd ff1d 	bl	800141c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035e2:	2308      	movs	r3, #8
 80035e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e6:	2302      	movs	r3, #2
 80035e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ee:	2303      	movs	r3, #3
 80035f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035f2:	2305      	movs	r3, #5
 80035f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f6:	f107 030c 	add.w	r3, r7, #12
 80035fa:	4619      	mov	r1, r3
 80035fc:	4806      	ldr	r0, [pc, #24]	; (8003618 <HAL_SPI_MspInit+0x84>)
 80035fe:	f7fd ff0d 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003602:	bf00      	nop
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40013000 	.word	0x40013000
 8003610:	40023800 	.word	0x40023800
 8003614:	40020000 	.word	0x40020000
 8003618:	40020400 	.word	0x40020400

0800361c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800362e:	e7fe      	b.n	800362e <HardFault_Handler+0x4>

08003630 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003634:	e7fe      	b.n	8003634 <MemManage_Handler+0x4>

08003636 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800363a:	e7fe      	b.n	800363a <BusFault_Handler+0x4>

0800363c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003640:	e7fe      	b.n	8003640 <UsageFault_Handler+0x4>

08003642 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003670:	f7fd f998 	bl	80009a4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003674:	f7fd fe56 	bl	8001324 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003678:	bf00      	nop
 800367a:	bd80      	pop	{r7, pc}

0800367c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003680:	4a16      	ldr	r2, [pc, #88]	; (80036dc <SystemInit+0x60>)
 8003682:	4b16      	ldr	r3, [pc, #88]	; (80036dc <SystemInit+0x60>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800368c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003690:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <SystemInit+0x64>)
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <SystemInit+0x64>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <SystemInit+0x64>)
 800369e:	2200      	movs	r2, #0
 80036a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80036a2:	4a0f      	ldr	r2, [pc, #60]	; (80036e0 <SystemInit+0x64>)
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <SystemInit+0x64>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80036ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <SystemInit+0x64>)
 80036b4:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <SystemInit+0x68>)
 80036b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80036b8:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <SystemInit+0x64>)
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <SystemInit+0x64>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <SystemInit+0x64>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <SystemInit+0x60>)
 80036cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036d0:	609a      	str	r2, [r3, #8]
#endif
}
 80036d2:	bf00      	nop
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	e000ed00 	.word	0xe000ed00
 80036e0:	40023800 	.word	0x40023800
 80036e4:	24003010 	.word	0x24003010

080036e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003720 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036ee:	e003      	b.n	80036f8 <LoopCopyDataInit>

080036f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036f6:	3104      	adds	r1, #4

080036f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036f8:	480b      	ldr	r0, [pc, #44]	; (8003728 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036fa:	4b0c      	ldr	r3, [pc, #48]	; (800372c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003700:	d3f6      	bcc.n	80036f0 <CopyDataInit>
  ldr  r2, =_sbss
 8003702:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003704:	e002      	b.n	800370c <LoopFillZerobss>

08003706 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003706:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003708:	f842 3b04 	str.w	r3, [r2], #4

0800370c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800370e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003710:	d3f9      	bcc.n	8003706 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003712:	f7ff ffb3 	bl	800367c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003716:	f000 f811 	bl	800373c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800371a:	f7ff f8dd 	bl	80028d8 <main>
  bx  lr    
 800371e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003720:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003724:	080037e4 	.word	0x080037e4
  ldr  r0, =_sdata
 8003728:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800372c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8003730:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8003734:	20000200 	.word	0x20000200

08003738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003738:	e7fe      	b.n	8003738 <ADC_IRQHandler>
	...

0800373c <__libc_init_array>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	4e0d      	ldr	r6, [pc, #52]	; (8003774 <__libc_init_array+0x38>)
 8003740:	4c0d      	ldr	r4, [pc, #52]	; (8003778 <__libc_init_array+0x3c>)
 8003742:	1ba4      	subs	r4, r4, r6
 8003744:	10a4      	asrs	r4, r4, #2
 8003746:	2500      	movs	r5, #0
 8003748:	42a5      	cmp	r5, r4
 800374a:	d109      	bne.n	8003760 <__libc_init_array+0x24>
 800374c:	4e0b      	ldr	r6, [pc, #44]	; (800377c <__libc_init_array+0x40>)
 800374e:	4c0c      	ldr	r4, [pc, #48]	; (8003780 <__libc_init_array+0x44>)
 8003750:	f000 f818 	bl	8003784 <_init>
 8003754:	1ba4      	subs	r4, r4, r6
 8003756:	10a4      	asrs	r4, r4, #2
 8003758:	2500      	movs	r5, #0
 800375a:	42a5      	cmp	r5, r4
 800375c:	d105      	bne.n	800376a <__libc_init_array+0x2e>
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003764:	4798      	blx	r3
 8003766:	3501      	adds	r5, #1
 8003768:	e7ee      	b.n	8003748 <__libc_init_array+0xc>
 800376a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800376e:	4798      	blx	r3
 8003770:	3501      	adds	r5, #1
 8003772:	e7f2      	b.n	800375a <__libc_init_array+0x1e>
 8003774:	080037dc 	.word	0x080037dc
 8003778:	080037dc 	.word	0x080037dc
 800377c:	080037dc 	.word	0x080037dc
 8003780:	080037e0 	.word	0x080037e0

08003784 <_init>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr

08003790 <_fini>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr
